/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 141);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanM/MWI2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzPzIxYWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _defineProperty = __webpack_require__(80);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzPzFkZmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("var store      = __webpack_require__(47)('wks')\n  , uid        = __webpack_require__(32)\n  , Symbol     = __webpack_require__(6).Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcz8zMDI3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBzdG9yZSAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpXG4gICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgU3ltYm9sICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbFxuICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(90), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzP2IyNjUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(17)(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzPzcwNTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcz83N2FhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("var anObject       = __webpack_require__(10)\n  , IE8_DOM_DEFINE = __webpack_require__(65)\n  , toPrimitive    = __webpack_require__(50)\n  , dP             = Object.defineProperty;\n\nexports.f = __webpack_require__(5) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcz80MTE2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = __webpack_require__(82);\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = __webpack_require__(79);\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = __webpack_require__(61);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzPzA1NzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxudmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _typeof2 = __webpack_require__(61);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanM/YWFkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(11);\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanM/MGRhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

eval("module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanM/MjRjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("var global    = __webpack_require__(6)\n  , core      = __webpack_require__(0)\n  , ctx       = __webpack_require__(19)\n  , hide      = __webpack_require__(14)\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanM/ZWNlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG4gICAgLCBrZXksIG93biwgb3V0O1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7XG4gICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEM7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmKElTX1BST1RPKXtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZih0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKWhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanM/ZDg1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("var dP         = __webpack_require__(7)\n  , createDesc = __webpack_require__(29);\nmodule.exports = __webpack_require__(5) ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzP2E2ZGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qc1xuLy8gbW9kdWxlIGlkID0gMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

eval("// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(39)\n  , defined = __webpack_require__(25);\nmodule.exports = function(it){\n  return IObject(defined(it));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzPzY5NDYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// exposes a single instance\nvar audioContext = null;\n\nvar AudioContext = window.AudioContext || window.webkitAudioContext;\n\nif (AudioContext) {\n  audioContext = new AudioContext();\n\n  if (/(iPhone|iPad)/i.test(navigator.userAgent) && audioContext.sampleRate < 44100) {\n    var buffer = audioContext.createBuffer(1, 1, 44100);\n    var dummy = audioContext.createBufferSource();\n    dummy.buffer = buffer;\n    dummy.connect(audioContext.destination);\n    dummy.start(0);\n    dummy.disconnect();\n  }\n}\n\nexports.default = audioContext;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1ZGlvLWNvbnRleHQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBSSxlQUFlLElBQWY7O0FBRUosSUFBSSxlQUFlLE9BQU8sWUFBUCxJQUF1QixPQUFPLGtCQUFQOztBQUUxQyxJQUFHLFlBQUgsRUFBaUI7QUFDZixpQkFBZSxJQUFJLFlBQUosRUFBZixDQURlOztBQUdmLE1BQUksaUJBQWlCLElBQWpCLENBQXNCLFVBQVUsU0FBVixDQUF0QixJQUE4QyxhQUFhLFVBQWIsR0FBMEIsS0FBMUIsRUFBaUM7QUFDakYsUUFBSSxTQUFTLGFBQWEsWUFBYixDQUEwQixDQUExQixFQUE2QixDQUE3QixFQUFnQyxLQUFoQyxDQUFULENBRDZFO0FBRWpGLFFBQUksUUFBUSxhQUFhLGtCQUFiLEVBQVIsQ0FGNkU7QUFHakYsVUFBTSxNQUFOLEdBQWUsTUFBZixDQUhpRjtBQUlqRixVQUFNLE9BQU4sQ0FBYyxhQUFhLFdBQWIsQ0FBZCxDQUppRjtBQUtqRixVQUFNLEtBQU4sQ0FBWSxDQUFaLEVBTGlGO0FBTWpGLFVBQU0sVUFBTixHQU5pRjtHQUFuRjtDQUhGOztrQkFhZSIsImZpbGUiOiJhdWRpby1jb250ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXhwb3NlcyBhIHNpbmdsZSBpbnN0YW5jZVxudmFyIGF1ZGlvQ29udGV4dCA9IG51bGw7XG5cbnZhciBBdWRpb0NvbnRleHQgPSB3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQ7XG5cbmlmKEF1ZGlvQ29udGV4dCkge1xuICBhdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XG5cbiAgaWYgKC8oaVBob25lfGlQYWQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiBhdWRpb0NvbnRleHQuc2FtcGxlUmF0ZSA8IDQ0MTAwKSB7XG4gICAgdmFyIGJ1ZmZlciA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXIoMSwgMSwgNDQxMDApO1xuICAgIHZhciBkdW1teSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICBkdW1teS5idWZmZXIgPSBidWZmZXI7XG4gICAgZHVtbXkuY29ubmVjdChhdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xuICAgIGR1bW15LnN0YXJ0KDApO1xuICAgIGR1bW15LmRpc2Nvbm5lY3QoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhdWRpb0NvbnRleHQ7XG4iXX0=//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dhdmVzLWF1ZGlvL2Rpc3QvY29yZS9hdWRpby1jb250ZXh0LmpzPzI2MzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vLyBleHBvc2VzIGEgc2luZ2xlIGluc3RhbmNlXG52YXIgYXVkaW9Db250ZXh0ID0gbnVsbDtcblxudmFyIEF1ZGlvQ29udGV4dCA9IHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dDtcblxuaWYgKEF1ZGlvQ29udGV4dCkge1xuICBhdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XG5cbiAgaWYgKC8oaVBob25lfGlQYWQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiBhdWRpb0NvbnRleHQuc2FtcGxlUmF0ZSA8IDQ0MTAwKSB7XG4gICAgdmFyIGJ1ZmZlciA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXIoMSwgMSwgNDQxMDApO1xuICAgIHZhciBkdW1teSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICBkdW1teS5idWZmZXIgPSBidWZmZXI7XG4gICAgZHVtbXkuY29ubmVjdChhdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xuICAgIGR1bW15LnN0YXJ0KDApO1xuICAgIGR1bW15LmRpc2Nvbm5lY3QoKTtcbiAgfVxufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBhdWRpb0NvbnRleHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GMVpHbHZMV052Ym5SbGVIUXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN08wRkJRMEVzU1VGQlNTeGxRVUZsTEVsQlFXWTdPMEZCUlVvc1NVRkJTU3hsUVVGbExFOUJRVThzV1VGQlVDeEpRVUYxUWl4UFFVRlBMR3RDUVVGUU96dEJRVVV4UXl4SlFVRkhMRmxCUVVnc1JVRkJhVUk3UVVGRFppeHBRa0ZCWlN4SlFVRkpMRmxCUVVvc1JVRkJaaXhEUVVSbE96dEJRVWRtTEUxQlFVa3NhVUpCUVdsQ0xFbEJRV3BDTEVOQlFYTkNMRlZCUVZVc1UwRkJWaXhEUVVGMFFpeEpRVUU0UXl4aFFVRmhMRlZCUVdJc1IwRkJNRUlzUzBGQk1VSXNSVUZCYVVNN1FVRkRha1lzVVVGQlNTeFRRVUZUTEdGQlFXRXNXVUZCWWl4RFFVRXdRaXhEUVVFeFFpeEZRVUUyUWl4RFFVRTNRaXhGUVVGblF5eExRVUZvUXl4RFFVRlVMRU5CUkRaRk8wRkJSV3BHTEZGQlFVa3NVVUZCVVN4aFFVRmhMR3RDUVVGaUxFVkJRVklzUTBGR05rVTdRVUZIYWtZc1ZVRkJUU3hOUVVGT0xFZEJRV1VzVFVGQlppeERRVWhwUmp0QlFVbHFSaXhWUVVGTkxFOUJRVTRzUTBGQll5eGhRVUZoTEZkQlFXSXNRMEZCWkN4RFFVcHBSanRCUVV0cVJpeFZRVUZOTEV0QlFVNHNRMEZCV1N4RFFVRmFMRVZCVEdsR08wRkJUV3BHTEZWQlFVMHNWVUZCVGl4SFFVNXBSanRIUVVGdVJqdERRVWhHT3p0clFrRmhaU0lzSW1acGJHVWlPaUpoZFdScGJ5MWpiMjUwWlhoMExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z1pYaHdiM05sY3lCaElITnBibWRzWlNCcGJuTjBZVzVqWlZ4dWRtRnlJR0YxWkdsdlEyOXVkR1Y0ZENBOUlHNTFiR3c3WEc1Y2JuWmhjaUJCZFdScGIwTnZiblJsZUhRZ1BTQjNhVzVrYjNjdVFYVmthVzlEYjI1MFpYaDBJSHg4SUhkcGJtUnZkeTUzWldKcmFYUkJkV1JwYjBOdmJuUmxlSFE3WEc1Y2JtbG1LRUYxWkdsdlEyOXVkR1Y0ZENrZ2UxeHVJQ0JoZFdScGIwTnZiblJsZUhRZ1BTQnVaWGNnUVhWa2FXOURiMjUwWlhoMEtDazdYRzVjYmlBZ2FXWWdLQzhvYVZCb2IyNWxmR2xRWVdRcEwya3VkR1Z6ZENodVlYWnBaMkYwYjNJdWRYTmxja0ZuWlc1MEtTQW1KaUJoZFdScGIwTnZiblJsZUhRdWMyRnRjR3hsVW1GMFpTQThJRFEwTVRBd0tTQjdYRzRnSUNBZ2RtRnlJR0oxWm1abGNpQTlJR0YxWkdsdlEyOXVkR1Y0ZEM1amNtVmhkR1ZDZFdabVpYSW9NU3dnTVN3Z05EUXhNREFwTzF4dUlDQWdJSFpoY2lCa2RXMXRlU0E5SUdGMVpHbHZRMjl1ZEdWNGRDNWpjbVZoZEdWQ2RXWm1aWEpUYjNWeVkyVW9LVHRjYmlBZ0lDQmtkVzF0ZVM1aWRXWm1aWElnUFNCaWRXWm1aWEk3WEc0Z0lDQWdaSFZ0YlhrdVkyOXVibVZqZENoaGRXUnBiME52Ym5SbGVIUXVaR1Z6ZEdsdVlYUnBiMjRwTzF4dUlDQWdJR1IxYlcxNUxuTjBZWEowS0RBcE8xeHVJQ0FnSUdSMWJXMTVMbVJwYzJOdmJtNWxZM1FvS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCaGRXUnBiME52Ym5SbGVIUTdYRzRpWFgwPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93YXZlcy1hdWRpby9kaXN0L2NvcmUvYXVkaW8tY29udGV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

eval("module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcz85MzVkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @class TimeEngine\n */\n\nvar TimeEngine = function () {\n  function TimeEngine() {\n    (0, _classCallCheck3.default)(this, TimeEngine);\n\n    this.master = null;\n    this.outputNode = null;\n  }\n\n  (0, _createClass3.default)(TimeEngine, [{\n    key: \"resetTime\",\n    value: function resetTime() {\n      var time = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n\n      if (this.master) this.master.resetEngineTime(this, time);\n    }\n\n    /**\n     * Transported interface\n     *   - syncPosition(time, position, speed), called to reposition TimeEngine, returns next position\n     *   - advancePosition(time, position, speed), called to generate next event at given time and position, returns next position\n     */\n\n  }, {\n    key: \"resetPosition\",\n    value: function resetPosition() {\n      var position = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];\n\n      if (this.master) this.master.resetEnginePosition(this, position);\n    }\n\n    /**\n     * Speed-controlled interface\n     *   - syncSpeed(time, position, speed, ), called to\n     */\n\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      if (this.master) return this.master.currentTime;\n\n      return undefined;\n    }\n  }, {\n    key: \"currentPosition\",\n    get: function get() {\n      var master = this.master;\n\n      if (master && master.currentPosition !== undefined) return master.currentPosition;\n\n      return undefined;\n    }\n\n    /**\n     * Scheduled interface\n     *   - advanceTime(time), called to generate next event at given time, returns next time\n     */\n\n  }], [{\n    key: \"implementsScheduled\",\n    value: function implementsScheduled(engine) {\n      return engine.advanceTime && engine.advanceTime instanceof Function;\n    }\n  }, {\n    key: \"implementsTransported\",\n    value: function implementsTransported(engine) {\n      return engine.syncPosition && engine.syncPosition instanceof Function && engine.advancePosition && engine.advancePosition instanceof Function;\n    }\n  }, {\n    key: \"implementsSpeedControlled\",\n    value: function implementsSpeedControlled(engine) {\n      return engine.syncSpeed && engine.syncSpeed instanceof Function;\n    }\n  }]);\n  return TimeEngine;\n}();\n\nexports.default = TimeEngine;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbWUtZW5naW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBR3FCO0FBQ25CLFdBRG1CLFVBQ25CLEdBQWM7d0NBREssWUFDTDs7QUFDWixTQUFLLE1BQUwsR0FBYyxJQUFkLENBRFk7QUFFWixTQUFLLFVBQUwsR0FBa0IsSUFBbEIsQ0FGWTtHQUFkOzs2QkFEbUI7O2dDQThCUztVQUFsQiw2REFBTyx5QkFBVzs7QUFDMUIsVUFBSSxLQUFLLE1BQUwsRUFDRixLQUFLLE1BQUwsQ0FBWSxlQUFaLENBQTRCLElBQTVCLEVBQWtDLElBQWxDLEVBREY7Ozs7Ozs7Ozs7O29DQWdCa0M7VUFBdEIsaUVBQVcseUJBQVc7O0FBQ2xDLFVBQUksS0FBSyxNQUFMLEVBQ0YsS0FBSyxNQUFMLENBQVksbUJBQVosQ0FBZ0MsSUFBaEMsRUFBc0MsUUFBdEMsRUFERjs7Ozs7Ozs7Ozt3QkExQ2dCO0FBQ2hCLFVBQUksS0FBSyxNQUFMLEVBQ0YsT0FBTyxLQUFLLE1BQUwsQ0FBWSxXQUFaLENBRFQ7O0FBR0EsYUFBTyxTQUFQLENBSmdCOzs7O3dCQU9JO0FBQ3BCLFVBQUksU0FBUyxLQUFLLE1BQUwsQ0FETzs7QUFHcEIsVUFBSSxVQUFVLE9BQU8sZUFBUCxLQUEyQixTQUEzQixFQUNaLE9BQU8sT0FBTyxlQUFQLENBRFQ7O0FBR0EsYUFBTyxTQUFQLENBTm9COzs7Ozs7Ozs7O3dDQWFLLFFBQVE7QUFDakMsYUFBUSxPQUFPLFdBQVAsSUFBc0IsT0FBTyxXQUFQLFlBQThCLFFBQTlCLENBREc7Ozs7MENBY04sUUFBUTtBQUNuQyxhQUNFLE9BQU8sWUFBUCxJQUF1QixPQUFPLFlBQVAsWUFBK0IsUUFBL0IsSUFDdkIsT0FBTyxlQUFQLElBQTBCLE9BQU8sZUFBUCxZQUFrQyxRQUFsQyxDQUhPOzs7OzhDQWdCSixRQUFRO0FBQ3ZDLGFBQVEsT0FBTyxTQUFQLElBQW9CLE9BQU8sU0FBUCxZQUE0QixRQUE1QixDQURXOzs7U0F4RHRCIiwiZmlsZSI6InRpbWUtZW5naW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAY2xhc3MgVGltZUVuZ2luZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lRW5naW5lIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tYXN0ZXIgPSBudWxsO1xuICAgIHRoaXMub3V0cHV0Tm9kZSA9IG51bGw7XG4gIH1cblxuICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgaWYgKHRoaXMubWFzdGVyKVxuICAgICAgcmV0dXJuIHRoaXMubWFzdGVyLmN1cnJlbnRUaW1lO1xuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldCBjdXJyZW50UG9zaXRpb24oKSB7XG4gICAgdmFyIG1hc3RlciA9IHRoaXMubWFzdGVyO1xuXG4gICAgaWYgKG1hc3RlciAmJiBtYXN0ZXIuY3VycmVudFBvc2l0aW9uICE9PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gbWFzdGVyLmN1cnJlbnRQb3NpdGlvbjtcblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogU2NoZWR1bGVkIGludGVyZmFjZVxuICAgKiAgIC0gYWR2YW5jZVRpbWUodGltZSksIGNhbGxlZCB0byBnZW5lcmF0ZSBuZXh0IGV2ZW50IGF0IGdpdmVuIHRpbWUsIHJldHVybnMgbmV4dCB0aW1lXG4gICAqL1xuICBzdGF0aWMgaW1wbGVtZW50c1NjaGVkdWxlZChlbmdpbmUpIHtcbiAgICByZXR1cm4gKGVuZ2luZS5hZHZhbmNlVGltZSAmJiBlbmdpbmUuYWR2YW5jZVRpbWUgaW5zdGFuY2VvZiBGdW5jdGlvbik7XG4gIH1cblxuICByZXNldFRpbWUodGltZSA9IHVuZGVmaW5lZCkge1xuICAgIGlmICh0aGlzLm1hc3RlcilcbiAgICAgIHRoaXMubWFzdGVyLnJlc2V0RW5naW5lVGltZSh0aGlzLCB0aW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc3BvcnRlZCBpbnRlcmZhY2VcbiAgICogICAtIHN5bmNQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpLCBjYWxsZWQgdG8gcmVwb3NpdGlvbiBUaW1lRW5naW5lLCByZXR1cm5zIG5leHQgcG9zaXRpb25cbiAgICogICAtIGFkdmFuY2VQb3NpdGlvbih0aW1lLCBwb3NpdGlvbiwgc3BlZWQpLCBjYWxsZWQgdG8gZ2VuZXJhdGUgbmV4dCBldmVudCBhdCBnaXZlbiB0aW1lIGFuZCBwb3NpdGlvbiwgcmV0dXJucyBuZXh0IHBvc2l0aW9uXG4gICAqL1xuICBzdGF0aWMgaW1wbGVtZW50c1RyYW5zcG9ydGVkKGVuZ2luZSkge1xuICAgIHJldHVybiAoXG4gICAgICBlbmdpbmUuc3luY1Bvc2l0aW9uICYmIGVuZ2luZS5zeW5jUG9zaXRpb24gaW5zdGFuY2VvZiBGdW5jdGlvbiAmJlxuICAgICAgZW5naW5lLmFkdmFuY2VQb3NpdGlvbiAmJiBlbmdpbmUuYWR2YW5jZVBvc2l0aW9uIGluc3RhbmNlb2YgRnVuY3Rpb25cbiAgICApO1xuICB9XG5cbiAgcmVzZXRQb3NpdGlvbihwb3NpdGlvbiA9IHVuZGVmaW5lZCkge1xuICAgIGlmICh0aGlzLm1hc3RlcilcbiAgICAgIHRoaXMubWFzdGVyLnJlc2V0RW5naW5lUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwZWVkLWNvbnRyb2xsZWQgaW50ZXJmYWNlXG4gICAqICAgLSBzeW5jU3BlZWQodGltZSwgcG9zaXRpb24sIHNwZWVkLCApLCBjYWxsZWQgdG9cbiAgICovXG4gIHN0YXRpYyBpbXBsZW1lbnRzU3BlZWRDb250cm9sbGVkKGVuZ2luZSkge1xuICAgIHJldHVybiAoZW5naW5lLnN5bmNTcGVlZCAmJiBlbmdpbmUuc3luY1NwZWVkIGluc3RhbmNlb2YgRnVuY3Rpb24pO1xuICB9XG59XG4iXX0=//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

eval("// optional / simple context binding\nvar aFunction = __webpack_require__(96);\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanM/Y2UwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

eval("module.exports = {};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanM/YWZmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("var META     = __webpack_require__(32)('meta')\n  , isObject = __webpack_require__(11)\n  , has      = __webpack_require__(13)\n  , setDesc  = __webpack_require__(7).f\n  , id       = 0;\nvar isExtensible = Object.isExtensible || function(){\n  return true;\n};\nvar FREEZE = !__webpack_require__(17)(function(){\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function(it){\n  setDesc(it, META, {value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  }});\n};\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add metadata\n    if(!create)return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function(it, create){\n  if(!has(it, META)){\n    // can't set metadata to uncaught frozen object\n    if(!isExtensible(it))return true;\n    // not necessary to add metadata\n    if(!create)return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function(it){\n  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY:      META,\n  NEED:     false,\n  fastKey:  fastKey,\n  getWeak:  getWeak,\n  onFreeze: onFreeze\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzPzU1M2QiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIE1FVEEgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKVxuICAsIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgc2V0RGVzYyAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaWQgICAgICAgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpe1xuICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9fSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZighaXNPYmplY3QoaXQpKXJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKXNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiAgICAgIE1FVEEsXG4gIE5FRUQ6ICAgICBmYWxzZSxcbiAgZmFzdEtleTogIGZhc3RLZXksXG4gIGdldFdlYWs6ICBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = __webpack_require__(70)\n  , enumBugKeys = __webpack_require__(38);\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcz9mNWJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(9);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _timeEngine = __webpack_require__(18);\n\nvar _timeEngine2 = _interopRequireDefault(_timeEngine);\n\nvar _audioContext = __webpack_require__(16);\n\nvar _audioContext2 = _interopRequireDefault(_audioContext);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @class AudioTimeEngine\n */\n\nvar AudioTimeEngine = function (_TimeEngine) {\n  (0, _inherits3.default)(AudioTimeEngine, _TimeEngine);\n\n  function AudioTimeEngine() {\n    var audioContext = arguments.length <= 0 || arguments[0] === undefined ? _audioContext2.default : arguments[0];\n    (0, _classCallCheck3.default)(this, AudioTimeEngine);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(AudioTimeEngine).call(this));\n\n    _this.audioContext = audioContext;\n    _this.outputNode = null;\n    return _this;\n  }\n\n  (0, _createClass3.default)(AudioTimeEngine, [{\n    key: 'connect',\n    value: function connect(target) {\n      this.outputNode.connect(target);\n      return this;\n    }\n  }, {\n    key: 'disconnect',\n    value: function disconnect(connection) {\n      this.outputNode.disconnect(connection);\n      return this;\n    }\n  }]);\n  return AudioTimeEngine;\n}(_timeEngine2.default);\n\nexports.default = AudioTimeEngine;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1ZGlvLXRpbWUtZW5naW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7Ozs7OztJQUtxQjs7O0FBQ25CLFdBRG1CLGVBQ25CLEdBQWdEO1FBQXBDLDJHQUFvQzt3Q0FEN0IsaUJBQzZCOzs2RkFEN0IsNkJBQzZCOztBQUc5QyxVQUFLLFlBQUwsR0FBb0IsWUFBcEIsQ0FIOEM7QUFJOUMsVUFBSyxVQUFMLEdBQWtCLElBQWxCLENBSjhDOztHQUFoRDs7NkJBRG1COzs0QkFRWCxRQUFRO0FBQ2QsV0FBSyxVQUFMLENBQWdCLE9BQWhCLENBQXdCLE1BQXhCLEVBRGM7QUFFZCxhQUFPLElBQVAsQ0FGYzs7OzsrQkFLTCxZQUFZO0FBQ3JCLFdBQUssVUFBTCxDQUFnQixVQUFoQixDQUEyQixVQUEzQixFQURxQjtBQUVyQixhQUFPLElBQVAsQ0FGcUI7OztTQWJKIiwiZmlsZSI6ImF1ZGlvLXRpbWUtZW5naW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRpbWVFbmdpbmUgZnJvbSAnLi90aW1lLWVuZ2luZSc7XG5pbXBvcnQgZGVmYXVsdEF1ZGlvQ29udGV4dCBmcm9tICcuL2F1ZGlvLWNvbnRleHQnO1xuXG4vKipcbiAqIEBjbGFzcyBBdWRpb1RpbWVFbmdpbmVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXVkaW9UaW1lRW5naW5lIGV4dGVuZHMgVGltZUVuZ2luZXtcbiAgY29uc3RydWN0b3IoYXVkaW9Db250ZXh0ID0gZGVmYXVsdEF1ZGlvQ29udGV4dCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmF1ZGlvQ29udGV4dCA9IGF1ZGlvQ29udGV4dDtcbiAgICB0aGlzLm91dHB1dE5vZGUgPSBudWxsO1xuICB9XG5cbiAgY29ubmVjdCh0YXJnZXQpIHtcbiAgICB0aGlzLm91dHB1dE5vZGUuY29ubmVjdCh0YXJnZXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGlzY29ubmVjdChjb25uZWN0aW9uKSB7XG4gICAgdGhpcy5vdXRwdXROb2RlLmRpc2Nvbm5lY3QoY29ubmVjdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dhdmVzLWF1ZGlvL2Rpc3QvY29yZS9hdWRpby10aW1lLWVuZ2luZS5qcz8yMzExIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfdGltZUVuZ2luZSA9IHJlcXVpcmUoJy4vdGltZS1lbmdpbmUnKTtcblxudmFyIF90aW1lRW5naW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RpbWVFbmdpbmUpO1xuXG52YXIgX2F1ZGlvQ29udGV4dCA9IHJlcXVpcmUoJy4vYXVkaW8tY29udGV4dCcpO1xuXG52YXIgX2F1ZGlvQ29udGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdWRpb0NvbnRleHQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBjbGFzcyBBdWRpb1RpbWVFbmdpbmVcbiAqL1xuXG52YXIgQXVkaW9UaW1lRW5naW5lID0gZnVuY3Rpb24gKF9UaW1lRW5naW5lKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEF1ZGlvVGltZUVuZ2luZSwgX1RpbWVFbmdpbmUpO1xuXG4gIGZ1bmN0aW9uIEF1ZGlvVGltZUVuZ2luZSgpIHtcbiAgICB2YXIgYXVkaW9Db250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gX2F1ZGlvQ29udGV4dDIuZGVmYXVsdCA6IGFyZ3VtZW50c1swXTtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBBdWRpb1RpbWVFbmdpbmUpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShBdWRpb1RpbWVFbmdpbmUpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuYXVkaW9Db250ZXh0ID0gYXVkaW9Db250ZXh0O1xuICAgIF90aGlzLm91dHB1dE5vZGUgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEF1ZGlvVGltZUVuZ2luZSwgW3tcbiAgICBrZXk6ICdjb25uZWN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdCh0YXJnZXQpIHtcbiAgICAgIHRoaXMub3V0cHV0Tm9kZS5jb25uZWN0KHRhcmdldCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNjb25uZWN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY29ubmVjdChjb25uZWN0aW9uKSB7XG4gICAgICB0aGlzLm91dHB1dE5vZGUuZGlzY29ubmVjdChjb25uZWN0aW9uKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQXVkaW9UaW1lRW5naW5lO1xufShfdGltZUVuZ2luZTIuZGVmYXVsdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEF1ZGlvVGltZUVuZ2luZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUYxWkdsdkxYUnBiV1V0Wlc1bmFXNWxMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCUVVFN096czdRVUZEUVRzN096czdPenM3T3p0SlFVdHhRanM3TzBGQlEyNUNMRmRCUkcxQ0xHVkJRMjVDTEVkQlFXZEVPMUZCUVhCRExESkhRVUZ2UXp0M1EwRkVOMElzYVVKQlF6WkNPenMyUmtGRU4wSXNOa0pCUXpaQ096dEJRVWM1UXl4VlFVRkxMRmxCUVV3c1IwRkJiMElzV1VGQmNFSXNRMEZJT0VNN1FVRkpPVU1zVlVGQlN5eFZRVUZNTEVkQlFXdENMRWxCUVd4Q0xFTkJTamhET3p0SFFVRm9SRHM3TmtKQlJHMUNPenMwUWtGUldDeFJRVUZSTzBGQlEyUXNWMEZCU3l4VlFVRk1MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRTFCUVhoQ0xFVkJSR003UVVGRlpDeGhRVUZQTEVsQlFWQXNRMEZHWXpzN096c3JRa0ZMVEN4WlFVRlpPMEZCUTNKQ0xGZEJRVXNzVlVGQlRDeERRVUZuUWl4VlFVRm9RaXhEUVVFeVFpeFZRVUV6UWl4RlFVUnhRanRCUVVWeVFpeGhRVUZQTEVsQlFWQXNRMEZHY1VJN096dFRRV0pLSWl3aVptbHNaU0k2SW1GMVpHbHZMWFJwYldVdFpXNW5hVzVsTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElGUnBiV1ZGYm1kcGJtVWdabkp2YlNBbkxpOTBhVzFsTFdWdVoybHVaU2M3WEc1cGJYQnZjblFnWkdWbVlYVnNkRUYxWkdsdlEyOXVkR1Y0ZENCbWNtOXRJQ2N1TDJGMVpHbHZMV052Ym5SbGVIUW5PMXh1WEc0dktpcGNiaUFxSUVCamJHRnpjeUJCZFdScGIxUnBiV1ZGYm1kcGJtVmNiaUFxTDF4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdRWFZrYVc5VWFXMWxSVzVuYVc1bElHVjRkR1Z1WkhNZ1ZHbHRaVVZ1WjJsdVpYdGNiaUFnWTI5dWMzUnlkV04wYjNJb1lYVmthVzlEYjI1MFpYaDBJRDBnWkdWbVlYVnNkRUYxWkdsdlEyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2s3WEc1Y2JpQWdJQ0IwYUdsekxtRjFaR2x2UTI5dWRHVjRkQ0E5SUdGMVpHbHZRMjl1ZEdWNGREdGNiaUFnSUNCMGFHbHpMbTkxZEhCMWRFNXZaR1VnUFNCdWRXeHNPMXh1SUNCOVhHNWNiaUFnWTI5dWJtVmpkQ2gwWVhKblpYUXBJSHRjYmlBZ0lDQjBhR2x6TG05MWRIQjFkRTV2WkdVdVkyOXVibVZqZENoMFlYSm5aWFFwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ1pHbHpZMjl1Ym1WamRDaGpiMjV1WldOMGFXOXVLU0I3WEc0Z0lDQWdkR2hwY3k1dmRYUndkWFJPYjJSbExtUnBjMk52Ym01bFkzUW9ZMjl1Ym1WamRHbHZiaWs3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMWNibjFjYmlKZGZRPT1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd2F2ZXMtYXVkaW8vZGlzdC9jb3JlL2F1ZGlvLXRpbWUtZW5naW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n      return (root['WaveSurfer'] = factory());\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['WaveSurfer'] = factory();\n  }\n}(this, function () {\n\n'use strict';\n\nvar WaveSurfer = {\n    defaultParams: {\n        audioContext  : null,\n        audioRate     : 1,\n        autoCenter    : true,\n        backend       : 'WebAudio',\n        barHeight     : 1,\n        closeAudioContext: false,\n        container     : null,\n        cursorColor   : '#333',\n        cursorWidth   : 1,\n        dragSelection : true,\n        fillParent    : true,\n        forceDecode   : false,\n        height        : 128,\n        hideScrollbar : false,\n        interact      : true,\n        loopSelection : true,\n        mediaContainer: null,\n        mediaControls : false,\n        mediaType     : 'audio',\n        minPxPerSec   : 20,\n        partialRender : false,\n        pixelRatio    : window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        progressColor : '#555',\n        normalize     : false,\n        renderer      : 'MultiCanvas',\n        scrollParent  : false,\n        skipLength    : 2,\n        splitChannels : false,\n        waveColor     : '#999',\n    },\n\n    init: function (params) {\n        // Extract relevant parameters (or defaults)\n        this.params = WaveSurfer.util.extend({}, this.defaultParams, params);\n\n        this.container = 'string' == typeof params.container ?\n            document.querySelector(this.params.container) :\n            this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            this.mediaContainer = document.querySelector(this.params.mediaContainer);\n        } else {\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        // Used to save the current volume when muting so we can\n        // restore once unmuted\n        this.savedVolume = 0;\n\n        // The current muted state\n        this.isMuted = false;\n\n        // Will hold a list of event descriptors that need to be\n        // cancelled on subsequent loads of audio\n        this.tmpEvents = [];\n\n        // Holds any running audio downloads\n        this.currentAjax = null;\n\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n\n        this.isDestroyed = false;\n    },\n\n    createDrawer: function () {\n        var my = this;\n\n        this.drawer = Object.create(WaveSurfer.Drawer[this.params.renderer]);\n        this.drawer.init(this.container, this.params);\n\n        this.drawer.on('redraw', function () {\n            my.drawBuffer();\n            my.drawer.progress(my.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', function (e, progress) {\n            setTimeout(function () {\n                my.seekTo(progress);\n            }, 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', function (e) {\n            if (my.params.partialRender) {\n                my.drawBuffer();\n            }\n            my.fireEvent('scroll', e);\n        });\n    },\n\n    createBackend: function () {\n        var my = this;\n\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (this.params.backend == 'WebAudio' && !WaveSurfer.WebAudio.supportsWebAudio()) {\n            this.params.backend = 'MediaElement';\n        }\n\n        this.backend = Object.create(WaveSurfer[this.params.backend]);\n        this.backend.init(this.params);\n\n        this.backend.on('finish', function () { my.fireEvent('finish'); });\n        this.backend.on('play', function () { my.fireEvent('play'); });\n        this.backend.on('pause', function () { my.fireEvent('pause'); });\n\n        this.backend.on('audioprocess', function (time) {\n            my.drawer.progress(my.backend.getPlayedPercents());\n            my.fireEvent('audioprocess', time);\n        });\n    },\n\n    createPeakCache: function() {\n        if (this.params.partialRender) {\n            this.peakCache = Object.create(WaveSurfer.PeakCache);\n            this.peakCache.init();\n        }\n    },\n\n    getDuration: function () {\n        return this.backend.getDuration();\n    },\n\n    getCurrentTime: function () {\n        return this.backend.getCurrentTime();\n    },\n\n    play: function (start, end) {\n        this.fireEvent('interaction', this.play.bind(this, start, end));\n        this.backend.play(start, end);\n    },\n\n    pause: function () {\n        this.backend.isPaused() || this.backend.pause();\n    },\n\n    playPause: function () {\n        this.backend.isPaused() ? this.play() : this.pause();\n    },\n\n    isPlaying: function () {\n        return !this.backend.isPaused();\n    },\n\n    skipBackward: function (seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    },\n\n    skipForward: function (seconds) {\n        this.skip(seconds || this.params.skipLength);\n    },\n\n    skip: function (offset) {\n        var position = this.getCurrentTime() || 0;\n        var duration = this.getDuration() || 1;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    },\n\n    seekAndCenter: function (progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    },\n\n    seekTo: function (progress) {\n        this.fireEvent('interaction', this.seekTo.bind(this, progress));\n\n        var paused = this.backend.isPaused();\n        // avoid draw wrong position while playing backward seeking\n        if (!paused) {\n            this.backend.pause();\n        }\n        // avoid small scrolls while paused seeking\n        var oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        if (!paused) {\n            this.backend.play();\n        }\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    },\n\n    stop: function () {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    },\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {Number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    setVolume: function (newVolume) {\n        this.backend.setVolume(newVolume);\n    },\n\n    /**\n     * Get the playback volume.\n     */\n    getVolume: function () {\n        return this.backend.getVolume();\n    },\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {Number} rate A positive number. E.g. 0.5 means half the\n     * normal speed, 2 means double speed and so on.\n     */\n    setPlaybackRate: function (rate) {\n        this.backend.setPlaybackRate(rate);\n    },\n\n    /**\n     * Get the playback rate.\n     */\n    getPlaybackRate: function () {\n        return this.backend.getPlaybackRate();\n    },\n\n    /**\n     * Toggle the volume on and off. It not currenly muted it will\n     * save the current volume value and turn the volume off.\n     * If currently muted then it will restore the volume to the saved\n     * value, and then rest the saved value.\n     */\n    toggleMute: function () {\n        this.setMute(!this.isMuted);\n    },\n\n    setMute: function (mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            return;\n        }\n\n        if (mute) {\n            // If currently not muted then save current volume,\n            // turn off the volume and update the mute properties\n            this.savedVolume = this.backend.getVolume();\n            this.backend.setVolume(0);\n            this.isMuted = true;\n        } else {\n            // If currently muted then restore to the saved volume\n            // and update the mute properties\n            this.backend.setVolume(this.savedVolume);\n            this.isMuted = false;\n        }\n    },\n\n    /**\n     * Get the current mute status.\n     */\n    getMute: function () {\n        return this.isMuted;\n    },\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     */\n    getFilters: function() {\n        return this.backend.filters || [];\n    },\n\n    toggleScroll: function () {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    },\n\n    toggleInteraction: function () {\n        this.params.interact = !this.params.interact;\n    },\n\n    drawBuffer: function () {\n        var nominalWidth = Math.round(\n            this.getDuration() * this.params.minPxPerSec * this.params.pixelRatio\n        );\n        var parentWidth = this.drawer.getWidth();\n        var width = nominalWidth;\n        var start = this.drawer.getScrollX();\n        var end = Math.min(start + parentWidth, width);\n\n        // Fill container\n        if (this.params.fillParent && (!this.params.scrollParent || nominalWidth < parentWidth)) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        if (this.params.partialRender) {\n            var newRanges = this.peakCache.addRangeToPeakCache(width, start, end);\n            for (var i = 0; i < newRanges.length; i++) {\n              var peaks = this.backend.getPeaks(width, newRanges[i][0], newRanges[i][1]);\n              this.drawer.drawPeaks(peaks, width, newRanges[i][0], newRanges[i][1]);\n            }\n        } else {\n            start = 0;\n            end = width;\n            var peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    },\n\n    zoom: function (pxPerSec) {\n        this.params.minPxPerSec = pxPerSec;\n\n        this.params.scrollParent = true;\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(\n            this.getCurrentTime() / this.getDuration()\n        );\n        this.fireEvent('zoom', pxPerSec);\n    },\n\n    /**\n     * Internal method.\n     */\n    loadArrayBuffer: function (arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, function (data) {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        }.bind(this));\n    },\n\n    /**\n     * Directly load an externally decoded AudioBuffer.\n     */\n    loadDecodedBuffer: function (buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.fireEvent('ready');\n    },\n\n    /**\n     * Loads audio data from a Blob or File object.\n     *\n     * @param {Blob|File} blob Audio data.\n     */\n    loadBlob: function (blob) {\n        var my = this;\n        // Create file reader\n        var reader = new FileReader();\n        reader.addEventListener('progress', function (e) {\n            my.onProgress(e);\n        });\n        reader.addEventListener('load', function (e) {\n            my.loadArrayBuffer(e.target.result);\n        });\n        reader.addEventListener('error', function () {\n            my.fireEvent('error', 'Error reading file');\n        });\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    },\n\n    /**\n     * Loads audio and re-renders the waveform.\n     */\n    load: function (url, peaks, preload) {\n        this.empty();\n\n        switch (this.params.backend) {\n            case 'WebAudio': return this.loadBuffer(url, peaks);\n            case 'MediaElement': return this.loadMediaElement(url, peaks, preload);\n        }\n    },\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     */\n    loadBuffer: function (url, peaks) {\n        var load = (function (action) {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, this.loadArrayBuffer.bind(this));\n        }).bind(this);\n\n        if (peaks) {\n            this.backend.setPeaks(peaks);\n            this.drawBuffer();\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    },\n\n    /**\n     *  Either create a media element, or load\n     *  an existing media element.\n     *  @param  {String|HTMLElement} urlOrElt Either a path to a media file,\n     *                                          or an existing HTML5 Audio/Video\n     *                                          Element\n     *  @param  {Array}            [peaks]     Array of peaks. Required to bypass\n     *                                          web audio dependency\n     */\n    loadMediaElement: function (urlOrElt, peaks, preload) {\n        var url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            var elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', (function () {\n                this.drawBuffer();\n                this.fireEvent('ready');\n            }).bind(this)),\n\n            this.backend.once('error', (function (err) {\n                this.fireEvent('error', err);\n            }).bind(this))\n        );\n\n        // If no pre-decoded peaks provided or pre-decoded peaks are\n        // provided with forceDecode flag, attempt to download the\n        // audio file and decode it with Web Audio.\n        if (peaks) { this.backend.setPeaks(peaks); }\n\n        if ((!peaks || this.params.forceDecode) && this.backend.supportsWebAudio()) {\n            this.getArrayBuffer(url, (function (arraybuffer) {\n                this.decodeArrayBuffer(arraybuffer, (function (buffer) {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                }).bind(this));\n            }).bind(this));\n        }\n    },\n\n    decodeArrayBuffer: function (arraybuffer, callback) {\n        this.arraybuffer = arraybuffer;\n\n        this.backend.decodeArrayBuffer(\n            arraybuffer,\n            (function (data) {\n                // Only use the decoded data if we haven't been destroyed or another decode started in the meantime\n                if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                    callback(data);\n                    this.arraybuffer = null;\n                }\n            }).bind(this),\n            this.fireEvent.bind(this, 'error', 'Error decoding audiobuffer')\n        );\n    },\n\n    getArrayBuffer: function (url, callback) {\n        var my = this;\n\n        var ajax = WaveSurfer.util.ajax({\n            url: url,\n            responseType: 'arraybuffer'\n        });\n\n        this.currentAjax = ajax;\n\n        this.tmpEvents.push(\n            ajax.on('progress', function (e) {\n                my.onProgress(e);\n            }),\n            ajax.on('success', function (data, e) {\n                callback(data);\n                my.currentAjax = null;\n            }),\n            ajax.on('error', function (e) {\n                my.fireEvent('error', 'XHR error: ' + e.target.statusText);\n                my.currentAjax = null;\n            })\n        );\n\n        return ajax;\n    },\n\n    onProgress: function (e) {\n        if (e.lengthComputable) {\n            var percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    },\n\n    /**\n     * Exports PCM data into a JSON array and opens in a new window.\n     */\n    exportPCM: function (length, accuracy, noWindow) {\n        length = length || 1024;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        var peaks = this.backend.getPeaks(length, accuracy);\n        var arr = [].map.call(peaks, function (val) {\n            return Math.round(val * accuracy) / accuracy;\n        });\n        var json = JSON.stringify(arr);\n        if (!noWindow) {\n            window.open('data:application/json;charset=utf-8,' +\n                encodeURIComponent(json));\n        }\n        return json;\n    },\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is 'image/png'. Other supported types are\n     * 'image/jpeg' and 'image/webp'.\n     */\n    exportImage: function(format, quality) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n\n        return this.drawer.getImage(format, quality);\n    },\n\n    cancelAjax: function () {\n        if (this.currentAjax) {\n            this.currentAjax.xhr.abort();\n            this.currentAjax = null;\n        }\n    },\n\n    clearTmpEvents: function () {\n        this.tmpEvents.forEach(function (e) { e.un(); });\n    },\n\n    /**\n     * Display empty waveform.\n     */\n    empty: function () {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    },\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     */\n    destroy: function () {\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        this.backend.destroy();\n        this.drawer.destroy();\n        this.isDestroyed = true;\n    }\n};\n\nWaveSurfer.create = function (params) {\n    var wavesurfer = Object.create(WaveSurfer);\n    wavesurfer.init(params);\n    return wavesurfer;\n};\n\nWaveSurfer.util = {\n    extend: function (dest) {\n        var sources = Array.prototype.slice.call(arguments, 1);\n        sources.forEach(function (source) {\n            Object.keys(source).forEach(function (key) {\n                dest[key] = source[key];\n            });\n        });\n        return dest;\n    },\n\n    debounce: function (func, wait, immediate) {\n        var args, context, timeout;\n        var later = function() {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        return function() {\n            context = this;\n            args = arguments;\n            var callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (!timeout) {\n                timeout = setTimeout(later, wait);\n            }\n            if (callNow) {\n                func.apply(context, args);\n            }\n        };\n    },\n\n    min: function (values) {\n        var min = +Infinity;\n        for (var i in values) {\n            if (values[i] < min) {\n                min = values[i];\n            }\n        }\n\n        return min;\n    },\n\n    max: function (values) {\n        var max = -Infinity;\n        for (var i in values) {\n            if (values[i] > max) {\n                max = values[i];\n            }\n        }\n\n        return max;\n    },\n\n    getId: function () {\n        return 'wavesurfer_' + Math.random().toString(32).substring(2);\n    },\n\n    ajax: function (options) {\n        var ajax = Object.create(WaveSurfer.Observer);\n        var xhr = new XMLHttpRequest();\n        var fired100 = false;\n\n        xhr.open(options.method || 'GET', options.url, true);\n        xhr.responseType = options.responseType || 'json';\n\n        xhr.addEventListener('progress', function (e) {\n            ajax.fireEvent('progress', e);\n            if (e.lengthComputable && e.loaded == e.total) {\n                fired100 = true;\n            }\n        });\n\n        xhr.addEventListener('load', function (e) {\n            if (!fired100) {\n                ajax.fireEvent('progress', e);\n            }\n            ajax.fireEvent('load', e);\n\n            if (200 == xhr.status || 206 == xhr.status) {\n                ajax.fireEvent('success', xhr.response, e);\n            } else {\n                ajax.fireEvent('error', e);\n            }\n        });\n\n        xhr.addEventListener('error', function (e) {\n            ajax.fireEvent('error', e);\n        });\n\n        xhr.send();\n        ajax.xhr = xhr;\n        return ajax;\n    }\n};\n\n/* Observer */\nWaveSurfer.Observer = {\n    /**\n     * Attach a handler function for an event.\n     */\n    on: function (event, fn) {\n        if (!this.handlers) { this.handlers = {}; }\n\n        var handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: this.un.bind(this, event, fn)\n        };\n    },\n\n    /**\n     * Remove an event handler.\n     */\n    un: function (event, fn) {\n        if (!this.handlers) { return; }\n\n        var handlers = this.handlers[event];\n        if (handlers) {\n            if (fn) {\n                for (var i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    },\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll: function () {\n        this.handlers = null;\n    },\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     */\n    once: function (event, handler) {\n        var my = this;\n        var fn = function () {\n            handler.apply(this, arguments);\n            setTimeout(function () {\n                my.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    },\n\n    fireEvent: function (event) {\n        if (!this.handlers) { return; }\n        var handlers = this.handlers[event];\n        var args = Array.prototype.slice.call(arguments, 1);\n        handlers && handlers.forEach(function (fn) {\n            fn.apply(null, args);\n        });\n    }\n};\n\n/* Make the main WaveSurfer object an observer */\nWaveSurfer.util.extend(WaveSurfer, WaveSurfer.Observer);\n\n'use strict';\n\nWaveSurfer.WebAudio = {\n    scriptBufferSize: 256,\n    PLAYING_STATE: 0,\n    PAUSED_STATE: 1,\n    FINISHED_STATE: 2,\n\n    supportsWebAudio: function () {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    },\n\n    getAudioContext: function () {\n        if (!WaveSurfer.WebAudio.audioContext) {\n            WaveSurfer.WebAudio.audioContext = new (\n                window.AudioContext || window.webkitAudioContext\n            );\n        }\n        return WaveSurfer.WebAudio.audioContext;\n    },\n\n    getOfflineAudioContext: function (sampleRate) {\n        if (!WaveSurfer.WebAudio.offlineAudioContext) {\n            WaveSurfer.WebAudio.offlineAudioContext = new (\n                window.OfflineAudioContext || window.webkitOfflineAudioContext\n            )(1, 2, sampleRate);\n        }\n        return WaveSurfer.WebAudio.offlineAudioContext;\n    },\n\n    init: function (params) {\n        this.params = params;\n        this.ac = params.audioContext || this.getAudioContext();\n\n        this.lastPlay = this.ac.currentTime;\n        this.startPosition = 0;\n        this.scheduledPause = null;\n\n        this.states = [\n            Object.create(WaveSurfer.WebAudio.state.playing),\n            Object.create(WaveSurfer.WebAudio.state.paused),\n            Object.create(WaveSurfer.WebAudio.state.finished)\n        ];\n\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(this.PAUSED_STATE);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    },\n\n    disconnectFilters: function () {\n        if (this.filters) {\n            this.filters.forEach(function (filter) {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    },\n\n    setState: function (state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    },\n\n    // Unpacked filters\n    setFilter: function () {\n        this.setFilters([].slice.call(arguments));\n    },\n\n    /**\n     * @param {Array} filters Packed ilters array\n     */\n    setFilters: function (filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters.reduce(function (prev, curr) {\n                prev.connect(curr);\n                return curr;\n            }, this.analyser).connect(this.gainNode);\n        }\n\n    },\n\n    createScriptNode: function () {\n        if (this.ac.createScriptProcessor) {\n            this.scriptNode = this.ac.createScriptProcessor(this.scriptBufferSize);\n        } else {\n            this.scriptNode = this.ac.createJavaScriptNode(this.scriptBufferSize);\n        }\n\n        this.scriptNode.connect(this.ac.destination);\n    },\n\n    addOnAudioProcess: function () {\n        var my = this;\n\n        this.scriptNode.onaudioprocess = function () {\n            var time = my.getCurrentTime();\n\n            if (time >= my.getDuration()) {\n                my.setState(my.FINISHED_STATE);\n                my.fireEvent('pause');\n            } else if (time >= my.scheduledPause) {\n                my.pause();\n            } else if (my.state === my.states[my.PLAYING_STATE]) {\n                my.fireEvent('audioprocess', time);\n            }\n        };\n    },\n\n    removeOnAudioProcess: function () {\n        this.scriptNode.onaudioprocess = null;\n    },\n\n    createAnalyserNode: function () {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    },\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     */\n    createVolumeNode: function () {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    },\n\n    /**\n     * Set the gain to a new value.\n     *\n     * @param {Number} newGain The new gain, a floating point value\n     * between 0 and 1. 0 being no gain and 1 being maximum gain.\n     */\n    setVolume: function (newGain) {\n        this.gainNode.gain.value = newGain;\n    },\n\n    /**\n     * Get the current gain.\n     *\n     * @returns {Number} The current gain, a floating point value\n     * between 0 and 1. 0 being no gain and 1 being maximum gain.\n     */\n    getVolume: function () {\n        return this.gainNode.gain.value;\n    },\n\n    decodeArrayBuffer: function (arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(this.ac ? this.ac.sampleRate : 44100);\n        }\n        this.offlineAc.decodeAudioData(arraybuffer, (function (data) {\n            callback(data);\n        }).bind(this), errback);\n    },\n\n    /**\n     * Set pre-decoded peaks.\n     */\n    setPeaks: function (peaks) {\n        this.peaks = peaks;\n    },\n\n    /**\n     * Set the rendered length (different from the length of the audio).\n     */\n    setLength: function (length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == ((2 * this.mergedPeaks.length - 1) + 2)) {\n          return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        var channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        for (var c = 0; c < channels; c++) {\n          this.splitPeaks[c] = [];\n          this.splitPeaks[c][2 * (length - 1)] = 0;\n          this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    },\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     * @param {Number} length How many subranges to break the waveform into.\n     * @param {Number} first First sample in the required range.\n     * @param {Number} last Last sample in the required range.\n     * @returns {Array} Array of 2*<length> peaks or array of arrays\n     * of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks: function (length, first, last) {\n        if (this.peaks) { return this.peaks; }\n\n        this.setLength(length);\n\n        var sampleSize = this.buffer.length / length;\n        var sampleStep = ~~(sampleSize / 10) || 1;\n        var channels = this.buffer.numberOfChannels;\n\n        for (var c = 0; c < channels; c++) {\n            var peaks = this.splitPeaks[c];\n            var chan = this.buffer.getChannelData(c);\n\n            for (var i = first; i <= last; i++) {\n                var start = ~~(i * sampleSize);\n                var end = ~~(start + sampleSize);\n                var min = 0;\n                var max = 0;\n\n                for (var j = start; j < end; j += sampleStep) {\n                    var value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    },\n\n    getPlayedPercents: function () {\n        return this.state.getPlayedPercents.call(this);\n    },\n\n    disconnectSource: function () {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    },\n\n    destroy: function () {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (typeof this.ac.close === 'function' && this.ac.state != 'closed') {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                WaveSurfer.WebAudio.audioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            WaveSurfer.WebAudio.offlineAudioContext = null;\n        }\n    },\n\n    load: function (buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    },\n\n    createSource: function () {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        //adjust for old browsers.\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.source.playbackRate.value = this.playbackRate;\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    },\n\n    isPaused: function () {\n        return this.state !== this.states[this.PLAYING_STATE];\n    },\n\n    getDuration: function () {\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    },\n\n    seekTo: function (start, end) {\n        if (!this.buffer) { return; }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[this.FINISHED_STATE]) {\n            this.setState(this.PAUSED_STATE);\n        }\n\n        return { start: start, end: end };\n    },\n\n    getPlayedTime: function () {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    },\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {Number} start Start offset in seconds,\n     * relative to the beginning of a clip.\n     * @param {Number} end When to stop\n     * relative to the beginning of a clip.\n     */\n    play: function (start, end) {\n        if (!this.buffer) { return; }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        var adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start, end - start);\n\n        if (this.ac.state == 'suspended') {\n          this.ac.resume && this.ac.resume();\n        }\n\n        this.setState(this.PLAYING_STATE);\n\n        this.fireEvent('play');\n    },\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause: function () {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        this.source && this.source.stop(0);\n\n        this.setState(this.PAUSED_STATE);\n\n        this.fireEvent('pause');\n    },\n\n    /**\n    *   Returns the current time in seconds relative to the audioclip's duration.\n    */\n    getCurrentTime: function () {\n        return this.state.getCurrentTime.call(this);\n    },\n\n    /**\n    *   Returns the current playback rate.\n    */\n    getPlaybackRate: function () {\n        return this.playbackRate;\n    },\n\n    /**\n     * Set the audio source playback rate.\n     */\n    setPlaybackRate: function (value) {\n        value = value || 1;\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            this.pause();\n            this.playbackRate = value;\n            this.play();\n        }\n    }\n};\n\nWaveSurfer.WebAudio.state = {};\n\nWaveSurfer.WebAudio.state.playing = {\n    init: function () {\n        this.addOnAudioProcess();\n    },\n    getPlayedPercents: function () {\n        var duration = this.getDuration();\n        return (this.getCurrentTime() / duration) || 0;\n    },\n    getCurrentTime: function () {\n        return this.startPosition + this.getPlayedTime();\n    }\n};\n\nWaveSurfer.WebAudio.state.paused = {\n    init: function () {\n        this.removeOnAudioProcess();\n    },\n    getPlayedPercents: function () {\n        var duration = this.getDuration();\n        return (this.getCurrentTime() / duration) || 0;\n    },\n    getCurrentTime: function () {\n        return this.startPosition;\n    }\n};\n\nWaveSurfer.WebAudio.state.finished = {\n    init: function () {\n        this.removeOnAudioProcess();\n        this.fireEvent('finish');\n    },\n    getPlayedPercents: function () {\n        return 1;\n    },\n    getCurrentTime: function () {\n        return this.getDuration();\n    }\n};\n\nWaveSurfer.util.extend(WaveSurfer.WebAudio, WaveSurfer.Observer);\n\n'use strict';\n\nWaveSurfer.MediaElement = Object.create(WaveSurfer.WebAudio);\n\nWaveSurfer.util.extend(WaveSurfer.MediaElement, {\n    init: function (params) {\n        this.params = params;\n\n        // Dummy media to catch errors\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play: function () {},\n            pause: function () {}\n        };\n\n        this.mediaType = params.mediaType.toLowerCase();\n        this.elementPosition = params.elementPosition;\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    },\n\n\n    /**\n     * Create a timer to provide a more precise `audioprocess' event.\n     */\n    createTimer: function () {\n        var my = this;\n        var playing = false;\n\n        var onAudioProcess = function () {\n            if (my.isPaused()) { return; }\n\n            my.fireEvent('audioprocess', my.getCurrentTime());\n\n            // Call again in the next frame\n            var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame;\n            requestAnimationFrame(onAudioProcess);\n        };\n\n        this.on('play', onAudioProcess);\n    },\n\n    /**\n     *  Create media element with url as its source,\n     *  and append to container element.\n     *  @param  {String}        url         path to media file\n     *  @param  {HTMLElement}   container   HTML element\n     *  @param  {Array}         peaks       array of peak data\n     *  @param  {String}        preload     HTML 5 preload attribute value\n     */\n    load: function (url, container, peaks, preload) {\n        var my = this;\n\n        var media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        var prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks);\n    },\n\n    /**\n     *  Load existing media element.\n     *  @param  {MediaElement}  elt     HTML5 Audio or Video element\n     *  @param  {Array}         peaks   array of peak data\n     */\n    loadElt: function (elt, peaks) {\n        var my = this;\n\n        var media = elt;\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n\n        this._load(media, peaks);\n    },\n\n    /**\n     *  Private method called by both load (from url)\n     *  and loadElt (existing media element).\n     *  @param  {MediaElement}  media     HTML5 Audio or Video element\n     *  @param  {Array}         peaks   array of peak data\n     *  @private\n     */\n    _load: function (media, peaks) {\n        var my = this;\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        if (typeof media.load == 'function') {\n            media.load();\n        }\n\n        media.addEventListener('error', function () {\n            my.fireEvent('error', 'Error loading media element');\n        });\n\n        media.addEventListener('canplay', function () {\n            my.fireEvent('canplay');\n        });\n\n        media.addEventListener('ended', function () {\n            my.fireEvent('finish');\n        });\n\n        this.media = media;\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.setPlaybackRate(this.playbackRate);\n    },\n\n    isPaused: function () {\n        return !this.media || this.media.paused;\n    },\n\n    getDuration: function () {\n        var duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) { // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    },\n\n    getCurrentTime: function () {\n        return this.media && this.media.currentTime;\n    },\n\n    getPlayedPercents: function () {\n        return (this.getCurrentTime() / this.getDuration()) || 0;\n    },\n\n    getPlaybackRate: function () {\n        return this.playbackRate || this.media.playbackRate;\n    },\n\n    /**\n     * Set the audio source playback rate.\n     */\n    setPlaybackRate: function (value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    },\n\n    seekTo: function (start) {\n        if (start != null) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    },\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {Number} start Start offset in seconds,\n     * relative to the beginning of a clip.\n     * @param {Number} end End offset in seconds,\n     * relative to the beginning of a clip.\n     */\n    play: function (start, end) {\n        this.seekTo(start);\n        this.media.play();\n        end && this.setPlayEnd(end);\n        this.fireEvent('play');\n    },\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause: function () {\n        this.media && this.media.pause();\n        this.clearPlayEnd();\n        this.fireEvent('pause');\n    },\n\n    setPlayEnd: function (end) {\n        var my = this;\n        this.onPlayEnd = function (time) {\n            if (time >= end) {\n                my.pause();\n                my.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this.onPlayEnd);\n    },\n\n    clearPlayEnd: function () {\n        if (this.onPlayEnd) {\n            this.un('audioprocess', this.onPlayEnd);\n            this.onPlayEnd = null;\n        }\n    },\n\n    getPeaks: function (length, start, end) {\n        if (this.buffer) {\n            return WaveSurfer.WebAudio.getPeaks.call(this, length, start, end);\n        }\n        return this.peaks || [];\n    },\n\n    getVolume: function () {\n        return this.media.volume;\n    },\n\n    setVolume: function (val) {\n        this.media.volume = val;\n    },\n\n    destroy: function () {\n        this.pause();\n        this.unAll();\n        this.media && this.media.parentNode && this.media.parentNode.removeChild(this.media);\n        this.media = null;\n    }\n});\n\n//For backwards compatibility\nWaveSurfer.AudioElement = WaveSurfer.MediaElement;\n\n'use strict';\n\nWaveSurfer.Drawer = {\n    init: function (container, params) {\n        this.container = container;\n        this.params = params;\n\n        this.width = 0;\n        this.height = params.height * this.params.pixelRatio;\n\n        this.lastPos = 0;\n\n        this.initDrawer(params);\n        this.createWrapper();\n        this.createElements();\n    },\n\n    createWrapper: function () {\n        this.wrapper = this.container.appendChild(\n            document.createElement('wave')\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    },\n\n    handleEvent: function (e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;\n        var bbox = this.wrapper.getBoundingClientRect();\n\n        var nominalWidth = this.width;\n        var parentWidth = this.getWidth();\n\n        var progress;\n\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress = ((clientX - bbox.left) * this.params.pixelRatio / nominalWidth) || 0;\n\n            if (progress > 1) {\n                progress = 1;\n            }\n        } else {\n            progress = ((clientX - bbox.left + this.wrapper.scrollLeft) / this.wrapper.scrollWidth) || 0;\n        }\n\n        return progress;\n    },\n\n    setupWrapperEvents: function () {\n        var my = this;\n\n        this.wrapper.addEventListener('click', function (e) {\n            var scrollbarHeight = my.wrapper.offsetHeight - my.wrapper.clientHeight;\n            if (scrollbarHeight != 0) {\n                // scrollbar is visible.  Check if click was on it\n                var bbox = my.wrapper.getBoundingClientRect();\n                if (e.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (my.params.interact) {\n                my.fireEvent('click', e, my.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', function (e) {\n            my.fireEvent('scroll', e);\n        });\n    },\n\n    drawPeaks: function (peaks, length, start, end) {\n        this.setWidth(length);\n\n        this.params.barWidth ?\n            this.drawBars(peaks, 0, start, end) :\n            this.drawWave(peaks, 0, start, end);\n    },\n\n    style: function (el, styles) {\n        Object.keys(styles).forEach(function (prop) {\n            if (el.style[prop] !== styles[prop]) {\n                el.style[prop] = styles[prop];\n            }\n        });\n        return el;\n    },\n\n    resetScroll: function () {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    },\n\n    recenter: function (percent) {\n        var position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    },\n\n    recenterOnPosition: function (position, immediate) {\n        var scrollLeft = this.wrapper.scrollLeft;\n        var half = ~~(this.wrapper.clientWidth / 2);\n        var target = position - half;\n        var offset = target - scrollLeft;\n        var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // we'll limit the \"re-center\" rate.\n            var rate = 5;\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n\n    },\n\n    getScrollX: function() {\n        return Math.round(this.wrapper.scrollLeft * this.params.pixelRatio);\n    },\n\n    getWidth: function () {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    },\n\n    setWidth: function (width) {\n        if (this.width == width) {\n          return;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            this.style(this.wrapper, {\n                width: ~~(this.width / this.params.pixelRatio) + 'px'\n            });\n        }\n\n        this.updateSize();\n    },\n\n    setHeight: function (height) {\n        if (height == this.height) { return; }\n        this.height = height;\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n        this.updateSize();\n    },\n\n    progress: function (progress) {\n        var minPxDelta = 1 / this.params.pixelRatio;\n        var pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                var newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(newPos);\n            }\n\n            this.updateProgress(pos);\n        }\n    },\n\n    destroy: function () {\n        this.unAll();\n        if (this.wrapper) {\n            this.container.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    },\n\n    /* Renderer-specific methods */\n    initDrawer: function () {},\n\n    createElements: function () {},\n\n    updateSize: function () {},\n\n    drawWave: function (peaks, max) {},\n\n    clearWave: function () {},\n\n    updateProgress: function (position) {}\n};\n\nWaveSurfer.util.extend(WaveSurfer.Drawer, WaveSurfer.Observer);\n\n'use strict';\n\nWaveSurfer.Drawer.Canvas = Object.create(WaveSurfer.Drawer);\n\nWaveSurfer.util.extend(WaveSurfer.Drawer.Canvas, {\n    createElements: function () {\n        var waveCanvas = this.wrapper.appendChild(\n            this.style(document.createElement('canvas'), {\n                position: 'absolute',\n                zIndex: 1,\n                left: 0,\n                top: 0,\n                bottom: 0\n            })\n        );\n        this.waveCc = waveCanvas.getContext('2d');\n\n        this.progressWave = this.wrapper.appendChild(\n            this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 2,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                borderRightWidth: this.params.cursorWidth + 'px',\n                borderRightColor: this.params.cursorColor\n            })\n        );\n\n        if (this.params.waveColor != this.params.progressColor) {\n            var progressCanvas = this.progressWave.appendChild(\n                document.createElement('canvas')\n            );\n            this.progressCc = progressCanvas.getContext('2d');\n        }\n    },\n\n    updateSize: function () {\n        var width = Math.round(this.width / this.params.pixelRatio);\n\n        this.waveCc.canvas.width = this.width;\n        this.waveCc.canvas.height = this.height;\n        this.style(this.waveCc.canvas, { width: width + 'px'});\n\n        this.style(this.progressWave, { display: 'block'});\n\n        if (this.progressCc) {\n            this.progressCc.canvas.width = this.width;\n            this.progressCc.canvas.height = this.height;\n            this.style(this.progressCc.canvas, { width: width + 'px'});\n        }\n\n        this.clearWave();\n    },\n\n    clearWave: function () {\n        this.waveCc.clearRect(0, 0, this.width, this.height);\n        if (this.progressCc) {\n            this.progressCc.clearRect(0, 0, this.width, this.height);\n        }\n    },\n\n    drawBars: function (peaks, channelIndex, start, end) {\n        var my = this;\n        // Split channels\n        if (peaks[0] instanceof Array) {\n            var channels = peaks;\n            if (this.params.splitChannels) {\n                this.setHeight(channels.length * this.params.height * this.params.pixelRatio);\n                channels.forEach(function(channelPeaks, i) {\n                    my.drawBars(channelPeaks, i, start, end);\n                });\n                return;\n            } else {\n                peaks = channels[0];\n            }\n        }\n\n        // Bar wave draws the bottom only as a reflection of the top,\n        // so we don't need negative values\n        var hasMinVals = [].some.call(peaks, function (val) { return val < 0; });\n        // Skip every other value if there are negatives.\n        var peakIndexScale = 1;\n        if (hasMinVals) {\n            peakIndexScale = 2;\n        }\n\n        // A half-pixel offset makes lines crisp\n        var $ = 0.5 / this.params.pixelRatio;\n        var width = this.width;\n        var height = this.params.height * this.params.pixelRatio;\n        var offsetY = height * channelIndex || 0;\n        var halfH = height / 2;\n        var length = peaks.length / peakIndexScale;\n        var bar = this.params.barWidth * this.params.pixelRatio;\n        var gap = Math.max(this.params.pixelRatio, ~~(bar / 2));\n        var step = bar + gap;\n\n        var absmax = 1 / this.params.barHeight;\n        if (this.params.normalize) {\n            var max = WaveSurfer.util.max(peaks);\n            var min = WaveSurfer.util.min(peaks);\n            absmax = -min > max ? -min : max;\n        }\n\n        var scale = length / width;\n\n        this.waveCc.fillStyle = this.params.waveColor;\n        if (this.progressCc) {\n            this.progressCc.fillStyle = this.params.progressColor;\n        }\n\n        [ this.waveCc, this.progressCc ].forEach(function (cc) {\n            if (!cc) { return; }\n\n            for (var i = (start / scale); i < (end / scale); i += step) {\n                var peak = peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n                var h = Math.round(peak / absmax * halfH);\n                cc.fillRect(i + $, halfH - h + offsetY, bar + $, h * 2);\n            }\n        }, this);\n    },\n\n    drawWave: function (peaks, channelIndex, start, end) {\n        var my = this;\n        // Split channels\n        if (peaks[0] instanceof Array) {\n            var channels = peaks;\n            if (this.params.splitChannels) {\n                this.setHeight(channels.length * this.params.height * this.params.pixelRatio);\n                channels.forEach(function(channelPeaks, i) {\n                    my.drawWave(channelPeaks, i, start, end);\n                });\n                return;\n            } else {\n                peaks = channels[0];\n            }\n        }\n\n        // Support arrays without negative peaks\n        var hasMinValues = [].some.call(peaks, function (val) { return val < 0; });\n        if (!hasMinValues) {\n            var reflectedPeaks = [];\n            for (var i = 0, len = peaks.length; i < len; i++) {\n                reflectedPeaks[2 * i] = peaks[i];\n                reflectedPeaks[2 * i + 1] = -peaks[i];\n            }\n            peaks = reflectedPeaks;\n        }\n\n        // A half-pixel offset makes lines crisp\n        var $ = 0.5 / this.params.pixelRatio;\n        var height = this.params.height * this.params.pixelRatio;\n        var offsetY = height * channelIndex || 0;\n        var halfH = height / 2;\n        var length = ~~(peaks.length / 2);\n\n        var scale = 1;\n        if (this.params.fillParent && this.width != length) {\n            scale = this.width / length;\n        }\n\n        var absmax = 1 / this.params.barHeight;\n        if (this.params.normalize) {\n            var max = WaveSurfer.util.max(peaks);\n            var min = WaveSurfer.util.min(peaks);\n            absmax = -min > max ? -min : max;\n        }\n\n        this.waveCc.fillStyle = this.params.waveColor;\n        if (this.progressCc) {\n            this.progressCc.fillStyle = this.params.progressColor;\n        }\n\n        [ this.waveCc, this.progressCc ].forEach(function (cc) {\n            if (!cc) { return; }\n\n            cc.beginPath();\n            cc.moveTo(start * scale + $, halfH + offsetY);\n\n            for (var i = start; i < end; i++) {\n                var h = Math.round(peaks[2 * i] / absmax * halfH);\n                cc.lineTo(i * scale + $, halfH - h + offsetY);\n            }\n\n            // Draw the bottom edge going backwards, to make a single\n            // closed hull to fill.\n            for (var i = end - 1; i >= start; i--) {\n                var h = Math.round(peaks[2 * i + 1] / absmax * halfH);\n                cc.lineTo(i * scale + $, halfH - h + offsetY);\n            }\n\n            cc.closePath();\n            cc.fill();\n\n            // Always draw a median line\n            cc.fillRect(0, halfH + offsetY - $, this.width, $);\n        }, this);\n    },\n\n    updateProgress: function (pos) {\n        this.style(this.progressWave, { width: pos + 'px' });\n    },\n\n    getImage: function(type, quality) {\n        return this.waveCc.canvas.toDataURL(type, quality);\n    }\n});\n\n'use strict';\n\nWaveSurfer.Drawer.MultiCanvas = Object.create(WaveSurfer.Drawer);\n\nWaveSurfer.util.extend(WaveSurfer.Drawer.MultiCanvas, {\n\n    initDrawer: function (params) {\n        this.maxCanvasWidth = params.maxCanvasWidth != null ? params.maxCanvasWidth : 4000;\n        this.maxCanvasElementWidth = Math.round(this.maxCanvasWidth / this.params.pixelRatio);\n\n        if (this.maxCanvasWidth <= 1) {\n            throw 'maxCanvasWidth must be greater than 1.';\n        } else if (this.maxCanvasWidth % 2 == 1) {\n            throw 'maxCanvasWidth must be an even number.';\n        }\n\n        this.hasProgressCanvas = this.params.waveColor != this.params.progressColor;\n        this.halfPixel = 0.5 / this.params.pixelRatio;\n        this.canvases = [];\n    },\n\n    createElements: function () {\n        this.progressWave = this.wrapper.appendChild(\n            this.style(document.createElement('wave'), {\n                position: 'absolute',\n                zIndex: 2,\n                left: 0,\n                top: 0,\n                bottom: 0,\n                overflow: 'hidden',\n                width: '0',\n                display: 'none',\n                boxSizing: 'border-box',\n                borderRightStyle: 'solid',\n                borderRightWidth: this.params.cursorWidth + 'px',\n                borderRightColor: this.params.cursorColor\n            })\n        );\n\n        this.addCanvas();\n    },\n\n    updateSize: function () {\n        var totalWidth = Math.round(this.width / this.params.pixelRatio),\n            requiredCanvases = Math.ceil(totalWidth / this.maxCanvasElementWidth);\n\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        for (var i in this.canvases) {\n            // Add some overlap to prevent vertical white stripes, keep the width even for simplicity.\n            var canvasWidth = this.maxCanvasWidth + 2 * Math.ceil(this.params.pixelRatio / 2);\n\n            if (i == this.canvases.length - 1) {\n                canvasWidth = this.width - (this.maxCanvasWidth * (this.canvases.length - 1));\n            }\n\n            this.updateDimensions(this.canvases[i], canvasWidth, this.height);\n            this.clearWaveForEntry(this.canvases[i]);\n        }\n    },\n\n    addCanvas: function () {\n        var entry = {},\n            leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        entry.wave = this.wrapper.appendChild(\n            this.style(document.createElement('canvas'), {\n                position: 'absolute',\n                zIndex: 1,\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0\n            })\n        );\n        entry.waveCtx = entry.wave.getContext('2d');\n\n        if (this.hasProgressCanvas) {\n            entry.progress = this.progressWave.appendChild(\n                this.style(document.createElement('canvas'), {\n                    position: 'absolute',\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0\n                })\n            );\n            entry.progressCtx = entry.progress.getContext('2d');\n        }\n\n        this.canvases.push(entry);\n    },\n\n    removeCanvas: function () {\n        var lastEntry = this.canvases.pop();\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave);\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress);\n        }\n    },\n\n    updateDimensions: function (entry, width, height) {\n        var elementWidth = Math.round(width / this.params.pixelRatio),\n            totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // Where the canvas starts and ends in the waveform, represented as a decimal between 0 and 1.\n        entry.start = (entry.waveCtx.canvas.offsetLeft / totalWidth) || 0;\n        entry.end = entry.start + elementWidth / totalWidth;\n\n        entry.waveCtx.canvas.width = width;\n        entry.waveCtx.canvas.height = height;\n        this.style(entry.waveCtx.canvas, { width: elementWidth + 'px'});\n\n        this.style(this.progressWave, { display: 'block'});\n\n        if (this.hasProgressCanvas) {\n            entry.progressCtx.canvas.width = width;\n            entry.progressCtx.canvas.height = height;\n            this.style(entry.progressCtx.canvas, { width: elementWidth + 'px'});\n        }\n    },\n\n    clearWave: function () {\n        for (var i in this.canvases) {\n            this.clearWaveForEntry(this.canvases[i]);\n        }\n    },\n\n    clearWaveForEntry: function (entry) {\n        entry.waveCtx.clearRect(0, 0, entry.waveCtx.canvas.width, entry.waveCtx.canvas.height);\n        if (this.hasProgressCanvas) {\n            entry.progressCtx.clearRect(0, 0, entry.progressCtx.canvas.width, entry.progressCtx.canvas.height);\n        }\n    },\n\n    drawBars: function (peaks, channelIndex, start, end) {\n        var my = this;\n        // Split channels\n        if (peaks[0] instanceof Array) {\n            var channels = peaks;\n            if (this.params.splitChannels) {\n                this.setHeight(channels.length * this.params.height * this.params.pixelRatio);\n                channels.forEach(function(channelPeaks, i) {\n                    my.drawBars(channelPeaks, i, start, end);\n                });\n                return;\n            } else {\n                peaks = channels[0];\n            }\n        }\n\n        // Bar wave draws the bottom only as a reflection of the top,\n        // so we don't need negative values\n        var hasMinVals = [].some.call(peaks, function (val) { return val < 0; });\n        // Skip every other value if there are negatives.\n        var peakIndexScale = 1;\n        if (hasMinVals) {\n            peakIndexScale = 2;\n        }\n\n        // A half-pixel offset makes lines crisp\n        var width = this.width;\n        var height = this.params.height * this.params.pixelRatio;\n        var offsetY = height * channelIndex || 0;\n        var halfH = height / 2;\n        var length = peaks.length / peakIndexScale;\n        var bar = this.params.barWidth * this.params.pixelRatio;\n        var gap = Math.max(this.params.pixelRatio, ~~(bar / 2));\n        var step = bar + gap;\n\n        var absmax = 1 / this.params.barHeight;\n        if (this.params.normalize) {\n            var max = WaveSurfer.util.max(peaks);\n            var min = WaveSurfer.util.min(peaks);\n            absmax = -min > max ? -min : max;\n        }\n\n        var scale = length / width;\n\n        for (var i = (start / scale); i < (end / scale); i += step) {\n            var peak = peaks[Math.floor(i * scale * peakIndexScale)] || 0;\n            var h = Math.round(peak / absmax * halfH);\n            this.fillRect(i + this.halfPixel, halfH - h + offsetY, bar + this.halfPixel, h * 2);\n        }\n    },\n\n    drawWave: function (peaks, channelIndex, start, end) {\n        var my = this;\n        // Split channels\n        if (peaks[0] instanceof Array) {\n            var channels = peaks;\n            if (this.params.splitChannels) {\n                this.setHeight(channels.length * this.params.height * this.params.pixelRatio);\n                channels.forEach(function(channelPeaks, i) {\n                    my.drawWave(channelPeaks, i, start, end);\n                });\n                return;\n            } else {\n                peaks = channels[0];\n            }\n        }\n\n        // Support arrays without negative peaks\n        var hasMinValues = [].some.call(peaks, function (val) { return val < 0; });\n        if (!hasMinValues) {\n            var reflectedPeaks = [];\n            for (var i = 0, len = peaks.length; i < len; i++) {\n                reflectedPeaks[2 * i] = peaks[i];\n                reflectedPeaks[2 * i + 1] = -peaks[i];\n            }\n            peaks = reflectedPeaks;\n        }\n\n        // A half-pixel offset makes lines crisp\n        var height = this.params.height * this.params.pixelRatio;\n        var offsetY = height * channelIndex || 0;\n        var halfH = height / 2;\n\n        var absmax = 1 / this.params.barHeight;\n        if (this.params.normalize) {\n            var max = WaveSurfer.util.max(peaks);\n            var min = WaveSurfer.util.min(peaks);\n            absmax = -min > max ? -min : max;\n        }\n\n        this.drawLine(peaks, absmax, halfH, offsetY, start, end);\n\n        // Always draw a median line\n        this.fillRect(0, halfH + offsetY - this.halfPixel, this.width, this.halfPixel);\n    },\n\n    drawLine: function (peaks, absmax, halfH, offsetY, start, end) {\n        for (var index in this.canvases) {\n            var entry = this.canvases[index];\n\n            this.setFillStyles(entry);\n\n            this.drawLineToContext(entry, entry.waveCtx, peaks, absmax, halfH, offsetY, start, end);\n            this.drawLineToContext(entry, entry.progressCtx, peaks, absmax, halfH, offsetY, start, end);\n        }\n    },\n\n    drawLineToContext: function (entry, ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) { return; }\n\n        var length = peaks.length / 2;\n\n        var scale = 1;\n        if (this.params.fillParent && this.width != length) {\n            scale = this.width / length;\n        }\n\n        var first = Math.round(length * entry.start),\n            last = Math.round(length * entry.end);\n        if (first > end || last < start) { return; }\n        var canvasStart = Math.max(first, start);\n        var canvasEnd = Math.min(last, end);\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale + this.halfPixel, halfH + offsetY);\n\n        for (var i = canvasStart; i < canvasEnd; i++) {\n            var peak = peaks[2 * i] || 0;\n            var h = Math.round(peak / absmax * halfH);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfH - h + offsetY);\n        }\n\n        // Draw the bottom edge going backwards, to make a single\n        // closed hull to fill.\n        for (var i = canvasEnd - 1; i >= canvasStart; i--) {\n            var peak = peaks[2 * i + 1] || 0;\n            var h = Math.round(peak / absmax * halfH);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfH - h + offsetY);\n        }\n\n        ctx.closePath();\n        ctx.fill();\n    },\n\n    fillRect: function (x, y, width, height) {\n        var startCanvas = Math.floor(x / this.maxCanvasWidth);\n        var endCanvas = Math.min(Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n                                 this.canvases.length);\n        for (var i = startCanvas; i < endCanvas; i++) {\n            var entry = this.canvases[i],\n                leftOffset = i * this.maxCanvasWidth;\n\n            var intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(x + width, i * this.maxCanvasWidth + entry.waveCtx.canvas.width),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                this.setFillStyles(entry);\n\n                this.fillRectToContext(entry.waveCtx,\n                        intersection.x1 - leftOffset,\n                        intersection.y1,\n                        intersection.x2 - intersection.x1,\n                        intersection.y2 - intersection.y1);\n\n                this.fillRectToContext(entry.progressCtx,\n                        intersection.x1 - leftOffset,\n                        intersection.y1,\n                        intersection.x2 - intersection.x1,\n                        intersection.y2 - intersection.y1);\n            }\n        }\n    },\n\n    fillRectToContext: function (ctx, x, y, width, height) {\n        if (!ctx) { return; }\n        ctx.fillRect(x, y, width, height);\n    },\n\n    setFillStyles: function (entry) {\n        entry.waveCtx.fillStyle = this.params.waveColor;\n        if (this.hasProgressCanvas) {\n            entry.progressCtx.fillStyle = this.params.progressColor;\n        }\n    },\n\n    updateProgress: function (pos) {\n        this.style(this.progressWave, { width: pos + 'px' });\n    },\n\n    /**\n     * Combine all available canvasses together.\n     *\n     * @param {String} type - an optional value of a format type. Default is image/png.\n     * @param {Number} quality - an optional value between 0 and 1. Default is 0.92.\n     *\n     */\n    getImage: function(type, quality) {\n        var availableCanvas = [];\n        this.canvases.forEach(function (entry) {\n            availableCanvas.push(entry.wave.toDataURL(type, quality));\n        });\n        return availableCanvas.length > 1 ? availableCanvas : availableCanvas[0];\n    }\n});\n\n'use strict';\n\nWaveSurfer.Drawer.SplitWavePointPlot = Object.create(WaveSurfer.Drawer.Canvas);\n\nWaveSurfer.util.extend(WaveSurfer.Drawer.SplitWavePointPlot, {\n\n    defaultPlotParams: {\n        plotNormalizeTo: 'whole',\n        plotTimeStart: 0,\n        plotMin: 0,\n        plotMax: 1,\n        plotColor     : '#f63',\n        plotProgressColor : '#F00',\n        plotPointHeight: 2,\n        plotPointWidth: 2,\n        plotSeparator: true,\n        plotSeparatorColor: 'black',\n        plotRangeDisplay: false,\n        plotRangeUnits: '',\n        plotRangePrecision: 4,\n        plotRangeIgnoreOutliers: false,\n        plotRangeFontSize: 12,\n        plotRangeFontType: 'Ariel',\n        waveDrawMedianLine: true,\n        plotFileDelimiter:  '\\t'\n    },\n\n    //object variables that get manipulated by various object functions\n    plotTimeStart: 0,  //the start time of our wave according to plot data\n    plotTimeEnd: -1,   //the end of our wave according to plot data\n    plotArrayLoaded: false,\n    plotArray: [],     //array of plot data objects containing time and plot value\n    plotPoints: [],        //calculated average plot points corresponding to value of our wave\n    plotMin: 0,\n    plotMax: 1,\n\n    /**\n     * Initializes the plot array. If params.plotFileUrl is provided an ajax call will be\n     * executed and drawing of the wave is delayed until plot info is retrieved\n     * @param params\n     */\n    initDrawer: function (params) {\n        var my = this;\n\n        //set defaults if not passed in\n        for(var paramName in this.defaultPlotParams) {\n            if(this.params[paramName] === undefined) {\n                this.params[paramName] = this.defaultPlotParams[paramName];\n            }\n        }\n\n        //set the plotTimeStart\n        this.plotTimeStart = this.params.plotTimeStart;\n\n        //check to see if plotTimeEnd\n        if(this.params.plotTimeEnd !== undefined) {\n            this.plotTimeEnd = this.params.plotTimeEnd;\n        }\n\n        //set the plot array\n        if (Array.isArray(params.plotArray)) {\n            this.plotArray = params.plotArray;\n            this.plotArrayLoaded = true;\n        }\n        //Need to load the plot array from ajax with our callback\n        else {\n            var onPlotArrayLoaded = function (plotArray) {\n                my.plotArray = plotArray;\n                my.plotArrayLoaded = true;\n                my.fireEvent('plot_array_loaded');\n            };\n            this.loadPlotArrayFromFile(params.plotFileUrl, onPlotArrayLoaded, this.params.plotFileDelimiter);\n        }\n    },\n\n    /**\n     * Draw the peaks - this overrides the drawer.js function and does the following additional steps\n     * - ensures that the plotArray has already been loaded, if not it loads via ajax\n     * - moves the wave form to where channel 1 would normally be\n     * @param peaks\n     * @param length\n     * @param start\n     * @param end\n     */\n    drawPeaks: function (peaks, length, start, end) {\n        //make sure that the plot array is already loaded\n        if (this.plotArrayLoaded == true) {\n\n            this.setWidth(length);\n\n            //fake that we are splitting channels\n            this.splitChannels = true;\n            this.params.height = this.params.height/2;\n            if (peaks[0] instanceof Array) {\n               peaks = peaks[0];\n            }\n\n            this.params.barWidth ?\n                this.drawBars(peaks, 1, start, end) :\n                this.drawWave(peaks, 1, start, end);\n\n            //set the height back to the original\n            this.params.height = this.params.height*2;\n\n            this.calculatePlots();\n            this.drawPlots();\n\n        }\n        //otherwise wait for the plot array to be loaded and then draw again\n        else {\n            var my = this;\n            my.on('plot-array-loaded', function () {\n                my.drawPeaks(peaks, length, start, end);\n            });\n        }\n    },\n\n\n\n\n    /**\n     * Loop through the calculated plot values and actually draw them\n     */\n    drawPlots: function() {\n        var height = this.params.height * this.params.pixelRatio / 2;\n\n        var $ = 0.5 / this.params.pixelRatio;\n\n        this.waveCc.fillStyle = this.params.plotColor;\n        if(this.progressCc) {\n            this.progressCc.fillStyle = this.params.plotProgressColor;\n        }\n        for(var i in this.plotPoints) {\n            var x = parseInt(i);\n            var y = height - this.params.plotPointHeight - (this.plotPoints[i] * (height - this.params.plotPointHeight));\n            var pointHeight = this.params.plotPointHeight;\n\n            this.waveCc.fillRect(x, y, this.params.plotPointWidth, pointHeight);\n\n            if(this.progressCc) {\n                this.progressCc.fillRect(x, y, this.params.plotPointWidth, pointHeight);\n            }\n        }\n\n        //draw line to separate the two waves\n        if(this.params.plotSeparator) {\n            this.waveCc.fillStyle = this.params.plotSeparatorColor;\n            this.waveCc.fillRect(0, height, this.width, $);\n        }\n\n        if(this.params.plotRangeDisplay) {\n            this.displayPlotRange();\n        }\n    },\n\n\n    /**\n     * Display the range for the plot graph\n     */\n    displayPlotRange: function()\n    {\n        var fontSize = this.params.plotRangeFontSize * this.params.pixelRatio;\n        var maxRange = this.plotMax.toPrecision(this.params.plotRangePrecision) + ' ' + this.params.plotRangeUnits;\n        var minRange = this.plotMin.toPrecision(this.params.plotRangePrecision) + ' ' + this.params.plotRangeUnits;\n        this.waveCc.font = fontSize.toString() + 'px ' + this.params.plotRangeFontType;\n        this.waveCc.fillText(maxRange, 3, fontSize);\n        this.waveCc.fillText(minRange, 3, this.height/2);\n\n    },\n    /**\n     * This function loops through the plotArray and converts it to the plot points\n     * to be drawn on the canvas keyed by their position\n     */\n    calculatePlots: function() {\n        //reset plots array\n        this.plotPoints = {};\n\n        //make sure we have our plotTimeEnd\n        this.calculatePlotTimeEnd();\n\n        var pointsForAverage = [];\n        var previousWaveIndex = -1;\n        var maxPlot = 0;\n        var minPlot = 99999999999999;\n        var maxSegmentPlot = 0;\n        var minSegmentPlot = 99999999999999;\n        var duration = this.plotTimeEnd - this.plotTimeStart;\n\n        //loop through our plotArray and map values to wave indexes and take the average values for each wave index\n        for(var i = 0; i < this.plotArray.length; i++) {\n            var dataPoint = this.plotArray[i];\n            if(dataPoint.value > maxPlot) {maxPlot = dataPoint.value;}\n            if(dataPoint.value < minPlot) {minPlot = dataPoint.value;}\n\n            //make sure we are in the specified range\n            if(dataPoint.time >= this.plotTimeStart && dataPoint.time <= this.plotTimeEnd) {\n                //get the wave index corresponding to the data point\n                var waveIndex = Math.round(this.width * (dataPoint.time - this.plotTimeStart) / duration);\n\n                pointsForAverage.push(dataPoint.value);\n\n                //if we have moved on to a new position in our wave record average and reset previousWaveIndex\n                if(waveIndex !== previousWaveIndex) {\n                    if(pointsForAverage.length > 0) {\n                        //get the average plot for this point\n                        var avgPlot = this.avg(pointsForAverage);\n\n                        //check for min max\n                        if(avgPlot > maxSegmentPlot) {maxSegmentPlot = avgPlot;}\n                        if(avgPlot < minSegmentPlot) {minSegmentPlot = avgPlot;}\n\n                        //add plot to the position\n                        this.plotPoints[previousWaveIndex] = avgPlot;\n                        pointsForAverage = [];\n                    }\n                }\n                previousWaveIndex = waveIndex;\n            }\n        }\n\n        //normalize the plots points\n        if(this.params.plotNormalizeTo == 'whole') {\n            this.plotMin = minPlot;\n            this.plotMax = maxPlot;\n        }\n        else if(this.params.plotNormalizeTo == 'values') {\n            this.plotMin = this.params.plotMin;\n            this.plotMax = this.params.plotMax;\n        }\n        else {\n            this.plotMin = minSegmentPlot;\n            this.plotMax = maxSegmentPlot;\n        }\n        this.normalizeValues();\n    },\n\n    /**\n     * Function to take all of the plots in this.plots and normalize them from 0 to one\n     * depending on this.plotMin and this.plotMax values\n     */\n    normalizeValues: function() {\n        var normalizedValues = {};\n\n        //check to make sure we should be normalizing\n        if(this.params.plotNormalizeTo === 'none') {return;}\n\n        for(var i in this.plotPoints) {\n            //get the normalized value between 0 and 1\n            var normalizedValue = (this.plotPoints[i] - this.plotMin) / (this.plotMax - this.plotMin);\n\n            //check if the value is above our specified range max\n            if(normalizedValue > 1) {\n                if(!this.params.plotRangeIgnoreOutliers) {\n                    normalizedValues[i] = 1;\n                }\n            }\n            //check if hte value is below our specified rant\n            else if(normalizedValue < 0) {\n                if(!this.params.plotRangeIgnoreOutliers) {\n                    normalizedValues[i] = 0;\n                }\n            }\n            //in our range add the normalized value\n            else {\n                normalizedValues[i] = normalizedValue;\n            }\n        }\n        this.plotPoints = normalizedValues;\n    },\n    /**\n     *\n     */\n\n    /**\n     * Function to load the plot array from a external file\n     *\n     * The text file should contain a series of lines.\n     * Each line should contain [audio time] [delimiter character] [plot value]\n     * e.g. \"1.2355 [tab] 124.2321\"\n     *\n     * @param plotFileUrl  url of the file containing time and value information\n     * @param onSuccess    function to run on success\n     * @param delimiter    the delimiter that separates the time and values on each line\n     */\n    loadPlotArrayFromFile: function(plotFileUrl, onSuccess, delimiter) {\n        //default delimiter to tab character\n        if (delimiter === undefined) {delimiter = '\\t';}\n\n        var plotArray = [];\n\n        var options = {\n            url: plotFileUrl,\n            responseType: 'text'\n        };\n        var fileAjax = WaveSurfer.util.ajax(options);\n\n        fileAjax.on('load', function (data) {\n            if (data.currentTarget.status == 200) {\n                //split the file by line endings\n                var plotLines = data.currentTarget.responseText.split('\\n');\n                //loop through each line and find the time and plot values (delimited by tab)\n                for (var i = 0; i < plotLines.length; i++) {\n                    var plotParts = plotLines[i].split(delimiter);\n                    if(plotParts.length == 2) {\n                        plotArray.push({time: parseFloat(plotParts[0]), value: parseFloat(plotParts[1])});\n                    }\n                }\n                //run success function\n                onSuccess(plotArray);\n            }\n        });\n    },\n\n    /***\n     * Calculate the end time of the plot\n     */\n    calculatePlotTimeEnd: function() {\n        if(this.params.plotTimeEnd !== undefined) {\n            this.plotTimeEnd = this.params.plotTimeEnd;\n        }\n        else {\n            this.plotTimeEnd = this.plotArray[this.plotArray.length -1].time;\n        }\n    },\n\n    /**\n     * Quick convenience function to average numbers in an array\n     * @param  array of values\n     * @returns {number}\n     */\n    avg: function(values) {\n        var sum = values.reduce(function(a, b) {return a+b;});\n        return sum/values.length;\n    }\n});\n\nWaveSurfer.util.extend(WaveSurfer.Drawer.SplitWavePointPlot, WaveSurfer.Observer);\n\n'use strict';\n\nWaveSurfer.PeakCache = {\n    init: function() {\n        this.clearPeakCache();\n    },\n\n    clearPeakCache: function() {\n\t// Flat array with entries that are always in pairs to mark the\n\t// beginning and end of each subrange.  This is a convenience so we can\n\t// iterate over the pairs for easy set difference operations.\n        this.peakCacheRanges = [];\n\t// Length of the entire cachable region, used for resetting the cache\n\t// when this changes (zoom events, for instance).\n        this.peakCacheLength = -1;\n    },\n\n    addRangeToPeakCache: function(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        var uncachedRanges = [];\n        var i = 0;\n        // Skip ranges before the current start.\n        while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] < start) {\n            i++;\n        }\n\t// If |i| is even, |start| falls after an existing range.  Otherwise,\n\t// |start| falls between an existing range, and the uncached region\n\t// starts when we encounter the next node in |peakCacheRanges| or\n\t// |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] <= end) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter(function(item, pos, arr) {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            } else {\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            }\n        });\n\n\t// Merge the two ranges together, uncachedRanges will either contain\n\t// wholly new points, or duplicates of points in peakCacheRanges.  If\n\t// duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges.sort(function(a, b) {\n            return a - b;\n        }).filter(function(item, pos, arr) {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            } else {\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            }\n        });\n\n\t// Push the uncached ranges into an array of arrays for ease of\n\t// iteration in the functions that call this.\n        var uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i+1]]);\n        }\n\n        return uncachedRangePairs;\n    },\n\n    // For testing\n    getCacheRanges: function() {\n      var peakCacheRangePairs = [];\n      for (var i = 0; i < this.peakCacheRanges.length; i += 2) {\n          peakCacheRangePairs.push([this.peakCacheRanges[i], this.peakCacheRanges[i+1]]);\n      }\n      return peakCacheRangePairs;\n    }\n};\n\n'use strict';\n\n/* Init from HTML */\n(function () {\n    var init = function () {\n        var containers = document.querySelectorAll('wavesurfer');\n\n        Array.prototype.forEach.call(containers, function (el) {\n            var params = WaveSurfer.util.extend({\n                container: el,\n                backend: 'MediaElement',\n                mediaControls: true\n            }, el.dataset);\n\n            el.style.display = 'block';\n\n            var wavesurfer = WaveSurfer.create(params);\n\n            if (el.dataset.peaks) {\n                var peaks = JSON.parse(el.dataset.peaks);\n            }\n\n            wavesurfer.load(el.dataset.url, peaks);\n        });\n    };\n\n    if (document.readyState === 'complete') {\n        init();\n    } else {\n        window.addEventListener('load', init);\n    }\n}());\n\nreturn WaveSurfer;\n\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 25 */
/***/ (function(module, exports) {

eval("// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzPzQ1ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qc1xuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ctx         = __webpack_require__(19)\n  , call        = __webpack_require__(108)\n  , isArrayIter = __webpack_require__(107)\n  , anObject    = __webpack_require__(10)\n  , toLength    = __webpack_require__(49)\n  , getIterFn   = __webpack_require__(72)\n  , BREAK       = {}\n  , RETURN      = {};\nvar exports = module.exports = function(iterable, entries, fn, that, ITERATOR){\n  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator, result;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if(result === BREAK || result === RETURN)return result;\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    result = call(iterator, f, step.value, entries);\n    if(result === BREAK || result === RETURN)return result;\n  }\n};\nexports.BREAK  = BREAK;\nexports.RETURN = RETURN;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanM/NTI2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ2V0SXRlckZuICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICwgQlJFQUsgICAgICAgPSB7fVxuICAsIFJFVFVSTiAgICAgID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSlcbiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICwgaW5kZXggID0gMFxuICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApe1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Zvci1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = __webpack_require__(10)\n  , dPs         = __webpack_require__(112)\n  , enumBugKeys = __webpack_require__(38)\n  , IE_PROTO    = __webpack_require__(46)('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(64)('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(106).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzP2Q4Y2YiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGRQcyAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfVxuICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJylcbiAgICAsIGkgICAgICA9IGVudW1CdWdLZXlzLmxlbmd0aFxuICAgICwgbHQgICAgID0gJzwnXG4gICAgLCBndCAgICAgPSAnPidcbiAgICAsIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7XG4gIHZhciByZXN1bHQ7XG4gIGlmKE8gIT09IG51bGwpe1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

eval("exports.f = {}.propertyIsEnumerable;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzP2QwZDIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

eval("module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzPzFlODYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

eval("var def = __webpack_require__(7).f\n  , has = __webpack_require__(13)\n  , TAG = __webpack_require__(3)('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcz9jOTQ1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaGFzID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcbiAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(25);\nmodule.exports = function(it){\n  return Object(defined(it));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanM/YjVjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 32 */
/***/ (function(module, exports) {

eval("var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanM/ZThjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaWQgPSAwXG4gICwgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(119);\nvar global        = __webpack_require__(6)\n  , hide          = __webpack_require__(14)\n  , Iterators     = __webpack_require__(20)\n  , TO_STRING_TAG = __webpack_require__(3)('toStringTag');\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanM/YmYwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBJdGVyYXRvcnMgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _set = __webpack_require__(59);\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(9);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _priorityQueue = __webpack_require__(55);\n\nvar _priorityQueue2 = _interopRequireDefault(_priorityQueue);\n\nvar _timeEngine = __webpack_require__(18);\n\nvar _timeEngine2 = _interopRequireDefault(_timeEngine);\n\nvar _audioContext = __webpack_require__(16);\n\nvar _audioContext2 = _interopRequireDefault(_audioContext);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @class SchedulingQueue\n */\n\nvar SchedulingQueue = function (_TimeEngine) {\n  (0, _inherits3.default)(SchedulingQueue, _TimeEngine);\n\n  function SchedulingQueue() {\n    (0, _classCallCheck3.default)(this, SchedulingQueue);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(SchedulingQueue).call(this));\n\n    _this.__queue = new _priorityQueue2.default();\n    _this.__engines = new _set2.default();\n    return _this;\n  }\n\n  // TimeEngine 'scheduled' interface\n\n\n  (0, _createClass3.default)(SchedulingQueue, [{\n    key: 'advanceTime',\n    value: function advanceTime(time) {\n      var engine = this.__queue.head;\n      var nextEngineTime = engine.advanceTime(time);\n\n      if (!nextEngineTime) {\n        engine.master = null;\n        this.__engines.delete(engine);\n        this.__queue.remove(engine);\n      } else {\n        this.__queue.move(engine, nextEngineTime);\n      }\n\n      return this.__queue.time;\n    }\n\n    // TimeEngine master method to be implemented by derived class\n\n  }, {\n    key: 'defer',\n\n\n    // call a function at a given time\n    value: function defer(fun) {\n      var time = arguments.length <= 1 || arguments[1] === undefined ? this.currentTime : arguments[1];\n\n      if (!(fun instanceof Function)) throw new Error(\"object cannot be defered by scheduler\");\n\n      this.add({\n        advanceTime: function advanceTime(time) {\n          fun(time);\n        } }, // make sur that the advanceTime method does not returm anything\n      time);\n    }\n\n    // add a time engine to the scheduler\n\n  }, {\n    key: 'add',\n    value: function add(engine) {\n      var time = arguments.length <= 1 || arguments[1] === undefined ? this.currentTime : arguments[1];\n\n      if (!_timeEngine2.default.implementsScheduled(engine)) throw new Error(\"object cannot be added to scheduler\");\n\n      if (engine.master) throw new Error(\"object has already been added to a master\");\n\n      engine.master = this;\n\n      // add to engines and queue\n      this.__engines.add(engine);\n      var nextTime = this.__queue.insert(engine, time);\n\n      // reschedule queue\n      this.resetTime(nextTime);\n    }\n\n    // remove a time engine from the queue\n\n  }, {\n    key: 'remove',\n    value: function remove(engine) {\n      if (engine.master !== this) throw new Error(\"object has not been added to this scheduler\");\n\n      engine.master = null;\n\n      // remove from array and queue\n      this.__engines.delete(engine);\n      var nextTime = this.__queue.remove(engine);\n\n      // reschedule queue\n      this.resetTime(nextTime);\n    }\n\n    // reset next engine time\n\n  }, {\n    key: 'resetEngineTime',\n    value: function resetEngineTime(engine) {\n      var time = arguments.length <= 1 || arguments[1] === undefined ? this.currentTime : arguments[1];\n\n      if (engine.master !== this) throw new Error(\"object has not been added to this scheduler\");\n\n      var nextTime = void 0;\n\n      if (this.__queue.has(engine)) nextTime = this.__queue.move(engine, time);else nextTime = this.__queue.insert(engine, time);\n\n      this.resetTime(nextTime);\n    }\n\n    // check whether a given engine is scheduled\n\n  }, {\n    key: 'has',\n    value: function has(engine) {\n      return this.__engines.has(engine);\n    }\n\n    // clear queue\n\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.__queue.clear();\n      this.__engines.clear();\n      this.resetTime(Infinity);\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      return 0;\n    }\n  }]);\n  return SchedulingQueue;\n}(_timeEngine2.default); /**\n                          * SchedulingQueue base class\n                          * http://wavesjs.github.io/audio/#audio-scheduling-queue\n                          *\n                          * Norbert.Schnell@ircam.fr\n                          * Copyright 2014, 2015 IRCAM – Centre Pompidou\n                          */\n\nexports.default = SchedulingQueue;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjaGVkdWxpbmctcXVldWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7O0lBS3FCOzs7QUFDbkIsV0FEbUIsZUFDbkIsR0FBYzt3Q0FESyxpQkFDTDs7NkZBREssNkJBQ0w7O0FBR1osVUFBSyxPQUFMLEdBQWUsNkJBQWYsQ0FIWTtBQUlaLFVBQUssU0FBTCxHQUFpQixtQkFBakIsQ0FKWTs7R0FBZDs7Ozs7NkJBRG1COztnQ0FTUCxNQUFNO0FBQ2hCLFVBQU0sU0FBUyxLQUFLLE9BQUwsQ0FBYSxJQUFiLENBREM7QUFFaEIsVUFBTSxpQkFBaUIsT0FBTyxXQUFQLENBQW1CLElBQW5CLENBQWpCLENBRlU7O0FBSWhCLFVBQUksQ0FBQyxjQUFELEVBQWlCO0FBQ25CLGVBQU8sTUFBUCxHQUFnQixJQUFoQixDQURtQjtBQUVuQixhQUFLLFNBQUwsQ0FBZSxNQUFmLENBQXNCLE1BQXRCLEVBRm1CO0FBR25CLGFBQUssT0FBTCxDQUFhLE1BQWIsQ0FBb0IsTUFBcEIsRUFIbUI7T0FBckIsTUFJTztBQUNMLGFBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0IsTUFBbEIsRUFBMEIsY0FBMUIsRUFESztPQUpQOztBQVFBLGFBQU8sS0FBSyxPQUFMLENBQWEsSUFBYixDQVpTOzs7Ozs7Ozs7OzBCQXFCWixLQUE4QjtVQUF6Qiw2REFBTyxLQUFLLFdBQUwsZ0JBQWtCOztBQUNsQyxVQUFJLEVBQUUsZUFBZSxRQUFmLENBQUYsRUFDRixNQUFNLElBQUksS0FBSixDQUFVLHVDQUFWLENBQU4sQ0FERjs7QUFHQSxXQUFLLEdBQUwsQ0FBUztBQUNQLHFCQUFhLHFCQUFTLElBQVQsRUFBZTtBQUFFLGNBQUksSUFBSixFQUFGO1NBQWYsRUFEZjtBQUVHLFVBRkgsRUFKa0M7Ozs7Ozs7d0JBVWhDLFFBQWlDO1VBQXpCLDZEQUFPLEtBQUssV0FBTCxnQkFBa0I7O0FBQ25DLFVBQUksQ0FBQyxxQkFBVyxtQkFBWCxDQUErQixNQUEvQixDQUFELEVBQ0YsTUFBTSxJQUFJLEtBQUosQ0FBVSxxQ0FBVixDQUFOLENBREY7O0FBR0EsVUFBSSxPQUFPLE1BQVAsRUFDRixNQUFNLElBQUksS0FBSixDQUFVLDJDQUFWLENBQU4sQ0FERjs7QUFHQSxhQUFPLE1BQVAsR0FBZ0IsSUFBaEI7OztBQVBtQyxVQVVuQyxDQUFLLFNBQUwsQ0FBZSxHQUFmLENBQW1CLE1BQW5CLEVBVm1DO0FBV25DLFVBQU0sV0FBVyxLQUFLLE9BQUwsQ0FBYSxNQUFiLENBQW9CLE1BQXBCLEVBQTRCLElBQTVCLENBQVg7OztBQVg2QixVQWNuQyxDQUFLLFNBQUwsQ0FBZSxRQUFmLEVBZG1DOzs7Ozs7OzJCQWtCOUIsUUFBUTtBQUNiLFVBQUksT0FBTyxNQUFQLEtBQWtCLElBQWxCLEVBQ0YsTUFBTSxJQUFJLEtBQUosQ0FBVSw2Q0FBVixDQUFOLENBREY7O0FBR0EsYUFBTyxNQUFQLEdBQWdCLElBQWhCOzs7QUFKYSxVQU9iLENBQUssU0FBTCxDQUFlLE1BQWYsQ0FBc0IsTUFBdEIsRUFQYTtBQVFiLFVBQU0sV0FBVyxLQUFLLE9BQUwsQ0FBYSxNQUFiLENBQW9CLE1BQXBCLENBQVg7OztBQVJPLFVBV2IsQ0FBSyxTQUFMLENBQWUsUUFBZixFQVhhOzs7Ozs7O29DQWVDLFFBQWlDO1VBQXpCLDZEQUFPLEtBQUssV0FBTCxnQkFBa0I7O0FBQy9DLFVBQUksT0FBTyxNQUFQLEtBQWtCLElBQWxCLEVBQ0YsTUFBTSxJQUFJLEtBQUosQ0FBVSw2Q0FBVixDQUFOLENBREY7O0FBR0EsVUFBSSxpQkFBSixDQUorQzs7QUFNL0MsVUFBSSxLQUFLLE9BQUwsQ0FBYSxHQUFiLENBQWlCLE1BQWpCLENBQUosRUFDRSxXQUFXLEtBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0IsTUFBbEIsRUFBMEIsSUFBMUIsQ0FBWCxDQURGLEtBR0UsV0FBVyxLQUFLLE9BQUwsQ0FBYSxNQUFiLENBQW9CLE1BQXBCLEVBQTRCLElBQTVCLENBQVgsQ0FIRjs7QUFLQSxXQUFLLFNBQUwsQ0FBZSxRQUFmLEVBWCtDOzs7Ozs7O3dCQWU3QyxRQUFRO0FBQ1YsYUFBTyxLQUFLLFNBQUwsQ0FBZSxHQUFmLENBQW1CLE1BQW5CLENBQVAsQ0FEVTs7Ozs7Ozs0QkFLSjtBQUNOLFdBQUssT0FBTCxDQUFhLEtBQWIsR0FETTtBQUVOLFdBQUssU0FBTCxDQUFlLEtBQWYsR0FGTTtBQUdOLFdBQUssU0FBTCxDQUFlLFFBQWYsRUFITTs7Ozt3QkFwRVU7QUFDaEIsYUFBTyxDQUFQLENBRGdCOzs7U0F6QkMiLCJmaWxlIjoic2NoZWR1bGluZy1xdWV1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2NoZWR1bGluZ1F1ZXVlIGJhc2UgY2xhc3NcbiAqIGh0dHA6Ly93YXZlc2pzLmdpdGh1Yi5pby9hdWRpby8jYXVkaW8tc2NoZWR1bGluZy1xdWV1ZVxuICpcbiAqIE5vcmJlcnQuU2NobmVsbEBpcmNhbS5mclxuICogQ29weXJpZ2h0IDIwMTQsIDIwMTUgSVJDQU0g4oCTwqBDZW50cmUgUG9tcGlkb3VcbiAqL1xuXG5pbXBvcnQgUHJpb3JpdHlRdWV1ZSBmcm9tICcuL3ByaW9yaXR5LXF1ZXVlJztcbmltcG9ydCBUaW1lRW5naW5lIGZyb20gJy4vdGltZS1lbmdpbmUnO1xuaW1wb3J0IGRlZmF1bHRBdWRpb0NvbnRleHQgZnJvbSAnLi9hdWRpby1jb250ZXh0JztcblxuLyoqXG4gKiBAY2xhc3MgU2NoZWR1bGluZ1F1ZXVlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjaGVkdWxpbmdRdWV1ZSBleHRlbmRzIFRpbWVFbmdpbmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fX3F1ZXVlID0gbmV3IFByaW9yaXR5UXVldWUoKTtcbiAgICB0aGlzLl9fZW5naW5lcyA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIC8vIFRpbWVFbmdpbmUgJ3NjaGVkdWxlZCcgaW50ZXJmYWNlXG4gIGFkdmFuY2VUaW1lKHRpbWUpIHtcbiAgICBjb25zdCBlbmdpbmUgPSB0aGlzLl9fcXVldWUuaGVhZDtcbiAgICBjb25zdCBuZXh0RW5naW5lVGltZSA9IGVuZ2luZS5hZHZhbmNlVGltZSh0aW1lKTtcblxuICAgIGlmICghbmV4dEVuZ2luZVRpbWUpIHtcbiAgICAgIGVuZ2luZS5tYXN0ZXIgPSBudWxsO1xuICAgICAgdGhpcy5fX2VuZ2luZXMuZGVsZXRlKGVuZ2luZSk7XG4gICAgICB0aGlzLl9fcXVldWUucmVtb3ZlKGVuZ2luZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX19xdWV1ZS5tb3ZlKGVuZ2luZSwgbmV4dEVuZ2luZVRpbWUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9fcXVldWUudGltZTtcbiAgfVxuXG4gIC8vIFRpbWVFbmdpbmUgbWFzdGVyIG1ldGhvZCB0byBiZSBpbXBsZW1lbnRlZCBieSBkZXJpdmVkIGNsYXNzXG4gIGdldCBjdXJyZW50VGltZSgpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8vIGNhbGwgYSBmdW5jdGlvbiBhdCBhIGdpdmVuIHRpbWVcbiAgZGVmZXIoZnVuLCB0aW1lID0gdGhpcy5jdXJyZW50VGltZSkge1xuICAgIGlmICghKGZ1biBpbnN0YW5jZW9mIEZ1bmN0aW9uKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCBjYW5ub3QgYmUgZGVmZXJlZCBieSBzY2hlZHVsZXJcIik7XG5cbiAgICB0aGlzLmFkZCh7XG4gICAgICBhZHZhbmNlVGltZTogZnVuY3Rpb24odGltZSkgeyBmdW4odGltZSk7IH0sIC8vIG1ha2Ugc3VyIHRoYXQgdGhlIGFkdmFuY2VUaW1lIG1ldGhvZCBkb2VzIG5vdCByZXR1cm0gYW55dGhpbmdcbiAgICB9LCB0aW1lKTtcbiAgfVxuXG4gIC8vIGFkZCBhIHRpbWUgZW5naW5lIHRvIHRoZSBzY2hlZHVsZXJcbiAgYWRkKGVuZ2luZSwgdGltZSA9IHRoaXMuY3VycmVudFRpbWUpIHtcbiAgICBpZiAoIVRpbWVFbmdpbmUuaW1wbGVtZW50c1NjaGVkdWxlZChlbmdpbmUpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwib2JqZWN0IGNhbm5vdCBiZSBhZGRlZCB0byBzY2hlZHVsZXJcIik7XG5cbiAgICBpZiAoZW5naW5lLm1hc3RlcilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm9iamVjdCBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkIHRvIGEgbWFzdGVyXCIpO1xuXG4gICAgZW5naW5lLm1hc3RlciA9IHRoaXM7XG5cbiAgICAvLyBhZGQgdG8gZW5naW5lcyBhbmQgcXVldWVcbiAgICB0aGlzLl9fZW5naW5lcy5hZGQoZW5naW5lKTtcbiAgICBjb25zdCBuZXh0VGltZSA9IHRoaXMuX19xdWV1ZS5pbnNlcnQoZW5naW5lLCB0aW1lKTtcblxuICAgIC8vIHJlc2NoZWR1bGUgcXVldWVcbiAgICB0aGlzLnJlc2V0VGltZShuZXh0VGltZSk7XG4gIH1cblxuICAvLyByZW1vdmUgYSB0aW1lIGVuZ2luZSBmcm9tIHRoZSBxdWV1ZVxuICByZW1vdmUoZW5naW5lKSB7XG4gICAgaWYgKGVuZ2luZS5tYXN0ZXIgIT09IHRoaXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3QgaGFzIG5vdCBiZWVuIGFkZGVkIHRvIHRoaXMgc2NoZWR1bGVyXCIpO1xuXG4gICAgZW5naW5lLm1hc3RlciA9IG51bGw7XG5cbiAgICAvLyByZW1vdmUgZnJvbSBhcnJheSBhbmQgcXVldWVcbiAgICB0aGlzLl9fZW5naW5lcy5kZWxldGUoZW5naW5lKTtcbiAgICBjb25zdCBuZXh0VGltZSA9IHRoaXMuX19xdWV1ZS5yZW1vdmUoZW5naW5lKTtcblxuICAgIC8vIHJlc2NoZWR1bGUgcXVldWVcbiAgICB0aGlzLnJlc2V0VGltZShuZXh0VGltZSk7XG4gIH1cblxuICAvLyByZXNldCBuZXh0IGVuZ2luZSB0aW1lXG4gIHJlc2V0RW5naW5lVGltZShlbmdpbmUsIHRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lKSB7XG4gICAgaWYgKGVuZ2luZS5tYXN0ZXIgIT09IHRoaXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3QgaGFzIG5vdCBiZWVuIGFkZGVkIHRvIHRoaXMgc2NoZWR1bGVyXCIpO1xuXG4gICAgbGV0IG5leHRUaW1lO1xuXG4gICAgaWYgKHRoaXMuX19xdWV1ZS5oYXMoZW5naW5lKSlcbiAgICAgIG5leHRUaW1lID0gdGhpcy5fX3F1ZXVlLm1vdmUoZW5naW5lLCB0aW1lKTtcbiAgICBlbHNlXG4gICAgICBuZXh0VGltZSA9IHRoaXMuX19xdWV1ZS5pbnNlcnQoZW5naW5lLCB0aW1lKTtcblxuICAgIHRoaXMucmVzZXRUaW1lKG5leHRUaW1lKTtcbiAgfVxuXG4gIC8vIGNoZWNrIHdoZXRoZXIgYSBnaXZlbiBlbmdpbmUgaXMgc2NoZWR1bGVkXG4gIGhhcyhlbmdpbmUpIHtcbiAgICByZXR1cm4gdGhpcy5fX2VuZ2luZXMuaGFzKGVuZ2luZSk7XG4gIH1cblxuICAvLyBjbGVhciBxdWV1ZVxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9fcXVldWUuY2xlYXIoKTtcbiAgICB0aGlzLl9fZW5naW5lcy5jbGVhcigpO1xuICAgIHRoaXMucmVzZXRUaW1lKEluZmluaXR5KTtcbiAgfVxufVxuIl19//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 35 */
/***/ (function(module, exports) {

eval("module.exports = function(it, Constructor, name, forbiddenField){\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcz9lNGQ2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1pbnN0YW5jZS5qc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx      = __webpack_require__(19)\n  , IObject  = __webpack_require__(39)\n  , toObject = __webpack_require__(31)\n  , toLength = __webpack_require__(49)\n  , asc      = __webpack_require__(101);\nmodule.exports = function(TYPE, $create){\n  var IS_MAP        = TYPE == 1\n    , IS_FILTER     = TYPE == 2\n    , IS_SOME       = TYPE == 3\n    , IS_EVERY      = TYPE == 4\n    , IS_FIND_INDEX = TYPE == 6\n    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX\n    , create        = $create || asc;\n  return function($this, callbackfn, that){\n    var O      = toObject($this)\n      , self   = IObject(O)\n      , f      = ctx(callbackfn, that, 3)\n      , length = toLength(self.length)\n      , index  = 0\n      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined\n      , val, res;\n    for(;length > index; index++)if(NO_HOLES || index in self){\n      val = self[index];\n      res = f(val, index, O);\n      if(TYPE){\n        if(IS_MAP)result[index] = res;            // map\n        else if(res)switch(TYPE){\n          case 3: return true;                    // some\n          case 5: return val;                     // find\n          case 6: return index;                   // findIndex\n          case 2: result.push(val);               // filter\n        } else if(IS_EVERY)return false;          // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzP2RlNzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgYXNjICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXtcbiAgdmFyIElTX01BUCAgICAgICAgPSBUWVBFID09IDFcbiAgICAsIElTX0ZJTFRFUiAgICAgPSBUWVBFID09IDJcbiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDNcbiAgICAsIElTX0VWRVJZICAgICAgPSBUWVBFID09IDRcbiAgICAsIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDZcbiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWFxuICAgICwgY3JlYXRlICAgICAgICA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpe1xuICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcylcbiAgICAgICwgc2VsZiAgID0gSU9iamVjdChPKVxuICAgICAgLCBmICAgICAgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDBcbiAgICAgICwgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZFxuICAgICAgLCB2YWwsIHJlcztcbiAgICBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpe1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYoVFlQRSl7XG4gICAgICAgIGlmKElTX01BUClyZXN1bHRbaW5kZXhdID0gcmVzOyAgICAgICAgICAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZihJU19FVkVSWSlyZXR1cm4gZmFsc2U7ICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qc1xuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanM/NDhlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 38 */
/***/ (function(module, exports) {

eval("// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzPzc1OTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

eval("// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(37);\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzPzVjZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar LIBRARY        = __webpack_require__(41)\n  , $export        = __webpack_require__(12)\n  , redefine       = __webpack_require__(45)\n  , hide           = __webpack_require__(14)\n  , has            = __webpack_require__(13)\n  , Iterators      = __webpack_require__(20)\n  , $iterCreate    = __webpack_require__(109)\n  , setToStringTag = __webpack_require__(30)\n  , getPrototypeOf = __webpack_require__(69)\n  , ITERATOR       = __webpack_require__(3)('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcz85YTk0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgJGl0ZXJDcmVhdGUgICAgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBJVEVSQVRPUiAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQlVHR1kgICAgICAgICAgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSkgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXG4gICwgS0VZUyAgICAgICAgICAgPSAna2V5cydcbiAgLCBWQUxVRVMgICAgICAgICA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGtpbmQpe1xuICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2goa2luZCl7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcbiAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFU1xuICAgICwgVkFMVUVTX0JVRyA9IGZhbHNlXG4gICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcbiAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF1cbiAgICAsICRkZWZhdWx0ICAgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKVxuICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWRcbiAgICAsICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlXG4gICAgLCBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmKCRhbnlOYXRpdmUpe1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKSk7XG4gICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpe1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKXtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZigoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSl7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzO1xuICBpZihERUZBVUxUKXtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiAgICBJU19TRVQgICAgID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKWZvcihrZXkgaW4gbWV0aG9kcyl7XG4gICAgICBpZighKGtleSBpbiBwcm90bykpcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 41 */
/***/ (function(module, exports) {

eval("module.exports = true;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzPzJjODAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

eval("var pIE            = __webpack_require__(28)\n  , createDesc     = __webpack_require__(29)\n  , toIObject      = __webpack_require__(15)\n  , toPrimitive    = __webpack_require__(50)\n  , has            = __webpack_require__(13)\n  , IE8_DOM_DEFINE = __webpack_require__(65)\n  , gOPD           = Object.getOwnPropertyDescriptor;\n\nexports.f = __webpack_require__(5) ? gOPD : function getOwnPropertyDescriptor(O, P){\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if(IE8_DOM_DEFINE)try {\n    return gOPD(O, P);\n  } catch(e){ /* empty */ }\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcz9kN2Q4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzXG4vLyBtb2R1bGUgaWQgPSA0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 43 */
/***/ (function(module, exports) {

eval("exports.f = Object.getOwnPropertySymbols;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcz9hNWZiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qc1xuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

eval("var hide = __webpack_require__(14);\nmodule.exports = function(target, src, safe){\n  for(var key in src){\n    if(safe && target[key])target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS1hbGwuanM/YzcyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpe1xuICBmb3IodmFyIGtleSBpbiBzcmMpe1xuICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qc1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(14);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcz8xNDU1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

eval("var shared = __webpack_require__(47)('keys')\n  , uid    = __webpack_require__(32);\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzPzJhNmMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

eval("var global = __webpack_require__(6)\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanM/N2I2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 48 */
/***/ (function(module, exports) {

eval("// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzP2Y2NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.15 ToLength\nvar toInteger = __webpack_require__(48)\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanM/NjJhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qc1xuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(11);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanM/NDlhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXtcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

eval("var global         = __webpack_require__(6)\n  , core           = __webpack_require__(0)\n  , LIBRARY        = __webpack_require__(41)\n  , wksExt         = __webpack_require__(52)\n  , defineProperty = __webpack_require__(7).f;\nmodule.exports = function(name){\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzP2I2ZTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZihuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKWRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHt2YWx1ZTogd2tzRXh0LmYobmFtZSl9KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.f = __webpack_require__(3);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzPzZlZTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 53 */
/***/ (function(module, exports) {

eval("//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar $at  = __webpack_require__(116)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(40)(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanM/ZmUxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGF0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwgaW5kZXggPSB0aGlzLl9pXG4gICAgLCBwb2ludDtcbiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTtcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// works by reference\nfunction swap(arr, i1, i2) {\n  var tmp = arr[i1];\n  arr[i1] = arr[i2];\n  arr[i2] = tmp;\n}\n\n// https://jsperf.com/js-for-loop-vs-array-indexof/346\nfunction indexOf(arr, el) {\n  var l = arr.length;\n  // ignore first element as it can't be a entry\n  for (var i = 1; i < l; i++) {\n    if (arr[i] === el) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Define if `time1` should be lower in the topography than `time2`.\n * Is dynamically affected to the priority queue according to handle `min` and `max` heap.\n * @param {Number} time1\n * @param {Number} time2\n * @return {Boolean}\n */\nvar _isLowerMaxHeap = function _isLowerMaxHeap(time1, time2) {\n  return time1 < time2;\n};\n\nvar _isLowerMinHeap = function _isLowerMinHeap(time1, time2) {\n  return time1 > time2;\n};\n\n/**\n * Define if `time1` should be higher in the topography than `time2`.\n * Is dynamically affected to the priority queue according to handle `min` and `max` heap.\n * @param {Number} time1\n * @param {Number} time2\n * @return {Boolean}\n */\nvar _isHigherMaxHeap = function _isHigherMaxHeap(time1, time2) {\n  return time1 > time2;\n};\n\nvar _isHigherMinHeap = function _isHigherMinHeap(time1, time2) {\n  return time1 < time2;\n};\n\nvar POSITIVE_INFINITY = Number.POSITIVE_INFINITY;\n\n/**\n * Priority queue implementing a binary heap.\n * Acts as a min heap by default, can be dynamically changed to a max heap by setting `reverse` to true.\n */\n\nvar PriorityQueue = function () {\n  /**\n   * @param {String} [accessor='time'] - The attribute of the entries that should be used as the priority value. This attribute must be a number.\n   * @param {Number} [heapLength=100] - The size of the array used to create the heap.\n   */\n\n  function PriorityQueue() {\n    var heapLength = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0];\n    (0, _classCallCheck3.default)(this, PriorityQueue);\n\n    /**\n     * @type {Number}\n     * A pointer to the first empty index of the heap.\n     */\n    this._currentLength = 1;\n\n    /**\n     * An array of the sorted indexes of the entries, the actual heap. Ignore the index 0.\n     * @type {Array}\n     */\n    this._heap = new Array(heapLength + 1);\n\n    /**\n     * Define the type of the queue: `min` heap if `false`, `max` heap if `true`\n     * @type {Boolean}\n     */\n    this._reverse = null;\n\n    // initialize compare functions\n    this.reverse = false;\n  }\n\n  /**\n   * Return the time of the first element in the binary heap.\n   * @returns {Number}\n   */\n\n\n  (0, _createClass3.default)(PriorityQueue, [{\n    key: \"_bubbleUp\",\n\n\n    /**\n     * Fix the heap by moving an entry to a new upper position.\n     * @param {Number} startIndex - The index of the entry to move.\n     */\n    value: function _bubbleUp(startIndex) {\n      var entry = this._heap[startIndex];\n\n      var index = startIndex;\n      var parentIndex = Math.floor(index / 2);\n      var parent = this._heap[parentIndex];\n\n      while (parent && this._isHigher(entry.queueTime, parent.queueTime)) {\n        swap(this._heap, index, parentIndex);\n\n        index = parentIndex;\n        parentIndex = Math.floor(index / 2);\n        parent = this._heap[parentIndex];\n      }\n    }\n\n    /**\n     * Fix the heap by moving an entry to a new lower position.\n     * @param {Number} startIndex - The index of the entry to move.\n     */\n\n  }, {\n    key: \"_bubbleDown\",\n    value: function _bubbleDown(startIndex) {\n      var entry = this._heap[startIndex];\n\n      var index = startIndex;\n      var c1index = index * 2;\n      var c2index = c1index + 1;\n      var child1 = this._heap[c1index];\n      var child2 = this._heap[c2index];\n\n      while (child1 && this._isLower(entry.queueTime, child1.queueTime) || child2 && this._isLower(entry.queueTime, child2.queueTime)) {\n        // swap with the minimum child\n        var targetIndex = void 0;\n\n        if (child2) targetIndex = this._isHigher(child1.queueTime, child2.queueTime) ? c1index : c2index;else targetIndex = c1index;\n\n        swap(this._heap, index, targetIndex);\n\n        // update to find next children\n        index = targetIndex;\n        c1index = index * 2;\n        c2index = c1index + 1;\n        child1 = this._heap[c1index];\n        child2 = this._heap[c2index];\n      }\n    }\n\n    /**\n     * Build the heap from bottom up.\n     */\n\n  }, {\n    key: \"buildHeap\",\n    value: function buildHeap() {\n      // find the index of the last internal node\n      // @todo - make sure that's the right way to do.\n      var maxIndex = Math.floor((this._currentLength - 1) / 2);\n\n      for (var i = maxIndex; i > 0; i--) {\n        this._bubbleDown(i);\n      }\n    }\n\n    /**\n     * Insert a new object in the binary heap, and sort it.\n     * @param {Object} entry - Entry to insert.\n     * @param {Number} time - Time at which the entry should be orderer.\n     * @returns {Number} - Time of the first entry in the heap.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(entry, time) {\n      if (Math.abs(time) !== POSITIVE_INFINITY) {\n        entry.queueTime = time;\n        // add the new entry at the end of the heap\n        this._heap[this._currentLength] = entry;\n        // bubble it up\n        this._bubbleUp(this._currentLength);\n        this._currentLength += 1;\n\n        return this.time;\n      }\n\n      entry.queueTime = undefined;\n      return this.remove(entry);\n    }\n\n    /**\n     * Move an entry to a new position.\n     * @param {Object} entry - Entry to move.\n     * @param {Number} time - Time at which the entry should be orderer.\n     * @return {Number} - Time of first entry in the heap.\n     */\n\n  }, {\n    key: \"move\",\n    value: function move(entry, time) {\n      if (Math.abs(time) !== POSITIVE_INFINITY) {\n        var index = indexOf(this._heap, entry);\n\n        if (index !== -1) {\n          entry.queueTime = time;\n          // define if the entry should be bubbled up or down\n          var parent = this._heap[Math.floor(index / 2)];\n\n          if (parent && this._isHigher(time, parent.queueTime)) this._bubbleUp(index);else this._bubbleDown(index);\n        }\n\n        return this.time;\n      }\n\n      entry.queueTime = undefined;\n      return this.remove(entry);\n    }\n\n    /**\n     * This is broken, assuming bubbling down only is false\n     * Remove an entry from the heap and fix the heap.\n     * @param {Object} entry - Entry to remove.\n     * @return {Number} - Time of first entry in the heap.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(entry) {\n      // find the index of the entry\n      var index = indexOf(this._heap, entry);\n\n      if (index !== -1) {\n        var lastIndex = this._currentLength - 1;\n\n        // if the entry is the last one\n        if (index === lastIndex) {\n          // remove the element from heap\n          this._heap[lastIndex] = undefined;\n          // update current length\n          this._currentLength = lastIndex;\n\n          return this.time;\n        } else {\n          // swap with the last element of the heap\n          swap(this._heap, index, lastIndex);\n          // remove the element from heap\n          this._heap[lastIndex] = undefined;\n\n          if (index === 1) {\n            this._bubbleDown(1);\n          } else {\n            // bubble the (ex last) element up or down according to its new context\n            var _entry = this._heap[index];\n            var parent = this._heap[Math.floor(index / 2)];\n\n            if (parent && this._isHigher(_entry.queueTime, parent.queueTime)) this._bubbleUp(index);else this._bubbleDown(index);\n          }\n        }\n\n        // update current length\n        this._currentLength = lastIndex;\n      }\n\n      return this.time;\n    }\n\n    /**\n     * Clear the queue.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._currentLength = 1;\n      this._heap = new Array(this._heap.length);\n    }\n  }, {\n    key: \"has\",\n    value: function has(entry) {\n      return this._heap.indexOf(entry) !== -1;\n    }\n  }, {\n    key: \"time\",\n    get: function get() {\n      if (this._currentLength > 1) return this._heap[1].queueTime;\n\n      return Infinity;\n    }\n\n    /**\n     * Returns the entry of the first element in the binary heap.\n     * @returns {Number}\n     */\n\n  }, {\n    key: \"head\",\n    get: function get() {\n      return this._heap[1];\n    }\n\n    /**\n     * Change the order of the queue, rebuild the heap with the existing entries.\n     * @type {Boolean}\n     */\n\n  }, {\n    key: \"reverse\",\n    set: function set(value) {\n      if (value !== this._reverse) {\n        this._reverse = value;\n\n        if (this._reverse === true) {\n          this._isLower = _isLowerMaxHeap;\n          this._isHigher = _isHigherMaxHeap;\n        } else {\n          this._isLower = _isLowerMinHeap;\n          this._isHigher = _isHigherMinHeap;\n        }\n\n        this.buildHeap();\n      }\n    },\n    get: function get() {\n      return this._reverse;\n    }\n  }]);\n  return PriorityQueue;\n}();\n\nexports.default = PriorityQueue;\n//# sourceMappingURL=data:application/json;base64,# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSimpleScheduler = exports.getScheduler = undefined;\n\nvar _weakMap = __webpack_require__(85);\n\nvar _weakMap2 = _interopRequireDefault(_weakMap);\n\nvar _audioContext = __webpack_require__(16);\n\nvar _audioContext2 = _interopRequireDefault(_audioContext);\n\nvar _scheduler = __webpack_require__(74);\n\nvar _scheduler2 = _interopRequireDefault(_scheduler);\n\nvar _simpleScheduler = __webpack_require__(75);\n\nvar _simpleScheduler2 = _interopRequireDefault(_simpleScheduler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar schedulerMap = new _weakMap2.default(); // schedulers should be singletons\n\nvar simpleSchedulerMap = new _weakMap2.default();\n\n// scheduler factory\nvar getScheduler = exports.getScheduler = function getScheduler() {\n  var audioContext = arguments.length <= 0 || arguments[0] === undefined ? _audioContext2.default : arguments[0];\n\n  var scheduler = schedulerMap.get(audioContext);\n\n  if (!scheduler) {\n    scheduler = new _scheduler2.default({ audioContext: audioContext });\n    schedulerMap.set(audioContext, scheduler);\n  }\n\n  return scheduler;\n};\n\nvar getSimpleScheduler = exports.getSimpleScheduler = function getSimpleScheduler() {\n  var audioContext = arguments.length <= 0 || arguments[0] === undefined ? _audioContext2.default : arguments[0];\n\n  var simpleScheduler = simpleSchedulerMap.get(audioContext);\n\n  if (!simpleScheduler) {\n    simpleScheduler = new _simpleScheduler2.default({ audioContext: audioContext });\n    simpleSchedulerMap.set(audioContext, simpleScheduler);\n  }\n\n  return simpleScheduler;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhY3Rvcmllcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTSxlQUFlLHVCQUFmOztBQUNOLElBQU0scUJBQXFCLHVCQUFyQjs7O0FBR0MsSUFBTSxzQ0FBZSxTQUFmLFlBQWUsR0FBNkM7TUFBcEMsMkdBQW9DOztBQUN2RSxNQUFJLFlBQVksYUFBYSxHQUFiLENBQWlCLFlBQWpCLENBQVosQ0FEbUU7O0FBR3ZFLE1BQUksQ0FBQyxTQUFELEVBQVk7QUFDZCxnQkFBWSx3QkFBYyxFQUFFLGNBQWMsWUFBZCxFQUFoQixDQUFaLENBRGM7QUFFZCxpQkFBYSxHQUFiLENBQWlCLFlBQWpCLEVBQStCLFNBQS9CLEVBRmM7R0FBaEI7O0FBS0EsU0FBTyxTQUFQLENBUnVFO0NBQTdDOztBQVdyQixJQUFNLGtEQUFxQixTQUFyQixrQkFBcUIsR0FBNkM7TUFBcEMsMkdBQW9DOztBQUM3RSxNQUFJLGtCQUFrQixtQkFBbUIsR0FBbkIsQ0FBdUIsWUFBdkIsQ0FBbEIsQ0FEeUU7O0FBRzdFLE1BQUksQ0FBQyxlQUFELEVBQWtCO0FBQ3BCLHNCQUFrQiw4QkFBb0IsRUFBRSxjQUFjLFlBQWQsRUFBdEIsQ0FBbEIsQ0FEb0I7QUFFcEIsdUJBQW1CLEdBQW5CLENBQXVCLFlBQXZCLEVBQXFDLGVBQXJDLEVBRm9CO0dBQXRCOztBQUtBLFNBQU8sZUFBUCxDQVI2RTtDQUE3QyIsImZpbGUiOiJmYWN0b3JpZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzY2hlZHVsZXJzIHNob3VsZCBiZSBzaW5nbGV0b25zXG5pbXBvcnQgZGVmYXVsdEF1ZGlvQ29udGV4dCBmcm9tICcuLi9jb3JlL2F1ZGlvLWNvbnRleHQnO1xuaW1wb3J0IFNjaGVkdWxlciBmcm9tICcuL3NjaGVkdWxlcic7XG5pbXBvcnQgU2ltcGxlU2NoZWR1bGVyIGZyb20gJy4vc2ltcGxlLXNjaGVkdWxlcic7XG5cbmNvbnN0IHNjaGVkdWxlck1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBzaW1wbGVTY2hlZHVsZXJNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG4vLyBzY2hlZHVsZXIgZmFjdG9yeVxuZXhwb3J0IGNvbnN0IGdldFNjaGVkdWxlciA9IGZ1bmN0aW9uKGF1ZGlvQ29udGV4dCA9IGRlZmF1bHRBdWRpb0NvbnRleHQpIHtcbiAgbGV0IHNjaGVkdWxlciA9IHNjaGVkdWxlck1hcC5nZXQoYXVkaW9Db250ZXh0KTtcblxuICBpZiAoIXNjaGVkdWxlcikge1xuICAgIHNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIoeyBhdWRpb0NvbnRleHQ6IGF1ZGlvQ29udGV4dCB9KTtcbiAgICBzY2hlZHVsZXJNYXAuc2V0KGF1ZGlvQ29udGV4dCwgc2NoZWR1bGVyKTtcbiAgfVxuXG4gIHJldHVybiBzY2hlZHVsZXI7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2ltcGxlU2NoZWR1bGVyID0gZnVuY3Rpb24oYXVkaW9Db250ZXh0ID0gZGVmYXVsdEF1ZGlvQ29udGV4dCkge1xuICBsZXQgc2ltcGxlU2NoZWR1bGVyID0gc2ltcGxlU2NoZWR1bGVyTWFwLmdldChhdWRpb0NvbnRleHQpO1xuXG4gIGlmICghc2ltcGxlU2NoZWR1bGVyKSB7XG4gICAgc2ltcGxlU2NoZWR1bGVyID0gbmV3IFNpbXBsZVNjaGVkdWxlcih7IGF1ZGlvQ29udGV4dDogYXVkaW9Db250ZXh0IH0pO1xuICAgIHNpbXBsZVNjaGVkdWxlck1hcC5zZXQoYXVkaW9Db250ZXh0LCBzaW1wbGVTY2hlZHVsZXIpO1xuICB9XG5cbiAgcmV0dXJuIHNpbXBsZVNjaGVkdWxlcjtcbn07XG4iXX0=//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dhdmVzLWF1ZGlvL2Rpc3QvbWFzdGVycy9mYWN0b3JpZXMuanM/ZDk2MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFNpbXBsZVNjaGVkdWxlciA9IGV4cG9ydHMuZ2V0U2NoZWR1bGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX3dlYWtNYXAgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvd2Vhay1tYXAnKTtcblxudmFyIF93ZWFrTWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dlYWtNYXApO1xuXG52YXIgX2F1ZGlvQ29udGV4dCA9IHJlcXVpcmUoJy4uL2NvcmUvYXVkaW8tY29udGV4dCcpO1xuXG52YXIgX2F1ZGlvQ29udGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdWRpb0NvbnRleHQpO1xuXG52YXIgX3NjaGVkdWxlciA9IHJlcXVpcmUoJy4vc2NoZWR1bGVyJyk7XG5cbnZhciBfc2NoZWR1bGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NjaGVkdWxlcik7XG5cbnZhciBfc2ltcGxlU2NoZWR1bGVyID0gcmVxdWlyZSgnLi9zaW1wbGUtc2NoZWR1bGVyJyk7XG5cbnZhciBfc2ltcGxlU2NoZWR1bGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZVNjaGVkdWxlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzY2hlZHVsZXJNYXAgPSBuZXcgX3dlYWtNYXAyLmRlZmF1bHQoKTsgLy8gc2NoZWR1bGVycyBzaG91bGQgYmUgc2luZ2xldG9uc1xuXG52YXIgc2ltcGxlU2NoZWR1bGVyTWFwID0gbmV3IF93ZWFrTWFwMi5kZWZhdWx0KCk7XG5cbi8vIHNjaGVkdWxlciBmYWN0b3J5XG52YXIgZ2V0U2NoZWR1bGVyID0gZXhwb3J0cy5nZXRTY2hlZHVsZXIgPSBmdW5jdGlvbiBnZXRTY2hlZHVsZXIoKSB7XG4gIHZhciBhdWRpb0NvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyBfYXVkaW9Db250ZXh0Mi5kZWZhdWx0IDogYXJndW1lbnRzWzBdO1xuXG4gIHZhciBzY2hlZHVsZXIgPSBzY2hlZHVsZXJNYXAuZ2V0KGF1ZGlvQ29udGV4dCk7XG5cbiAgaWYgKCFzY2hlZHVsZXIpIHtcbiAgICBzY2hlZHVsZXIgPSBuZXcgX3NjaGVkdWxlcjIuZGVmYXVsdCh7IGF1ZGlvQ29udGV4dDogYXVkaW9Db250ZXh0IH0pO1xuICAgIHNjaGVkdWxlck1hcC5zZXQoYXVkaW9Db250ZXh0LCBzY2hlZHVsZXIpO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVkdWxlcjtcbn07XG5cbnZhciBnZXRTaW1wbGVTY2hlZHVsZXIgPSBleHBvcnRzLmdldFNpbXBsZVNjaGVkdWxlciA9IGZ1bmN0aW9uIGdldFNpbXBsZVNjaGVkdWxlcigpIHtcbiAgdmFyIGF1ZGlvQ29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IF9hdWRpb0NvbnRleHQyLmRlZmF1bHQgOiBhcmd1bWVudHNbMF07XG5cbiAgdmFyIHNpbXBsZVNjaGVkdWxlciA9IHNpbXBsZVNjaGVkdWxlck1hcC5nZXQoYXVkaW9Db250ZXh0KTtcblxuICBpZiAoIXNpbXBsZVNjaGVkdWxlcikge1xuICAgIHNpbXBsZVNjaGVkdWxlciA9IG5ldyBfc2ltcGxlU2NoZWR1bGVyMi5kZWZhdWx0KHsgYXVkaW9Db250ZXh0OiBhdWRpb0NvbnRleHQgfSk7XG4gICAgc2ltcGxlU2NoZWR1bGVyTWFwLnNldChhdWRpb0NvbnRleHQsIHNpbXBsZVNjaGVkdWxlcik7XG4gIH1cblxuICByZXR1cm4gc2ltcGxlU2NoZWR1bGVyO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVpoWTNSdmNtbGxjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenM3TzBGQlJVRXNTVUZCVFN4bFFVRmxMSFZDUVVGbU96dEJRVU5PTEVsQlFVMHNjVUpCUVhGQ0xIVkNRVUZ5UWpzN08wRkJSME1zU1VGQlRTeHpRMEZCWlN4VFFVRm1MRmxCUVdVc1IwRkJOa003VFVGQmNFTXNNa2RCUVc5RE96dEJRVU4yUlN4TlFVRkpMRmxCUVZrc1lVRkJZU3hIUVVGaUxFTkJRV2xDTEZsQlFXcENMRU5CUVZvc1EwRkViVVU3TzBGQlIzWkZMRTFCUVVrc1EwRkJReXhUUVVGRUxFVkJRVms3UVVGRFpDeG5Ra0ZCV1N4M1FrRkJZeXhGUVVGRkxHTkJRV01zV1VGQlpDeEZRVUZvUWl4RFFVRmFMRU5CUkdNN1FVRkZaQ3hwUWtGQllTeEhRVUZpTEVOQlFXbENMRmxCUVdwQ0xFVkJRU3RDTEZOQlFTOUNMRVZCUm1NN1IwRkJhRUk3TzBGQlMwRXNVMEZCVHl4VFFVRlFMRU5CVW5WRk8wTkJRVGRET3p0QlFWZHlRaXhKUVVGTkxHdEVRVUZ4UWl4VFFVRnlRaXhyUWtGQmNVSXNSMEZCTmtNN1RVRkJjRU1zTWtkQlFXOURPenRCUVVNM1JTeE5RVUZKTEd0Q1FVRnJRaXh0UWtGQmJVSXNSMEZCYmtJc1EwRkJkVUlzV1VGQmRrSXNRMEZCYkVJc1EwRkVlVVU3TzBGQlJ6ZEZMRTFCUVVrc1EwRkJReXhsUVVGRUxFVkJRV3RDTzBGQlEzQkNMSE5DUVVGclFpdzRRa0ZCYjBJc1JVRkJSU3hqUVVGakxGbEJRV1FzUlVGQmRFSXNRMEZCYkVJc1EwRkViMEk3UVVGRmNFSXNkVUpCUVcxQ0xFZEJRVzVDTEVOQlFYVkNMRmxCUVhaQ0xFVkJRWEZETEdWQlFYSkRMRVZCUm05Q08wZEJRWFJDT3p0QlFVdEJMRk5CUVU4c1pVRkJVQ3hEUVZJMlJUdERRVUUzUXlJc0ltWnBiR1VpT2lKbVlXTjBiM0pwWlhNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCelkyaGxaSFZzWlhKeklITm9iM1ZzWkNCaVpTQnphVzVuYkdWMGIyNXpYRzVwYlhCdmNuUWdaR1ZtWVhWc2RFRjFaR2x2UTI5dWRHVjRkQ0JtY205dElDY3VMaTlqYjNKbEwyRjFaR2x2TFdOdmJuUmxlSFFuTzF4dWFXMXdiM0owSUZOamFHVmtkV3hsY2lCbWNtOXRJQ2N1TDNOamFHVmtkV3hsY2ljN1hHNXBiWEJ2Y25RZ1UybHRjR3hsVTJOb1pXUjFiR1Z5SUdaeWIyMGdKeTR2YzJsdGNHeGxMWE5qYUdWa2RXeGxjaWM3WEc1Y2JtTnZibk4wSUhOamFHVmtkV3hsY2sxaGNDQTlJRzVsZHlCWFpXRnJUV0Z3S0NrN1hHNWpiMjV6ZENCemFXMXdiR1ZUWTJobFpIVnNaWEpOWVhBZ1BTQnVaWGNnVjJWaGEwMWhjQ2dwTzF4dVhHNHZMeUJ6WTJobFpIVnNaWElnWm1GamRHOXllVnh1Wlhod2IzSjBJR052Ym5OMElHZGxkRk5qYUdWa2RXeGxjaUE5SUdaMWJtTjBhVzl1S0dGMVpHbHZRMjl1ZEdWNGRDQTlJR1JsWm1GMWJIUkJkV1JwYjBOdmJuUmxlSFFwSUh0Y2JpQWdiR1YwSUhOamFHVmtkV3hsY2lBOUlITmphR1ZrZFd4bGNrMWhjQzVuWlhRb1lYVmthVzlEYjI1MFpYaDBLVHRjYmx4dUlDQnBaaUFvSVhOamFHVmtkV3hsY2lrZ2UxeHVJQ0FnSUhOamFHVmtkV3hsY2lBOUlHNWxkeUJUWTJobFpIVnNaWElvZXlCaGRXUnBiME52Ym5SbGVIUTZJR0YxWkdsdlEyOXVkR1Y0ZENCOUtUdGNiaUFnSUNCelkyaGxaSFZzWlhKTllYQXVjMlYwS0dGMVpHbHZRMjl1ZEdWNGRDd2djMk5vWldSMWJHVnlLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ6WTJobFpIVnNaWEk3WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1oyVjBVMmx0Y0d4bFUyTm9aV1IxYkdWeUlEMGdablZ1WTNScGIyNG9ZWFZrYVc5RGIyNTBaWGgwSUQwZ1pHVm1ZWFZzZEVGMVpHbHZRMjl1ZEdWNGRDa2dlMXh1SUNCc1pYUWdjMmx0Y0d4bFUyTm9aV1IxYkdWeUlEMGdjMmx0Y0d4bFUyTm9aV1IxYkdWeVRXRndMbWRsZENoaGRXUnBiME52Ym5SbGVIUXBPMXh1WEc0Z0lHbG1JQ2doYzJsdGNHeGxVMk5vWldSMWJHVnlLU0I3WEc0Z0lDQWdjMmx0Y0d4bFUyTm9aV1IxYkdWeUlEMGdibVYzSUZOcGJYQnNaVk5qYUdWa2RXeGxjaWg3SUdGMVpHbHZRMjl1ZEdWNGREb2dZWFZrYVc5RGIyNTBaWGgwSUgwcE8xeHVJQ0FnSUhOcGJYQnNaVk5qYUdWa2RXeGxjazFoY0M1elpYUW9ZWFZrYVc5RGIyNTBaWGgwTENCemFXMXdiR1ZUWTJobFpIVnNaWElwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhOcGJYQnNaVk5qYUdWa2RXeGxjanRjYm4wN1hHNGlYWDA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3dhdmVzLWF1ZGlvL2Rpc3QvbWFzdGVycy9mYWN0b3JpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("\n\n//Hardcoded defaults\n\nconst RangeValues = {\n    speed: { min: 0.5, max: 4 },\n    periodAbs: { min: 0.001, max: 1 },\n    periodRel: { min: 0, max: 1 },\n    periodVar: { min: 0, max: 1 },\n    position: { min: 0, max: 1 },\n    positionVar: { min: 0, max: 1 },\n    durationAbs: { min: 0, max: 1 },\n    durationRel: { min: 0, max: 1 },\n    attackAbs: { min: 0, max: 1 },\n    attackRel: { min: 0, max: 1 },\n    releaseAbs: { min: 0, max: 1 },\n    releaseRel: { min: 0, max: 1 },\n    expRampOffset: { min: 0, max: 1 },\n    resampling: { min: -2400, max: 2400 },\n    resamplingVar: { min: -2400, max: 2400 },\n    gain: { min: 0, max: 1 }\n};\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = RangeValues;\n\n\n//good at speed around 0.75\n// set durationAbs = releaseAbs,\n// for best results\nconst GrainDefs_Piano96k = {\n    periodAbs: 0.02,\n    periodRel: 0.35,\n    periodVar: 0.03,\n    position: 1.0,\n    positionVar: 0.0,\n    durationAbs: 0.15,\n    durationRel: 1.0,\n    attackAbs: 1.0,\n    attackRel: 0.84,\n    releaseAbs: 0.15,\n    releaseRel: 1.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.29,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Piano96k */\n\n\nconst GrainDefs_Piano96k_downsampled44k = {\n    periodAbs: 0.01,\n    periodRel: 0.02,\n    periodVar: 0.00,\n    position: 1.0,\n    positionVar: 0.01,\n    durationAbs: 1.0,\n    durationRel: 0.0,\n    attackAbs: 0.91,\n    attackRel: 0.69,\n    releaseAbs: 0.76,\n    releaseRel: 1.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 1200,\n    gain: 0.29,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Piano96k_downsampled44k */\n\n\n/* Burkig. men minskar när durationRel (150->) ökar.\nsamtidigt måste periodAbs minska, annars\nblir ljudet tyst.*/\nconst GrainDefs_EXFUCKINGSTREAM = {\n    speed: 0.5,\n    periodAbs: 0.001,\n    periodRel: 0.0,\n    periodVar: 0.0,\n    position: 1.0,\n    positionVar: 0.01,\n    durationAbs: 0.001,\n    durationRel: 140, /*!!!!!!!!!!!*/\n    attackAbs: 0.12,\n    attackRel: 4.0,\n    releaseAbs: 1.0,\n    releaseRel: 0.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.005,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_EXFUCKINGSTREAM */\n\n\n/* Nice 0.75-> */\n/* Smearing percussions when too slow */\nconst GrainDefs_OkDefault = {\n    speed: 0.5,\n    periodAbs: 0.011,\n    periodRel: 0.0,\n    periodVar: 0.0,\n    position: 0.0,\n    positionVar: 0.01,\n    durationAbs: 0.04,\n    durationRel: 8, /*!!!!!!!!!!!*/\n    attackAbs: 0.0,\n    attackRel: 10.0,\n    releaseAbs: 4.0,\n    releaseRel: 0.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.005,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_OkDefault */\n\n\n/* Nice 0.5-> */\n/* sharp drums */\nconst GrainDefs_OkSlow = {\n    speed: 0.5,\n    periodAbs: 0.005,\n    periodRel: 0.0,\n    periodVar: 0.0,\n    position: 1.0,\n    positionVar: 0.005,\n    durationAbs: 0.00,\n    durationRel: 20, /*!!!!!!!!!!!*/\n    attackAbs: 30.0,\n    attackRel: 1.0,\n    releaseAbs: 8.0,\n    releaseRel: 0.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.005,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_OkSlow */\n\n\n/* Increase durationRel as high as CPU tolerates */\n/* Burkljudet försvinner med öakt durationRel */\nconst GrainDefs_Allround = {\n    speed: 0.5,\n    periodAbs: 0.005,\n    periodRel: 0.01,\n    periodVar: 0.0,\n    position: 0.0,\n    positionVar: 0.01,\n    durationAbs: 0.00,\n    durationRel: 70, /*!!!!!!!!!!!*/\n    attackAbs: 1.0,\n    attackRel: 2.0,\n    releaseAbs: 4.0,\n    releaseRel: 0.01,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.005,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Allround */\n\n\nconst GrainDefs_SuperCleanHalfSpeed = {\n    speed: 0.5,\n    periodAbs: 0.0003,\n    periodRel: 10,\n    periodVar: 0.0,\n    position: 0.0,\n    positionVar: 0.001,\n    durationAbs: 0.005,\n    durationRel: 20, /*!!!!!!!!!!!*/\n    attackAbs: 0.01,\n    attackRel: 0.0,\n    releaseAbs: 0.0,\n    releaseRel: 1.00,\n    releaseShape: 'lin',\n    expRampOffset: 0.0000,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.23,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_SuperCleanHalfSpeed */\n\n\n//PlayAtSpeed 2.0\nconst GrainDefs_Piano192k_downsampled44k2 = {\n    speed: 2.0,\n    periodAbs: 0.011,\n    periodRel: 0.022,\n    periodVar: 0.0,\n    position: 1.0,\n    positionVar: 0.0,\n    durationAbs: 1.0,\n    durationRel: 0.0,\n    attackAbs: 0.91,\n    attackRel: 0.69,\n    releaseAbs: 0.76,\n    releaseRel: 1.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 1200,\n    resamplingVar: 0,\n    gain: 0.03,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Piano192k_downsampled44k2 */\n\n\n//PlayAtSpeed 2.0\nconst GrainDefs_Piano192k_downsampled44k2b = {\n    speed: 2.0,\n    periodAbs: 0.061,\n    periodRel: 0.0,\n    periodVar: 0.013,\n    position: 1.0,\n    positionVar: 0.0,\n    durationAbs: 0.36,\n    durationRel: 2.0,\n    attackAbs: 0.73,\n    attackRel: 0.69,\n    releaseAbs: 2.0,\n    releaseRel: 1.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.06,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Piano192k_downsampled44k2b */\n\n\n//PlayAtSpeed 2.0\nconst GrainDefs_Piano192k_downsampled44k = {\n    speed: 2.0,\n    periodAbs: 0.061,\n    periodRel: 0.0,\n    periodVar: 0.013,\n    position: 1.0,\n    positionVar: 0.0,\n    durationAbs: 0.1,\n    durationRel: 2.0,\n    attackAbs: 0.73,\n    attackRel: 0.69,\n    releaseAbs: 2.0,\n    releaseRel: 1.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.06,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Piano192k_downsampled44k */\n\n\nconst GrainDefs_Strings = {\n    periodAbs: 0.05,\n    periodRel: 0,\n    periodVar: 0,\n    position: 0,\n    positionVar: 0.04,\n    durationAbs: 0.233,\n    durationRel: 0,\n    attackAbs: 0,\n    attackRel: 0.5,\n    releaseAbs: 0,\n    releaseRel: 0.5,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 1,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Strings */\n\n\nconst GrainDefs_Cello2 = {\n    periodAbs: 0.075,\n    periodRel: 0,\n    periodVar: 0,\n    position: 0.26,\n    positionVar: 0.025,\n    durationAbs: 0.353,\n    durationRel: 0.84,\n    attackAbs: 0.95,\n    attackRel: 0.5,\n    releaseAbs: 0.85,\n    releaseRel: 0.14,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 1,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Cello2 */\n\n\nconst GrainDefs_Cello1 = {\n    periodAbs: 0.09,\n    periodRel: 0,\n    periodVar: 0,\n    position: 0.0,\n    positionVar: 0.0,\n    durationAbs: 0.15,\n    durationRel: 0.99,\n    attackAbs: 0.79,\n    attackRel: 1.0,\n    releaseAbs: 0.82,\n    releaseRel: 0.4,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.31,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Cello1 */\n\n\nconst GrainDefs_Cello = {\n    speed: 1.0,\n    periodAbs: 0.09,\n    periodRel: 0.09,\n    periodVar: 0.22,\n    position: 0.0,\n    positionVar: 0.0,\n    durationAbs: 0.15,\n    durationRel: 1.0,\n    attackAbs: 0.91,\n    attackRel: 0.69,\n    releaseAbs: 1.0,\n    releaseRel: 1.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.29,\n    centered: true,\n    cyclic: true\n};\n/* harmony export (immutable) */ __webpack_exports__[\"e\"] = GrainDefs_Cello;\n\n\nconst GrainDefs_Mix_Default = {\n    speed: 1.0,\n    periodAbs: 0.003,\n    periodRel: 0.0,\n    periodVar: 0.0,\n    position: 0.0,\n    positionVar: 0.005,\n    durationAbs: 0.2,\n    durationRel: 0.0,\n    attackAbs: 1.0,\n    attackRel: 0.0,\n    releaseAbs: 0.0,\n    releaseRel: 4.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.29,\n    centered: true,\n    cyclic: true\n};\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = GrainDefs_Mix_Default;\n\n\nconst GrainDefs_Perc2 = {\n    periodAbs: 0.004,\n    periodRel: 0,\n    periodVar: 0,\n    position: 0,\n    positionVar: 0.001,\n    durationAbs: 0.01,\n    durationRel: 0,\n    attackAbs: 0,\n    attackRel: 0.5,\n    releaseAbs: 0,\n    releaseRel: 0.5,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 1,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Perc2 */\n\n\nconst GrainDefs_Perc1 = {\n    periodAbs: 0.001,\n    periodRel: 0,\n    periodVar: 0.88,\n    position: 1,\n    positionVar: 0.000,\n    durationAbs: 0.13,\n    durationRel: 0,\n    attackAbs: 1,\n    attackRel: 0.15,\n    releaseAbs: 0.02,\n    releaseRel: 0.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 1,\n    centered: true,\n    cyclic: true\n};\n/* unused harmony export GrainDefs_Perc1 */\n\n\nconst GrainDefs_Perc = {\n    periodAbs: 0.09,\n    periodRel: 0,\n    periodVar: 0.0,\n    position: 0,\n    positionVar: 0.000,\n    durationAbs: 0.10,\n    durationRel: 0.82,\n    attackAbs: 1,\n    attackRel: 0.07,\n    releaseAbs: 0.45,\n    releaseRel: 0.0,\n    releaseShape: 'lin',\n    expRampOffset: 0.0001,\n    resampling: 0,\n    resamplingVar: 0,\n    gain: 0.32,\n    centered: true,\n    cyclic: true\n};\n/* harmony export (immutable) */ __webpack_exports__[\"f\"] = GrainDefs_Perc;\n\n\nconst EQ_CELLO = [{\n    f: 32,\n    type: 'lowshelf',\n    value: -40\n}, {\n    f: 64,\n    type: 'peaking',\n    value: 9\n}, {\n    f: 125,\n    type: 'peaking',\n    value: 2\n}, {\n    f: 250,\n    type: 'peaking',\n    value: 8\n}, {\n    f: 500,\n    type: 'peaking',\n    value: -14\n}, {\n    f: 1000,\n    type: 'peaking',\n    value: 8\n}, {\n    f: 2000,\n    type: 'peaking',\n    value: -1\n}, {\n    f: 4000,\n    type: 'peaking',\n    value: -1\n}, {\n    f: 8000,\n    type: 'peaking',\n    value: 12\n}, {\n    f: 16000,\n    type: 'highshelf',\n    value: 16\n}];\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = EQ_CELLO;\n\n\nconst EQ_PERCUSSION = [{\n    f: 32,\n    type: 'lowshelf',\n    value: -10\n}, {\n    f: 64,\n    type: 'peaking',\n    value: -15\n}, {\n    f: 125,\n    type: 'peaking',\n    value: 8\n}, {\n    f: 250,\n    type: 'peaking',\n    value: -12\n}, {\n    f: 500,\n    type: 'peaking',\n    value: 0\n}, {\n    f: 1000,\n    type: 'peaking',\n    value: -8\n}, {\n    f: 2000,\n    type: 'peaking',\n    value: 9\n}, {\n    f: 4000,\n    type: 'peaking',\n    value: -1\n}, {\n    f: 8000,\n    type: 'peaking',\n    value: 1\n}, {\n    f: 16000,\n    type: 'highshelf',\n    value: -6\n}];\n/* harmony export (immutable) */ __webpack_exports__[\"d\"] = EQ_PERCUSSION;\n\n\nconst EQ_MIX = [{\n    f: 32,\n    type: 'lowshelf',\n    value: 23\n}, {\n    f: 64,\n    type: 'peaking',\n    value: 12\n}, {\n    f: 125,\n    type: 'peaking',\n    value: 14\n}, {\n    f: 250,\n    type: 'peaking',\n    value: 12\n}, {\n    f: 500,\n    type: 'peaking',\n    value: 5\n}, {\n    f: 1000,\n    type: 'peaking',\n    value: 6\n}, {\n    f: 2000,\n    type: 'peaking',\n    value: 7\n}, {\n    f: 4000,\n    type: 'peaking',\n    value: 8\n}, {\n    f: 8000,\n    type: 'peaking',\n    value: 15\n}, {\n    f: 16000,\n    type: 'highshelf',\n    value: 8\n}];\n/* unused harmony export EQ_MIX */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (a, b) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    if (typeof exports === \"object\") {\n      module.exports = b();\n    } else {\n      a.X2JS = b();\n    }\n  }\n})(this, function () {\n  return function (z) {\n    var t = \"1.2.0\";z = z || {};i();u();function i() {\n      if (z.escapeMode === undefined) {\n        z.escapeMode = true;\n      }z.attributePrefix = z.attributePrefix || \"_\";z.arrayAccessForm = z.arrayAccessForm || \"none\";z.emptyNodeForm = z.emptyNodeForm || \"text\";if (z.enableToStringFunc === undefined) {\n        z.enableToStringFunc = true;\n      }z.arrayAccessFormPaths = z.arrayAccessFormPaths || [];if (z.skipEmptyTextNodesForObj === undefined) {\n        z.skipEmptyTextNodesForObj = true;\n      }if (z.stripWhitespaces === undefined) {\n        z.stripWhitespaces = true;\n      }z.datetimeAccessFormPaths = z.datetimeAccessFormPaths || [];if (z.useDoubleQuotes === undefined) {\n        z.useDoubleQuotes = false;\n      }z.xmlElementsFilter = z.xmlElementsFilter || [];z.jsonPropertiesFilter = z.jsonPropertiesFilter || [];if (z.keepCData === undefined) {\n        z.keepCData = false;\n      }\n    }var h = { ELEMENT_NODE: 1, TEXT_NODE: 3, CDATA_SECTION_NODE: 4, COMMENT_NODE: 8, DOCUMENT_NODE: 9 };function u() {}function x(B) {\n      var C = B.localName;if (C == null) {\n        C = B.baseName;\n      }if (C == null || C == \"\") {\n        C = B.nodeName;\n      }return C;\n    }function r(B) {\n      return B.prefix;\n    }function s(B) {\n      if (typeof B == \"string\") {\n        return B.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n      } else {\n        return B;\n      }\n    }function k(B) {\n      return B.replace(/&lt;/g, \"<\").replace(/&gt;/g, \">\").replace(/&quot;/g, '\"').replace(/&apos;/g, \"'\").replace(/&amp;/g, \"&\");\n    }function w(C, F, D, E) {\n      var B = 0;for (; B < C.length; B++) {\n        var G = C[B];if (typeof G === \"string\") {\n          if (G == E) {\n            break;\n          }\n        } else {\n          if (G instanceof RegExp) {\n            if (G.test(E)) {\n              break;\n            }\n          } else {\n            if (typeof G === \"function\") {\n              if (G(F, D, E)) {\n                break;\n              }\n            }\n          }\n        }\n      }return B != C.length;\n    }function n(D, B, C) {\n      switch (z.arrayAccessForm) {case \"property\":\n          if (!(D[B] instanceof Array)) {\n            D[B + \"_asArray\"] = [D[B]];\n          } else {\n            D[B + \"_asArray\"] = D[B];\n          }break;}if (!(D[B] instanceof Array) && z.arrayAccessFormPaths.length > 0) {\n        if (w(z.arrayAccessFormPaths, D, B, C)) {\n          D[B] = [D[B]];\n        }\n      }\n    }function a(G) {\n      var E = G.split(/[-T:+Z]/g);var F = new Date(E[0], E[1] - 1, E[2]);var D = E[5].split(\".\");F.setHours(E[3], E[4], D[0]);if (D.length > 1) {\n        F.setMilliseconds(D[1]);\n      }if (E[6] && E[7]) {\n        var C = E[6] * 60 + Number(E[7]);var B = /\\d\\d-\\d\\d:\\d\\d$/.test(G) ? \"-\" : \"+\";C = 0 + (B == \"-\" ? -1 * C : C);F.setMinutes(F.getMinutes() - C - F.getTimezoneOffset());\n      } else {\n        if (G.indexOf(\"Z\", G.length - 1) !== -1) {\n          F = new Date(Date.UTC(F.getFullYear(), F.getMonth(), F.getDate(), F.getHours(), F.getMinutes(), F.getSeconds(), F.getMilliseconds()));\n        }\n      }return F;\n    }function q(D, B, C) {\n      if (z.datetimeAccessFormPaths.length > 0) {\n        var E = C.split(\".#\")[0];if (w(z.datetimeAccessFormPaths, D, B, E)) {\n          return a(D);\n        } else {\n          return D;\n        }\n      } else {\n        return D;\n      }\n    }function b(E, C, B, D) {\n      if (C == h.ELEMENT_NODE && z.xmlElementsFilter.length > 0) {\n        return w(z.xmlElementsFilter, E, B, D);\n      } else {\n        return true;\n      }\n    }function A(D, J) {\n      if (D.nodeType == h.DOCUMENT_NODE) {\n        var K = new Object();var B = D.childNodes;for (var L = 0; L < B.length; L++) {\n          var C = B.item(L);if (C.nodeType == h.ELEMENT_NODE) {\n            var I = x(C);K[I] = A(C, I);\n          }\n        }return K;\n      } else {\n        if (D.nodeType == h.ELEMENT_NODE) {\n          var K = new Object();K.__cnt = 0;var B = D.childNodes;for (var L = 0; L < B.length; L++) {\n            var C = B.item(L);var I = x(C);if (C.nodeType != h.COMMENT_NODE) {\n              var H = J + \".\" + I;if (b(K, C.nodeType, I, H)) {\n                K.__cnt++;if (K[I] == null) {\n                  K[I] = A(C, H);n(K, I, H);\n                } else {\n                  if (K[I] != null) {\n                    if (!(K[I] instanceof Array)) {\n                      K[I] = [K[I]];n(K, I, H);\n                    }\n                  }K[I][K[I].length] = A(C, H);\n                }\n              }\n            }\n          }for (var E = 0; E < D.attributes.length; E++) {\n            var F = D.attributes.item(E);K.__cnt++;K[z.attributePrefix + F.name] = F.value;\n          }var G = r(D);if (G != null && G != \"\") {\n            K.__cnt++;K.__prefix = G;\n          }if (K[\"#text\"] != null) {\n            K.__text = K[\"#text\"];if (K.__text instanceof Array) {\n              K.__text = K.__text.join(\"\\n\");\n            }if (z.stripWhitespaces) {\n              K.__text = K.__text.trim();\n            }delete K[\"#text\"];if (z.arrayAccessForm == \"property\") {\n              delete K[\"#text_asArray\"];\n            }K.__text = q(K.__text, I, J + \".\" + I);\n          }if (K[\"#cdata-section\"] != null) {\n            K.__cdata = K[\"#cdata-section\"];delete K[\"#cdata-section\"];if (z.arrayAccessForm == \"property\") {\n              delete K[\"#cdata-section_asArray\"];\n            }\n          }if (K.__cnt == 0 && z.emptyNodeForm == \"text\") {\n            K = \"\";\n          } else {\n            if (K.__cnt == 1 && K.__text != null) {\n              K = K.__text;\n            } else {\n              if (K.__cnt == 1 && K.__cdata != null && !z.keepCData) {\n                K = K.__cdata;\n              } else {\n                if (K.__cnt > 1 && K.__text != null && z.skipEmptyTextNodesForObj) {\n                  if (z.stripWhitespaces && K.__text == \"\" || K.__text.trim() == \"\") {\n                    delete K.__text;\n                  }\n                }\n              }\n            }\n          }delete K.__cnt;if (z.enableToStringFunc && (K.__text != null || K.__cdata != null)) {\n            K.toString = function () {\n              return (this.__text != null ? this.__text : \"\") + (this.__cdata != null ? this.__cdata : \"\");\n            };\n          }return K;\n        } else {\n          if (D.nodeType == h.TEXT_NODE || D.nodeType == h.CDATA_SECTION_NODE) {\n            return D.nodeValue;\n          }\n        }\n      }\n    }function o(I, F, H, C) {\n      var E = \"<\" + (I != null && I.__prefix != null ? I.__prefix + \":\" : \"\") + F;if (H != null) {\n        for (var G = 0; G < H.length; G++) {\n          var D = H[G];var B = I[D];if (z.escapeMode) {\n            B = s(B);\n          }E += \" \" + D.substr(z.attributePrefix.length) + \"=\";if (z.useDoubleQuotes) {\n            E += '\"' + B + '\"';\n          } else {\n            E += \"'\" + B + \"'\";\n          }\n        }\n      }if (!C) {\n        E += \">\";\n      } else {\n        E += \"/>\";\n      }return E;\n    }function j(C, B) {\n      return \"</\" + (C.__prefix != null ? C.__prefix + \":\" : \"\") + B + \">\";\n    }function v(C, B) {\n      return C.indexOf(B, C.length - B.length) !== -1;\n    }function y(C, B) {\n      if (z.arrayAccessForm == \"property\" && v(B.toString(), \"_asArray\") || B.toString().indexOf(z.attributePrefix) == 0 || B.toString().indexOf(\"__\") == 0 || C[B] instanceof Function) {\n        return true;\n      } else {\n        return false;\n      }\n    }function m(D) {\n      var C = 0;if (D instanceof Object) {\n        for (var B in D) {\n          if (y(D, B)) {\n            continue;\n          }C++;\n        }\n      }return C;\n    }function l(D, B, C) {\n      return z.jsonPropertiesFilter.length == 0 || C == \"\" || w(z.jsonPropertiesFilter, D, B, C);\n    }function c(D) {\n      var C = [];if (D instanceof Object) {\n        for (var B in D) {\n          if (B.toString().indexOf(\"__\") == -1 && B.toString().indexOf(z.attributePrefix) == 0) {\n            C.push(B);\n          }\n        }\n      }return C;\n    }function g(C) {\n      var B = \"\";if (C.__cdata != null) {\n        B += \"<![CDATA[\" + C.__cdata + \"]]>\";\n      }if (C.__text != null) {\n        if (z.escapeMode) {\n          B += s(C.__text);\n        } else {\n          B += C.__text;\n        }\n      }return B;\n    }function d(C) {\n      var B = \"\";if (C instanceof Object) {\n        B += g(C);\n      } else {\n        if (C != null) {\n          if (z.escapeMode) {\n            B += s(C);\n          } else {\n            B += C;\n          }\n        }\n      }return B;\n    }function p(C, B) {\n      if (C === \"\") {\n        return B;\n      } else {\n        return C + \".\" + B;\n      }\n    }function f(D, G, F, E) {\n      var B = \"\";if (D.length == 0) {\n        B += o(D, G, F, true);\n      } else {\n        for (var C = 0; C < D.length; C++) {\n          B += o(D[C], G, c(D[C]), false);B += e(D[C], p(E, G));B += j(D[C], G);\n        }\n      }return B;\n    }function e(I, H) {\n      var B = \"\";var F = m(I);if (F > 0) {\n        for (var E in I) {\n          if (y(I, E) || H != \"\" && !l(I, E, p(H, E))) {\n            continue;\n          }var D = I[E];var G = c(D);if (D == null || D == undefined) {\n            B += o(D, E, G, true);\n          } else {\n            if (D instanceof Object) {\n              if (D instanceof Array) {\n                B += f(D, E, G, H);\n              } else {\n                if (D instanceof Date) {\n                  B += o(D, E, G, false);B += D.toISOString();B += j(D, E);\n                } else {\n                  var C = m(D);if (C > 0 || D.__text != null || D.__cdata != null) {\n                    B += o(D, E, G, false);B += e(D, p(H, E));B += j(D, E);\n                  } else {\n                    B += o(D, E, G, true);\n                  }\n                }\n              }\n            } else {\n              B += o(D, E, G, false);B += d(D);B += j(D, E);\n            }\n          }\n        }\n      }B += d(I);return B;\n    }this.parseXmlString = function (D) {\n      var F = window.ActiveXObject || \"ActiveXObject\" in window;if (D === undefined) {\n        return null;\n      }var E;if (window.DOMParser) {\n        var G = new window.DOMParser();var B = null;if (!F) {\n          try {\n            B = G.parseFromString(\"INVALID\", \"text/xml\").getElementsByTagName(\"parsererror\")[0].namespaceURI;\n          } catch (C) {\n            B = null;\n          }\n        }try {\n          E = G.parseFromString(D, \"text/xml\");if (B != null && E.getElementsByTagNameNS(B, \"parsererror\").length > 0) {\n            E = null;\n          }\n        } catch (C) {\n          E = null;\n        }\n      } else {\n        if (D.indexOf(\"<?\") == 0) {\n          D = D.substr(D.indexOf(\"?>\") + 2);\n        }E = new ActiveXObject(\"Microsoft.XMLDOM\");E.async = \"false\";E.loadXML(D);\n      }return E;\n    };this.asArray = function (B) {\n      if (B === undefined || B == null) {\n        return [];\n      } else {\n        if (B instanceof Array) {\n          return B;\n        } else {\n          return [B];\n        }\n      }\n    };this.toXmlDateTime = function (B) {\n      if (B instanceof Date) {\n        return B.toISOString();\n      } else {\n        if (typeof B === \"number\") {\n          return new Date(B).toISOString();\n        } else {\n          return null;\n        }\n      }\n    };this.asDateTime = function (B) {\n      if (typeof B == \"string\") {\n        return a(B);\n      } else {\n        return B;\n      }\n    };this.xml2json = function (B) {\n      return A(B);\n    };this.xml_str2json = function (B) {\n      var C = this.parseXmlString(B);if (C != null) {\n        return this.xml2json(C);\n      } else {\n        return null;\n      }\n    };this.json2xml_str = function (B) {\n      return e(B, \"\");\n    };this.json2xml = function (C) {\n      var B = this.json2xml_str(C);return this.parseXmlString(B);\n    };this.getVersion = function () {\n      return t;\n    };\n  };\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(92), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXQuanM/MDcyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc2V0XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXQuanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _getOwnPropertyDescriptor = __webpack_require__(81);\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);\n\n  if (desc === undefined) {\n    var parent = (0, _getPrototypeOf2.default)(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXQuanM/YTMyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpO1xuXG52YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICB2YXIgZGVzYyA9ICgwLCBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMi5kZWZhdWx0KShvYmplY3QsIHByb3BlcnR5KTtcblxuICBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHBhcmVudCA9ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKG9iamVjdCk7XG5cbiAgICBpZiAocGFyZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcbiAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7XG5cbiAgICBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldC5qc1xuLy8gbW9kdWxlIGlkID0gNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _iterator = __webpack_require__(84);\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = __webpack_require__(83);\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanM/ZjRiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

eval("// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(37)\n  , TAG = __webpack_require__(3)('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzP2I0YjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXG4gIC8vIEVTMyB3cm9uZyBoZXJlXG4gICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NsYXNzb2YuanNcbi8vIG1vZHVsZSBpZCA9IDYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar global         = __webpack_require__(6)\n  , $export        = __webpack_require__(12)\n  , meta           = __webpack_require__(21)\n  , fails          = __webpack_require__(17)\n  , hide           = __webpack_require__(14)\n  , redefineAll    = __webpack_require__(44)\n  , forOf          = __webpack_require__(26)\n  , anInstance     = __webpack_require__(35)\n  , isObject       = __webpack_require__(11)\n  , setToStringTag = __webpack_require__(30)\n  , dP             = __webpack_require__(7).f\n  , each           = __webpack_require__(36)(0)\n  , DESCRIPTORS    = __webpack_require__(5);\n\nmodule.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){\n  var Base  = global[NAME]\n    , C     = Base\n    , ADDER = IS_MAP ? 'set' : 'add'\n    , proto = C && C.prototype\n    , O     = {};\n  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){\n    new C().entries().next();\n  }))){\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    C = wrapper(function(target, iterable){\n      anInstance(target, C, NAME, '_c');\n      target._c = new Base;\n      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);\n    });\n    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){\n      var IS_ADDER = KEY == 'add' || KEY == 'set';\n      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){\n        anInstance(this, C, KEY);\n        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;\n        var result = this._c[KEY](a === 0 ? 0 : a, b);\n        return IS_ADDER ? this : result;\n      });\n    });\n    if('size' in proto)dP(C.prototype, 'size', {\n      get: function(){\n        return this._c.size;\n      }\n    });\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F, O);\n\n  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLmpzPzU1YTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgbWV0YSAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJylcbiAgLCBmYWlscyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHJlZGVmaW5lQWxsICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBmb3JPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgYW5JbnN0YW5jZSAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGRQICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGVhY2ggICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApXG4gICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKXtcbiAgdmFyIEJhc2UgID0gZ2xvYmFsW05BTUVdXG4gICAgLCBDICAgICA9IEJhc2VcbiAgICAsIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJ1xuICAgICwgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlXG4gICAgLCBPICAgICA9IHt9O1xuICBpZighREVTQ1JJUFRPUlMgfHwgdHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSl7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRhcmdldCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUsICdfYycpO1xuICAgICAgdGFyZ2V0Ll9jID0gbmV3IEJhc2U7XG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGFyZ2V0W0FEREVSXSwgdGFyZ2V0KTtcbiAgICB9KTtcbiAgICBlYWNoKCdhZGQsY2xlYXIsZGVsZXRlLGZvckVhY2gsZ2V0LGhhcyxzZXQsa2V5cyx2YWx1ZXMsZW50cmllcyx0b0pTT04nLnNwbGl0KCcsJyksZnVuY3Rpb24oS0VZKXtcbiAgICAgIHZhciBJU19BRERFUiA9IEtFWSA9PSAnYWRkJyB8fCBLRVkgPT0gJ3NldCc7XG4gICAgICBpZihLRVkgaW4gcHJvdG8gJiYgIShJU19XRUFLICYmIEtFWSA9PSAnY2xlYXInKSloaWRlKEMucHJvdG90eXBlLCBLRVksIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsIEtFWSk7XG4gICAgICAgIGlmKCFJU19BRERFUiAmJiBJU19XRUFLICYmICFpc09iamVjdChhKSlyZXR1cm4gS0VZID09ICdnZXQnID8gdW5kZWZpbmVkIDogZmFsc2U7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9jW0tFWV0oYSA9PT0gMCA/IDAgOiBhLCBiKTtcbiAgICAgICAgcmV0dXJuIElTX0FEREVSID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKCdzaXplJyBpbiBwcm90bylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9jLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYsIE8pO1xuXG4gIGlmKCFJU19XRUFLKWNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(11)\n  , document = __webpack_require__(6).document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzP2FiNDQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50XG4gIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = !__webpack_require__(5) && !__webpack_require__(17)(function(){\n  return Object.defineProperty(__webpack_require__(64)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcz9iZDFmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(37);\nmodule.exports = Array.isArray || function isArray(arg){\n  return cof(arg) == 'Array';\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcz8xODQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpe1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 67 */
/***/ (function(module, exports) {

eval("module.exports = function(done, value){\n  return {value: value, done: !!done};\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanM/ZTIwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1zdGVwLmpzXG4vLyBtb2R1bGUgaWQgPSA2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys      = __webpack_require__(70)\n  , hiddenKeys = __webpack_require__(38).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\n  return $keys(O, hiddenKeys);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcz8xZTA3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = __webpack_require__(13)\n  , toObject    = __webpack_require__(31)\n  , IE_PROTO    = __webpack_require__(46)('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzP2Q0N2QiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

eval("var has          = __webpack_require__(13)\n  , toIObject    = __webpack_require__(15)\n  , arrayIndexOf = __webpack_require__(99)(false)\n  , IE_PROTO     = __webpack_require__(46)('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcz9mY2VhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBoYXMgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvSU9iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgSUVfUFJPVE8gICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

eval("// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(12)\n  , core    = __webpack_require__(0)\n  , fails   = __webpack_require__(17);\nmodule.exports = function(KEY, exec){\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\n    , exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzP2EwM2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29yZSAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xuICB2YXIgZm4gID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldXG4gICAgLCBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanNcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

eval("var classof   = __webpack_require__(62)\n  , ITERATOR  = __webpack_require__(3)('iterator')\n  , Iterators = __webpack_require__(20);\nmodule.exports = __webpack_require__(0).getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcz85Yzg4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanNcbi8vIG1vZHVsZSBpZCA9IDcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(131);\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window && typeof window.process !== 'undefined' && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document && 'WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window && window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(147)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2RlYnVnL3NyYy9icm93c2VyLmpzPzEzZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cgJiYgdHlwZW9mIHdpbmRvdy5wcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQgJiYgJ1dlYmtpdEFwcGVhcmFuY2UnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdyAmJiB3aW5kb3cuY29uc29sZSAmJiAoY29uc29sZS5maXJlYnVnIHx8IChjb25zb2xlLmV4Y2VwdGlvbiAmJiBjb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2RlYnVnL3NyYy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(9);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _debug = __webpack_require__(73);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _audioContext = __webpack_require__(16);\n\nvar _audioContext2 = _interopRequireDefault(_audioContext);\n\nvar _schedulingQueue = __webpack_require__(34);\n\nvar _schedulingQueue2 = _interopRequireDefault(_schedulingQueue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = (0, _debug2.default)('wavesjs:audio');\n\nvar Scheduler = function (_SchedulingQueue) {\n  (0, _inherits3.default)(Scheduler, _SchedulingQueue);\n\n  function Scheduler() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    (0, _classCallCheck3.default)(this, Scheduler);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Scheduler).call(this));\n\n    _this.audioContext = options.audioContext || _audioContext2.default;\n\n    _this.__currentTime = null;\n    _this.__nextTime = Infinity;\n    _this.__timeout = null;\n\n    /**\n     * scheduler (setTimeout) period\n     * @type {Number}\n     */\n    _this.period = options.period || 0.025;\n\n    /**\n     * scheduler lookahead time (> period)\n     * @type {Number}\n     */\n    _this.lookahead = options.lookahead || 0.1;\n    return _this;\n  }\n\n  // setTimeout scheduling loop\n\n\n  (0, _createClass3.default)(Scheduler, [{\n    key: '__tick',\n    value: function __tick() {\n      var audioContext = this.audioContext;\n      var currentTime = audioContext.currentTime;\n      var time = this.__nextTime;\n\n      this.__timeout = null;\n\n      while (time <= currentTime + this.lookahead) {\n        this.__currentTime = time;\n        time = this.advanceTime(time);\n      }\n\n      this.__currentTime = null;\n      this.resetTime(time);\n    }\n  }, {\n    key: 'resetTime',\n    value: function resetTime() {\n      var _this2 = this;\n\n      var time = arguments.length <= 0 || arguments[0] === undefined ? this.currentTime : arguments[0];\n\n      if (this.master) {\n        this.master.reset(this, time);\n      } else {\n        if (this.__timeout) {\n          clearTimeout(this.__timeout);\n          this.__timeout = null;\n        }\n\n        if (time !== Infinity) {\n          if (this.__nextTime === Infinity) log('Scheduler Start');\n\n          var timeOutDelay = Math.max(time - this.lookahead - this.audioContext.currentTime, this.period);\n\n          this.__timeout = setTimeout(function () {\n            _this2.__tick();\n          }, timeOutDelay * 1000);\n        } else if (this.__nextTime !== Infinity) {\n          log('Scheduler Stop');\n        }\n\n        this.__nextTime = time;\n      }\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      if (this.master) return this.master.currentTime;\n\n      return this.__currentTime || this.audioContext.currentTime + this.lookahead;\n    }\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      var master = this.master;\n\n      if (master && master.currentPosition !== undefined) return master.currentPosition;\n\n      return undefined;\n    }\n  }]);\n  return Scheduler;\n}(_schedulingQueue2.default);\n\nexports.default = Scheduler;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjaGVkdWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTSxNQUFNLHFCQUFNLGVBQU4sQ0FBTjs7SUFFZTs7O0FBQ25CLFdBRG1CLFNBQ25CLEdBQTBCO1FBQWQsZ0VBQVUsa0JBQUk7d0NBRFAsV0FDTzs7NkZBRFAsdUJBQ087O0FBR3hCLFVBQUssWUFBTCxHQUFvQixRQUFRLFlBQVIsMEJBQXBCLENBSHdCOztBQUt4QixVQUFLLGFBQUwsR0FBcUIsSUFBckIsQ0FMd0I7QUFNeEIsVUFBSyxVQUFMLEdBQWtCLFFBQWxCLENBTndCO0FBT3hCLFVBQUssU0FBTCxHQUFpQixJQUFqQjs7Ozs7O0FBUHdCLFNBYXhCLENBQUssTUFBTCxHQUFjLFFBQVEsTUFBUixJQUFtQixLQUFuQjs7Ozs7O0FBYlUsU0FtQnhCLENBQUssU0FBTCxHQUFpQixRQUFRLFNBQVIsSUFBc0IsR0FBdEIsQ0FuQk87O0dBQTFCOzs7Ozs2QkFEbUI7OzZCQXdCVjtBQUNQLFVBQU0sZUFBZSxLQUFLLFlBQUwsQ0FEZDtBQUVQLFVBQU0sY0FBYyxhQUFhLFdBQWIsQ0FGYjtBQUdQLFVBQUksT0FBTyxLQUFLLFVBQUwsQ0FISjs7QUFLUCxXQUFLLFNBQUwsR0FBaUIsSUFBakIsQ0FMTzs7QUFPUCxhQUFPLFFBQVEsY0FBYyxLQUFLLFNBQUwsRUFBZ0I7QUFDM0MsYUFBSyxhQUFMLEdBQXFCLElBQXJCLENBRDJDO0FBRTNDLGVBQU8sS0FBSyxXQUFMLENBQWlCLElBQWpCLENBQVAsQ0FGMkM7T0FBN0M7O0FBS0EsV0FBSyxhQUFMLEdBQXFCLElBQXJCLENBWk87QUFhUCxXQUFLLFNBQUwsQ0FBZSxJQUFmLEVBYk87Ozs7Z0NBZ0IwQjs7O1VBQXpCLDZEQUFPLEtBQUssV0FBTCxnQkFBa0I7O0FBQ2pDLFVBQUksS0FBSyxNQUFMLEVBQWE7QUFDZixhQUFLLE1BQUwsQ0FBWSxLQUFaLENBQWtCLElBQWxCLEVBQXdCLElBQXhCLEVBRGU7T0FBakIsTUFFTztBQUNMLFlBQUksS0FBSyxTQUFMLEVBQWdCO0FBQ2xCLHVCQUFhLEtBQUssU0FBTCxDQUFiLENBRGtCO0FBRWxCLGVBQUssU0FBTCxHQUFpQixJQUFqQixDQUZrQjtTQUFwQjs7QUFLQSxZQUFJLFNBQVMsUUFBVCxFQUFtQjtBQUNyQixjQUFJLEtBQUssVUFBTCxLQUFvQixRQUFwQixFQUNGLElBQUksaUJBQUosRUFERjs7QUFHQSxjQUFNLGVBQWUsS0FBSyxHQUFMLENBQVUsT0FBTyxLQUFLLFNBQUwsR0FBaUIsS0FBSyxZQUFMLENBQWtCLFdBQWxCLEVBQWdDLEtBQUssTUFBTCxDQUFqRixDQUplOztBQU1yQixlQUFLLFNBQUwsR0FBaUIsV0FBVyxZQUFNO0FBQ2hDLG1CQUFLLE1BQUwsR0FEZ0M7V0FBTixFQUV6QixlQUFlLElBQWYsQ0FGSCxDQU5xQjtTQUF2QixNQVNPLElBQUksS0FBSyxVQUFMLEtBQW9CLFFBQXBCLEVBQThCO0FBQ3ZDLGNBQUksZ0JBQUosRUFEdUM7U0FBbEM7O0FBSVAsYUFBSyxVQUFMLEdBQWtCLElBQWxCLENBbkJLO09BRlA7Ozs7d0JBeUJnQjtBQUNoQixVQUFJLEtBQUssTUFBTCxFQUNGLE9BQU8sS0FBSyxNQUFMLENBQVksV0FBWixDQURUOztBQUdBLGFBQU8sS0FBSyxhQUFMLElBQXNCLEtBQUssWUFBTCxDQUFrQixXQUFsQixHQUFnQyxLQUFLLFNBQUwsQ0FKN0M7Ozs7d0JBT0k7QUFDcEIsVUFBTSxTQUFTLEtBQUssTUFBTCxDQURLOztBQUdwQixVQUFJLFVBQVUsT0FBTyxlQUFQLEtBQTJCLFNBQTNCLEVBQ1osT0FBTyxPQUFPLGVBQVAsQ0FEVDs7QUFHQSxhQUFPLFNBQVAsQ0FOb0I7OztTQXpFSCIsImZpbGUiOiJzY2hlZHVsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGRlZmF1bHRBdWRpb0NvbnRleHQgZnJvbSAnLi4vY29yZS9hdWRpby1jb250ZXh0JztcbmltcG9ydCBTY2hlZHVsaW5nUXVldWUgZnJvbSAnLi4vY29yZS9zY2hlZHVsaW5nLXF1ZXVlJztcblxuY29uc3QgbG9nID0gZGVidWcoJ3dhdmVzanM6YXVkaW8nKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NoZWR1bGVyIGV4dGVuZHMgU2NoZWR1bGluZ1F1ZXVlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gb3B0aW9ucy5hdWRpb0NvbnRleHQgfHwgwqBkZWZhdWx0QXVkaW9Db250ZXh0O1xuXG4gICAgdGhpcy5fX2N1cnJlbnRUaW1lID0gbnVsbDtcbiAgICB0aGlzLl9fbmV4dFRpbWUgPSBJbmZpbml0eTtcbiAgICB0aGlzLl9fdGltZW91dCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBzY2hlZHVsZXIgKHNldFRpbWVvdXQpIHBlcmlvZFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5wZXJpb2QgPSBvcHRpb25zLnBlcmlvZCB8fCDCoDAuMDI1O1xuXG4gICAgLyoqXG4gICAgICogc2NoZWR1bGVyIGxvb2thaGVhZCB0aW1lICg+IHBlcmlvZClcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubG9va2FoZWFkID0gb3B0aW9ucy5sb29rYWhlYWQgfHwgwqAwLjE7XG4gIH1cblxuICAvLyBzZXRUaW1lb3V0IHNjaGVkdWxpbmcgbG9vcFxuICBfX3RpY2soKSB7XG4gICAgY29uc3QgYXVkaW9Db250ZXh0ID0gdGhpcy5hdWRpb0NvbnRleHQ7XG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBhdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG4gICAgbGV0IHRpbWUgPSB0aGlzLl9fbmV4dFRpbWU7XG5cbiAgICB0aGlzLl9fdGltZW91dCA9IG51bGw7XG5cbiAgICB3aGlsZSAodGltZSA8PSBjdXJyZW50VGltZSArIHRoaXMubG9va2FoZWFkKSB7XG4gICAgICB0aGlzLl9fY3VycmVudFRpbWUgPSB0aW1lO1xuICAgICAgdGltZSA9IHRoaXMuYWR2YW5jZVRpbWUodGltZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fX2N1cnJlbnRUaW1lID0gbnVsbDtcbiAgICB0aGlzLnJlc2V0VGltZSh0aW1lKTtcbiAgfVxuXG4gIHJlc2V0VGltZSh0aW1lID0gdGhpcy5jdXJyZW50VGltZSkge1xuICAgIGlmICh0aGlzLm1hc3Rlcikge1xuICAgICAgdGhpcy5tYXN0ZXIucmVzZXQodGhpcywgdGltZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLl9fdGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fX3RpbWVvdXQpO1xuICAgICAgICB0aGlzLl9fdGltZW91dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lICE9PSBJbmZpbml0eSkge1xuICAgICAgICBpZiAodGhpcy5fX25leHRUaW1lID09PSBJbmZpbml0eSlcbiAgICAgICAgICBsb2coJ1NjaGVkdWxlciBTdGFydCcpO1xuXG4gICAgICAgIGNvbnN0IHRpbWVPdXREZWxheSA9IE1hdGgubWF4KCh0aW1lIC0gdGhpcy5sb29rYWhlYWQgLSB0aGlzLmF1ZGlvQ29udGV4dC5jdXJyZW50VGltZSksIHRoaXMucGVyaW9kKTtcblxuICAgICAgICB0aGlzLl9fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX190aWNrKCk7XG4gICAgICAgIH0sIHRpbWVPdXREZWxheSAqIDEwMDApO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9fbmV4dFRpbWUgIT09IEluZmluaXR5KSB7XG4gICAgICAgIGxvZygnU2NoZWR1bGVyIFN0b3AnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fX25leHRUaW1lID0gdGltZTtcbiAgICB9XG4gIH1cblxuICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgaWYgKHRoaXMubWFzdGVyKVxuICAgICAgcmV0dXJuIHRoaXMubWFzdGVyLmN1cnJlbnRUaW1lO1xuXG4gICAgcmV0dXJuIHRoaXMuX19jdXJyZW50VGltZSB8fCB0aGlzLmF1ZGlvQ29udGV4dC5jdXJyZW50VGltZSArIHRoaXMubG9va2FoZWFkO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRQb3NpdGlvbigpIHtcbiAgICBjb25zdCBtYXN0ZXIgPSB0aGlzLm1hc3RlcjtcblxuICAgIGlmIChtYXN0ZXIgJiYgbWFzdGVyLmN1cnJlbnRQb3NpdGlvbiAhPT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIG1hc3Rlci5jdXJyZW50UG9zaXRpb247XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _set = __webpack_require__(59);\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _debug = __webpack_require__(73);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _audioContext = __webpack_require__(16);\n\nvar _audioContext2 = _interopRequireDefault(_audioContext);\n\nvar _timeEngine = __webpack_require__(18);\n\nvar _timeEngine2 = _interopRequireDefault(_timeEngine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = (0, _debug2.default)('wavesjs:audio');\n\nvar SimpleScheduler = function () {\n  function SimpleScheduler() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    (0, _classCallCheck3.default)(this, SimpleScheduler);\n\n    this.audioContext = options.audioContext || _audioContext2.default;\n\n    this.__engines = new _set2.default();\n\n    this.__schedEngines = [];\n    this.__schedTimes = [];\n\n    this.__currentTime = null;\n    this.__timeout = null;\n\n    /**\n     * scheduler (setTimeout) period\n     * @type {Number}\n     */\n    this.period = options.period || 0.025;\n\n    /**\n     * scheduler lookahead time (> period)\n     * @type {Number}\n     */\n    this.lookahead = options.lookahead || 0.1;\n  }\n\n  (0, _createClass3.default)(SimpleScheduler, [{\n    key: '__scheduleEngine',\n    value: function __scheduleEngine(engine, time) {\n      this.__schedEngines.push(engine);\n      this.__schedTimes.push(time);\n    }\n  }, {\n    key: '__rescheduleEngine',\n    value: function __rescheduleEngine(engine, time) {\n      var index = this.__schedEngines.indexOf(engine);\n\n      if (index >= 0) {\n        if (time !== Infinity) {\n          this.__schedTimes[index] = time;\n        } else {\n          this.__schedEngines.splice(index, 1);\n          this.__schedTimes.splice(index, 1);\n        }\n      } else if (time < Infinity) {\n        this.__schedEngines.push(engine);\n        this.__schedTimes.push(time);\n      }\n    }\n  }, {\n    key: '__unscheduleEngine',\n    value: function __unscheduleEngine(engine) {\n      var index = this.__schedEngines.indexOf(engine);\n\n      if (index >= 0) {\n        this.__schedEngines.splice(index, 1);\n        this.__schedTimes.splice(index, 1);\n      }\n    }\n  }, {\n    key: '__resetTick',\n    value: function __resetTick() {\n      if (this.__schedEngines.length > 0) {\n        if (!this.__timeout) {\n          log('SimpleScheduler Start');\n          this.__tick();\n        }\n      } else if (this.__timeout) {\n        log('SimpleScheduler Stop');\n        clearTimeout(this.__timeout);\n        this.__timeout = null;\n      }\n    }\n  }, {\n    key: '__tick',\n    value: function __tick() {\n      var _this = this;\n\n      var audioContext = this.audioContext;\n      var currentTime = audioContext.currentTime;\n      var i = 0;\n\n      while (i < this.__schedEngines.length) {\n        var engine = this.__schedEngines[i];\n        var time = this.__schedTimes[i];\n\n        while (time && time <= currentTime + this.lookahead) {\n          time = Math.max(time, currentTime);\n          this.__currentTime = time;\n          time = engine.advanceTime(time);\n        }\n\n        if (time && time < Infinity) {\n          this.__schedTimes[i++] = time;\n        } else {\n          this.__unscheduleEngine(engine);\n\n          // remove engine from scheduler\n          if (!time) {\n            engine.master = null;\n            this.__engines.delete(engine);\n          }\n        }\n      }\n\n      this.__currentTime = null;\n      this.__timeout = null;\n\n      if (this.__schedEngines.length > 0) {\n        this.__timeout = setTimeout(function () {\n          _this.__tick();\n        }, this.period * 1000);\n      }\n    }\n  }, {\n    key: 'defer',\n\n\n    // call a function at a given time\n    value: function defer(fun) {\n      var time = arguments.length <= 1 || arguments[1] === undefined ? this.currentTime : arguments[1];\n\n      if (!(fun instanceof Function)) throw new Error(\"object cannot be defered by scheduler\");\n\n      this.add({\n        advanceTime: function advanceTime(time) {\n          fun(time);\n        } }, // make sur that the advanceTime method does not returm anything\n      time);\n    }\n\n    // add a time engine to the scheduler\n\n  }, {\n    key: 'add',\n    value: function add(engine) {\n      var time = arguments.length <= 1 || arguments[1] === undefined ? this.currentTime : arguments[1];\n\n      if (!_timeEngine2.default.implementsScheduled(engine)) throw new Error(\"object cannot be added to scheduler\");\n\n      if (engine.master) throw new Error(\"object has already been added to a master\");\n\n      // set master and add to array\n      engine.master = this;\n      this.__engines.add(engine);\n\n      // schedule engine\n      this.__scheduleEngine(engine, time);\n      this.__resetTick();\n    }\n  }, {\n    key: 'remove',\n    value: function remove(engine) {\n      if (!engine.master || engine.master !== this) throw new Error(\"engine has not been added to this scheduler\");\n\n      // reset master and remove from array\n      engine.master = null;\n      this.__engines.delete(engine);\n\n      // unschedule engine\n      this.__unscheduleEngine(engine);\n      this.__resetTick();\n    }\n  }, {\n    key: 'resetEngineTime',\n    value: function resetEngineTime(engine) {\n      var time = arguments.length <= 1 || arguments[1] === undefined ? this.currentTime : arguments[1];\n\n      this.__rescheduleEngine(engine, time);\n      this.__resetTick();\n    }\n\n    // check whether a given engine is scheduled\n\n  }, {\n    key: 'has',\n    value: function has(engine) {\n      return this.__engines.has(engine);\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      if (this.__timeout) {\n        clearTimeout(this.__timeout);\n        this.__timeout = null;\n      }\n\n      this.__schedEngines.length = 0;\n      this.__schedTimes.length = 0;\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      return this.__currentTime || this.audioContext.currentTime + this.lookahead;\n    }\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      return undefined;\n    }\n  }]);\n  return SimpleScheduler;\n}();\n\nexports.default = SimpleScheduler;\n//# sourceMappingURL=data:application/json;base64,# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var require;var require;!function(e){if(true)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var t;t=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,t.wavesBasicControllers=e()}}(function(){return function e(t,r,n){function i(a,o){if(!r[a]){if(!t[a]){var l=\"function\"==typeof require&&require;if(!o&&l)return require(a,!0);if(s)return s(a,!0);var u=new Error(\"Cannot find module '\"+a+\"'\");throw u.code=\"MODULE_NOT_FOUND\",u}var c=r[a]={exports:{}};t[a][0].call(c.exports,function(e){var r=t[a][1][e];return i(r?r:e)},c,c.exports,e,t,r,n)}return r[a].exports}for(var s=\"function\"==typeof require&&require,a=0;a<n.length;a++)i(n[a]);return i}({1:[function(e,t,r){\"use strict\";var n=(e(\"./dist/utils/styles\"),e(\"./dist/base-controller\")),i={Title:e(\"./dist/title\"),Buttons:e(\"./dist/buttons\"),Toggle:e(\"./dist/toggle\"),Slider:e(\"./dist/slider\"),Breakpoint:e(\"./dist/breakpoint\"),setTheme:function(e){n.theme=e}};t.exports=i},{\"./dist/base-controller\":2,\"./dist/breakpoint\":3,\"./dist/buttons\":4,\"./dist/slider\":6,\"./dist/title\":7,\"./dist/toggle\":8,\"./dist/utils/styles\":9}],2:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/core-js/set\")[\"default\"],l=e(\"events\"),u=e(\"./utils/styles\"),c=new o,h=void 0;window.addEventListener(\"resize\",function(){c.forEach(function(e){return e.onResize()})});var f=function(e){function t(){a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),0===c.size&&u.insertStyleSheet(),c.add(this)}return i(t,e),s(t,[{key:\"_applyOptionnalParameters\",value:function(){var e=this,t=arguments.length<=0||void 0===arguments[0]?null:arguments[0],r=arguments.length<=1||void 0===arguments[1]?null:arguments[1];t&&(\"string\"==typeof t&&(t=document.querySelector(t)),t.appendChild(this.render()),setTimeout(function(){return e.onResize()},0)),r&&this.on(\"change\",r)}},{key:\"render\",value:function(){return this.$el=document.createElement(\"label\"),this.$el.classList.add(u.ns,h),this.$el}},{key:\"onResize\",value:function(){var e=this.$el.getBoundingClientRect(),t=e.width,r=t>600?\"remove\":\"add\";this.$el.classList[r](\"small\")}},{key:\"bindEvents\",value:function(){}}],[{key:\"theme\",set:function(e){c.forEach(function(e){return e.$el.classList.remove(h)}),h=e,c.forEach(function(e){return e.$el.classList.add(h)})},get:function(){return h}}]),t}(l.EventEmitter);f.theme=\"light\",t.exports=f},{\"./utils/styles\":9,\"babel-runtime/core-js/set\":14,\"babel-runtime/helpers/class-call-check\":15,\"babel-runtime/helpers/create-class\":16,\"babel-runtime/helpers/get\":17,\"babel-runtime/helpers/inherits\":18,events:159}],3:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"waves-ui/dist/core/timeline\"),l=e(\"waves-ui/dist/core/layer\"),u=e(\"waves-ui/dist/core/layer-time-context\"),c=e(\"waves-ui/dist/shapes/line\"),h=e(\"waves-ui/dist/shapes/dot\"),f=e(\"waves-ui/dist/behaviors/breakpoint-behavior\"),d=e(\"waves-ui/dist/states/base-state\"),p=e(\"./base-controller\"),m=function(e){function t(e){a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this,e),this.currentEditedLayer=null,this.currentTarget=null}return i(t,e),s(t,[{key:\"enter\",value:function(){}},{key:\"exit\",value:function(){}},{key:\"handleEvent\",value:function(e){switch(e.type){case\"mousedown\":this.onMouseDown(e);break;case\"mousemove\":this.onMouseMove(e);break;case\"mouseup\":this.onMouseUp(e)}}},{key:\"onMouseDown\",value:function(e){var t=this;this.mouseDown=!0,this.currentTarget=e.target,this.layers.forEach(function(r){r.unselect();var n=r.getItemFromDOMElement(e.target);if(null===n){var i=[e.x/t.timeline.visibleWidth,1-e.y/r.params.height];r.data.push(i),t.timeline.tracks.render(),t.timeline.tracks.update()}else if(e.originalEvent.shiftKey){var s=r.data,i=r.getDatumFromItem(n);s.splice(s.indexOf(i),1),t.timeline.tracks.render(),t.timeline.tracks.update()}else t.currentEditedLayer=r,r.select(n)})}},{key:\"onMouseMove\",value:function(e){var t=this;if(this.mouseDown&&this.currentEditedLayer){var r=this.currentEditedLayer,n=r.selectedItems;n.forEach(function(n){r.edit(n,e.dx,e.dy,t.currentTarget)}),r.update(n)}}},{key:\"onMouseUp\",value:function(e){this.currentEditedLayer=null,this.mouseDown=!1}}]),t}(d),b=function(e){function t(e){var r=arguments.length<=1||void 0===arguments[1]?[]:arguments[1],i=arguments.length<=2||void 0===arguments[2]?null:arguments[2],s=arguments.length<=3||void 0===arguments[3]?null:arguments[3];a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),this.type=\"breakpoint\",this.legend=e,this.dots=r,n(Object.getPrototypeOf(t.prototype),\"_applyOptionnalParameters\",this).call(this,i,s)}return i(t,e),s(t,[{key:\"render\",value:function(){var e='\\n      <span class=\"legend\">'+this.legend+'</span>\\n      <div class=\"inner-wrapper timeline\"></div>\\n    ',r=300;this.$el=n(Object.getPrototypeOf(t.prototype),\"render\",this).call(this),this.$el.classList.add(this.type),this.$el.innerHTML=e,this.$track=this.$el.querySelector(\".timeline\"),this.timeline=new o,this.timeline.createTrack(this.$track,r,\"main\");var i=new u(this.timeline.timeContext);this.breakpointLayer=new l(\"collection\",this.dots,{height:r}),this.breakpointLayer.setTimeContext(i);var s=function(e){var t=arguments.length<=1||void 0===arguments[1]?null:arguments[1];return null!==t&&(e[0]=t),e[0]},a=function(e){var t=arguments.length<=1||void 0===arguments[1]?null:arguments[1];return null!==t&&(e[1]=t),e[1]};return this.breakpointLayer.configureShape(h,{color:function(e){return\"#ffffff\"},cx:s,cy:a}),this.breakpointLayer.configureCommonShape(c,{cx:s,cy:a},{color:\"#ffffff\"}),this.breakpointLayer.setBehavior(new f),this.breakpointLayer.on(\"edit\",function(e,t){t[0]=Math.max(0,Math.min(t[0],1)),t[1]=Math.max(0,Math.min(t[1],1))}),this.timeline.addLayer(this.breakpointLayer,\"main\"),this.timeline.tracks.render(),this.timeline.tracks.update(),this.timeline.state=new m(this.timeline),this.bindEvents(),this.$el}},{key:\"onResize\",value:function(){n(Object.getPrototypeOf(t.prototype),\"onResize\",this).call(this);var e=this.$track.getBoundingClientRect().width;this.timeline.visibleWidth=e,this.timeline.pixelsPerSecond=e,this.timeline.tracks.update()}},{key:\"bindEvents\",value:function(){var e=this;this.timeline.on(\"update\",function(){e.emit(\"change\",e.dots)})}}]),t}(p);t.exports=b},{\"./base-controller\":2,\"babel-runtime/helpers/class-call-check\":15,\"babel-runtime/helpers/create-class\":16,\"babel-runtime/helpers/get\":17,\"babel-runtime/helpers/inherits\":18,\"waves-ui/dist/behaviors/breakpoint-behavior\":56,\"waves-ui/dist/core/layer\":59,\"waves-ui/dist/core/layer-time-context\":58,\"waves-ui/dist/core/timeline\":62,\"waves-ui/dist/shapes/dot\":70,\"waves-ui/dist/shapes/line\":71,\"waves-ui/dist/states/base-state\":73}],4:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/core-js/array/from\")[\"default\"],l=e(\"./base-controller\"),u=function(e){function t(e,r){var i=arguments.length<=2||void 0===arguments[2]?null:arguments[2],s=arguments.length<=3||void 0===arguments[3]?null:arguments[3];a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),this.type=\"buttons\",this.legend=e,this.labels=r,n(Object.getPrototypeOf(t.prototype),\"_applyOptionnalParameters\",this).call(this,i,s)}return i(t,e),s(t,[{key:\"render\",value:function(){var e='\\n      <span class=\"legend\">'+this.legend+'</span>\\n      <div class=\"inner-wrapper\">\\n        '+this.labels.map(function(e){return'<button data-label=\"'+e+'\">'+e+\"</button>\"}).join(\"\")+\"\\n      </div>\";return this.$el=n(Object.getPrototypeOf(t.prototype),\"render\",this).call(this),this.$el.classList.add(this.type),this.$el.innerHTML=e,this.$buttons=o(this.$el.querySelectorAll(\"button\")),this.bindEvents(),this.$el}},{key:\"bindEvents\",value:function(){var e=this;this.$buttons.forEach(function(t){var r=t.getAttribute(\"data-label\");t.addEventListener(\"mousedown\",function(e){e.preventDefault(),t.classList.add(\"active\")}),t.addEventListener(\"mouseup\",function(n){n.preventDefault(),t.classList.remove(\"active\"),e.emit(\"change\",r)})})}}]),t}(l);t.exports=u},{\"./base-controller\":2,\"babel-runtime/core-js/array/from\":10,\"babel-runtime/helpers/class-call-check\":15,\"babel-runtime/helpers/create-class\":16,\"babel-runtime/helpers/get\":17,\"babel-runtime/helpers/inherits\":18}],5:[function(e,t,r){t.exports=\" .waves-basic-controllers { width: 100%; max-width: 800px; height: 30px; padding: 3px; margin: 4px 0; background-color: #efefef; border: 1px solid #aaaaaa; box-sizing: border-box; border-radius: 2px; display: block; color: #464646; } .waves-basic-controllers .legend { font: italic bold 12px arial; line-height: 22px; overflow: hidden; text-align: right; padding: 0 8px 0 0; display: block; box-sizing: border-box; width: 24%; float: left; white-space: nowrap; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .waves-basic-controllers .inner-wrapper { display: -webkit-inline-flex; display: inline-flex; -webkit-flex-wrap: no-wrap; flex-wrap: no-wrap; width: 76%; float: left; } .waves-basic-controllers.small:not(.toggle) { height: auto; } .waves-basic-controllers.small:not(.toggle) .legend { width: 100%; float: none; text-align: left; } .waves-basic-controllers.small:not(.toggle) .inner-wrapper { width: 100%; float: none; } .waves-basic-controllers.small.toggle .legend { display: block; margin-right: 20px; text-align: left; } .waves-basic-controllers.small.toggle .inner-wrapper { display: inline-block; width: auto; } .waves-basic-controllers.title { border: none; margin-bottom: 0; padding-bottom: 0; padding-top: 6px; background-color: transparent; height: 25px; } .waves-basic-controllers.title .legend { font: normal bold 13px arial; line-height: 22px; height: 22px; overflow: hidden; text-align: left; padding: 0; width: 100%; box-sizing: border-box; -webkit-flex-grow: 1; flex-grow: 1; } .waves-basic-controllers.buttons button { font: normal normal 12px arial; height: 22px; border: none; background-color: #464646; color: #ffffff; margin: 0 4px 0 0; box-sizing: border-box; border-radius: 2px; cursor: pointer; -webkit-flex-grow: 1; flex-grow: 1; } .waves-basic-controllers.buttons button:last-child { margin: 0; } .waves-basic-controllers.buttons button.active { background-color: #686868; } .waves-basic-controllers.buttons button:focus { outline: none; } .waves-basic-controllers.toggle .toggle-container { padding: 0; margin: 0; width: 19px; height: 19px; background-color: #464646; flex-row: 1; position: relative; top: 1px; cursor: pointer; border-radius: 2px; } .waves-basic-controllers.toggle .toggle-container .x { width: 1px; height: 19px; background-color: #efefef; position: absolute; left: 9px; display: none; } .waves-basic-controllers.toggle .toggle-container.active .x { display: block; } .waves-basic-controllers.toggle .toggle-container .x.x1 { -webkit-transform: rotate(45deg); transform: rotate(45deg); } .waves-basic-controllers.toggle .toggle-container .x.x2 { -webkit-transform: rotate(-45deg); transform: rotate(-45deg); } .waves-basic-controllers.slider .inner-wrapper .range { height: 22px; display: inline-block; margin: 0; -webkit-flex-grow: 4; flex-grow: 4 } .waves-basic-controllers.slider .inner-wrapper .number-wrapper { display: inline; height: 22px; text-align: right; -webkit-flex-grow: 3; flex-grow: 3; } .waves-basic-controllers.slider .inner-wrapper.large .range { -webkit-flex-grow: 50; flex-grow: 50 } .waves-basic-controllers.slider .inner-wrapper.large .number-wrapper { -webkit-flex-grow: 1; flex-grow: 1; } .waves-basic-controllers.slider .inner-wrapper.small .range { -webkit-flex-grow: 1; flex-grow: 1 } .waves-basic-controllers.slider .inner-wrapper.small .number-wrapper { -webkit-flex-grow: 7; flex-grow: 7; } .waves-basic-controllers.slider .inner-wrapper .number-wrapper .number { height: 22px; width: 54px; position: relative; left: 5px; font: normal normal 12px arial; border: none; background: none; padding: 0 0 0 4px; display: inline-block; text-align: right; vertical-align: top; } .waves-basic-controllers.slider .inner-wrapper .number-wrapper .unit { font: italic normal 12px arial; line-height: 22px; height: 22px; width: 30px; display: inline-block; position: relative; padding-left: 5px; padding-right: 5px; color: #565656; } .waves-basic-controllers.slider .inner-wrapper .number-wrapper .unit sup { line-height: 7px; } .waves-basic-controllers.breakpoint { height: auto; overflow: auto; } .waves-basic-controllers.breakpoint .timeline { background-color: #464646; border-radius: 2px; } .waves-basic-controllers.dark { background-color: #464646; border: 1px solid #686868; color: rgba(255, 255, 255, 0.95); } .waves-basic-controllers.dark.title { background-color: transparent; border: none; } .waves-basic-controllers.dark.toggle .toggle-container { background-color: #efefef; } .waves-basic-controllers.dark.toggle .toggle-container .x { background-color: #464646; } .waves-basic-controllers.dark.buttons button { background-color: #efefef; color: #464646; } .waves-basic-controllers.dark.buttons button.active { background-color: #cdcdcd; } .waves-basic-controllers.dark.slider .inner-wrapper .number-wrapper .number { color: rgba(255, 255, 255, 0.9); } .waves-basic-controllers.dark.slider .inner-wrapper .number-wrapper .unit { color: #bcbcbc; } \"},{}],6:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"./base-controller\"),l=(e(\"./utils/styles\"),function(e){function t(e){var r=arguments.length<=1||void 0===arguments[1]?0:arguments[1],i=arguments.length<=2||void 0===arguments[2]?1:arguments[2],s=arguments.length<=3||void 0===arguments[3]?.01:arguments[3],o=arguments.length<=4||void 0===arguments[4]?0:arguments[4],l=arguments.length<=5||void 0===arguments[5]?\"\":arguments[5],u=arguments.length<=6||void 0===arguments[6]?\"default\":arguments[6],c=arguments.length<=7||void 0===arguments[7]?null:arguments[7],h=arguments.length<=8||void 0===arguments[8]?null:arguments[8];a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),this.type=\"slider\",this.legend=e,this.min=r,this.max=i,this.step=s,this.unit=l,this.size=u,this._value=o,n(Object.getPrototypeOf(t.prototype),\"_applyOptionnalParameters\",this).call(this,c,h)}return i(t,e),s(t,[{key:\"render\",value:function(){var e='\\n      <span class=\"legend\">'+this.legend+'</span>\\n      <div class=\"inner-wrapper '+this.size+'\">\\n        <input class=\"range\" type=\"range\" min=\"'+this.min+'\" max=\"'+this.max+'\" step=\"'+this.step+'\" value=\"'+this.value+'\" />\\n        <div class=\"number-wrapper\">\\n          <input type=\"number\" class=\"number\" min=\"'+this.min+'\" max=\"'+this.max+'\" step=\"'+this.step+'\" value=\"'+this.value+'\" />\\n          <span class=\"unit\">'+this.unit+\"</span>\\n        </div>\\n      </div>\";return this.$el=n(Object.getPrototypeOf(t.prototype),\"render\",this).call(this),this.$el.classList.add(this.type),this.$el.innerHTML=e,this.$range=this.$el.querySelector('input[type=\"range\"]'),this.$number=this.$el.querySelector('input[type=\"number\"]'),this.bindEvents(),this.$el}},{key:\"bindEvents\",value:function(){var e=this;this.$range.addEventListener(\"input\",function(){var t=parseFloat(e.$range.value);e.$number.value=t,e.value=t,e.emit(\"change\",t)},!1),this.$number.addEventListener(\"change\",function(){var t=parseFloat(e.$number.value);e.$range.value=t,e.value=t,e.emit(\"change\",t)},!1)}},{key:\"value\",set:function(e){this._value=e,this.$number&&this.$range&&(this.$number.value=this.value,this.$range.value=this.value)},get:function(){return this._value}}]),t}(o));t.exports=l},{\"./base-controller\":2,\"./utils/styles\":9,\"babel-runtime/helpers/class-call-check\":15,\"babel-runtime/helpers/create-class\":16,\"babel-runtime/helpers/get\":17,\"babel-runtime/helpers/inherits\":18}],7:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"./base-controller\"),l=(e(\"./utils/styles\"),function(e){function t(e){var r=arguments.length<=1||void 0===arguments[1]?null:arguments[1];a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),this.type=\"title\",this.legend=e,n(Object.getPrototypeOf(t.prototype),\"_applyOptionnalParameters\",this).call(this,r)}return i(t,e),s(t,[{key:\"render\",value:function(){var e='<span class=\"legend\">'+this.legend+\"</span>\";return this.$el=n(Object.getPrototypeOf(t.prototype),\"render\",this).call(this),this.$el.classList.add(this.type),this.$el.innerHTML=e,this.$el}}]),t}(o));t.exports=l},{\"./base-controller\":2,\"./utils/styles\":9,\"babel-runtime/helpers/class-call-check\":15,\"babel-runtime/helpers/create-class\":16,\"babel-runtime/helpers/get\":17,\"babel-runtime/helpers/inherits\":18}],8:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"./base-controller\"),l=function(e){function t(e){var r=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],i=arguments.length<=2||void 0===arguments[2]?!1:arguments[2],s=arguments.length<=3||void 0===arguments[3]?null:arguments[3];a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),this.type=\"toggle\",this.legend=e,this._active=r,n(Object.getPrototypeOf(t.prototype),\"_applyOptionnalParameters\",this).call(this,i,s)}return i(t,e),s(t,[{key:\"_updateBtn\",value:function(){var e=this.active?\"add\":\"remove\";this.$toggle.classList[e](\"active\")}},{key:\"render\",value:function(){var e='\\n      <span class=\"legend\">'+this.legend+'</span>\\n      <div class=\"inner-wrapper\">\\n        <div class=\"toggle-container\">\\n          <div class=\"x x1\"></div><div class=\"x x2\"></div>\\n        </div>\\n      </div>';return this.$el=n(Object.getPrototypeOf(t.prototype),\"render\",this).call(this),this.$el.classList.add(this.type),this.$el.innerHTML=e,this.$toggle=this.$el.querySelector(\".toggle-container\"),this.bindEvents(),this.active=this._active,this.$el}},{key:\"bindEvents\",value:function(){var e=this;this.$toggle.addEventListener(\"click\",function(t){t.preventDefault(),e.active=!e.active,e.emit(\"change\",e.active)})}},{key:\"active\",set:function(e){this._active=e,this._updateBtn()},get:function(){return this._active}}]),t}(o);t.exports=l},{\"./base-controller\":2,\"babel-runtime/helpers/class-call-check\":15,\"babel-runtime/helpers/create-class\":16,\"babel-runtime/helpers/get\":17,\"babel-runtime/helpers/inherits\":18}],9:[function(e,t,r){\"use strict\";var n=e(\"../../package.json\"),i=e(\"../css/styles.js\"),s=n.name;t.exports.insertStyleSheet=function(){var e=document.createElement(\"style\");e.setAttribute(\"data-namespace\",s),e.innerHTML=i,document.body.appendChild(e)},t.exports.ns=s},{\"../../package.json\":158,\"../css/styles.js\":5}],10:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/array/from\"),__esModule:!0}},{\"core-js/library/fn/array/from\":19}],11:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/create\"),__esModule:!0}},{\"core-js/library/fn/object/create\":20}],12:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/define-property\"),__esModule:!0}},{\"core-js/library/fn/object/define-property\":21}],13:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/get-own-property-descriptor\"),__esModule:!0}},{\"core-js/library/fn/object/get-own-property-descriptor\":22}],14:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/set\"),__esModule:!0}},{\"core-js/library/fn/set\":23}],15:[function(e,t,r){\"use strict\";r[\"default\"]=function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")},r.__esModule=!0},{}],16:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/core-js/object/define-property\")[\"default\"];r[\"default\"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),n(e,i.key,i)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),r.__esModule=!0},{\"babel-runtime/core-js/object/define-property\":12}],17:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/core-js/object/get-own-property-descriptor\")[\"default\"];r[\"default\"]=function(e,t,r){for(var i=!0;i;){var s=e,a=t,o=r;l=c=u=void 0,i=!1,null===s&&(s=Function.prototype);var l=n(s,a);if(void 0!==l){if(\"value\"in l)return l.value;var u=l.get;return void 0===u?void 0:u.call(o)}var c=Object.getPrototypeOf(s);if(null===c)return void 0;e=c,t=a,r=o,i=!0}},r.__esModule=!0},{\"babel-runtime/core-js/object/get-own-property-descriptor\":13}],18:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/core-js/object/create\")[\"default\"];r[\"default\"]=function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);e.prototype=n(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(e.__proto__=t)},r.__esModule=!0},{\"babel-runtime/core-js/object/create\":11}],19:[function(e,t,r){e(\"../../modules/es6.string.iterator\"),e(\"../../modules/es6.array.from\"),t.exports=e(\"../../modules/$\").core.Array.from},{\"../../modules/$\":38,\"../../modules/es6.array.from\":47,\"../../modules/es6.string.iterator\":52}],20:[function(e,t,r){var n=e(\"../../modules/$\");t.exports=function(e,t){return n.create(e,t)}},{\"../../modules/$\":38}],21:[function(e,t,r){var n=e(\"../../modules/$\");t.exports=function(e,t,r){return n.setDesc(e,t,r)}},{\"../../modules/$\":38}],22:[function(e,t,r){var n=e(\"../../modules/$\");e(\"../../modules/es6.object.statics-accept-primitives\"),t.exports=function(e,t){return n.getDesc(e,t)}},{\"../../modules/$\":38,\"../../modules/es6.object.statics-accept-primitives\":49}],23:[function(e,t,r){e(\"../modules/es6.object.to-string\"),e(\"../modules/es6.string.iterator\"),e(\"../modules/web.dom.iterable\"),e(\"../modules/es6.set\"),e(\"../modules/es7.set.to-json\"),t.exports=e(\"../modules/$\").core.Set},{\"../modules/$\":38,\"../modules/es6.object.to-string\":50,\"../modules/es6.set\":51,\"../modules/es6.string.iterator\":52,\"../modules/es7.set.to-json\":53,\"../modules/web.dom.iterable\":54}],24:[function(e,t,r){function n(e,t,r){if(!e)throw TypeError(r?t+r:t)}var i=e(\"./$\");n.def=i.assertDefined,n.fn=function(e){if(!i.isFunction(e))throw TypeError(e+\" is not a function!\");return e},n.obj=function(e){if(!i.isObject(e))throw TypeError(e+\" is not an object!\");return e},n.inst=function(e,t,r){if(!(e instanceof t))throw TypeError(r+\": use the 'new' operator!\");return e},t.exports=n},{\"./$\":38}],25:[function(e,t,r){function n(e){return a.call(e).slice(8,-1)}var i=e(\"./$\"),s=e(\"./$.wks\")(\"toStringTag\"),a={}.toString;n.classof=function(e){var t,r;return void 0==e?void 0===e?\"Undefined\":\"Null\":\"string\"==typeof(r=(t=Object(e))[s])?r:n(t)},n.set=function(e,t,r){e&&!i.has(e=r?e:e.prototype,s)&&i.hide(e,s,t)},t.exports=n},{\"./$\":38,\"./$.wks\":46}],26:[function(e,t,r){\"use strict\";function n(e,t){if(!d(e))return\"symbol\"==typeof e?e:(\"string\"==typeof e?\"S\":\"P\")+e;if(!h(e,b)){if(!m(e))return\"F\";if(!t)return\"E\";p(e,b,++_)}return\"O\"+e[b]}function i(e,t){var r,i=n(t);if(\"F\"!==i)return e[g][i];for(r=e[y];r;r=r.n)if(r.k==t)return r}var s=e(\"./$\"),a=e(\"./$.ctx\"),o=e(\"./$.uid\").safe,l=e(\"./$.assert\"),u=e(\"./$.for-of\"),c=e(\"./$.iter\").step,h=s.has,f=s.set,d=s.isObject,p=s.hide,m=Object.isExtensible||d,b=o(\"id\"),g=o(\"O1\"),v=o(\"last\"),y=o(\"first\"),$=o(\"iter\"),x=s.DESC?o(\"size\"):\"size\",_=0;t.exports={getConstructor:function(t,r,n,o){var c=t(function(e,t){l.inst(e,c,r),f(e,g,s.create(null)),f(e,x,0),f(e,v,void 0),f(e,y,void 0),void 0!=t&&u(t,n,e[o],e)});return e(\"./$.mix\")(c.prototype,{clear:function(){for(var e=this,t=e[g],r=e[y];r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete t[r.i];e[y]=e[v]=void 0,e[x]=0},\"delete\":function(e){var t=this,r=i(t,e);if(r){var n=r.n,s=r.p;delete t[g][r.i],r.r=!0,s&&(s.n=n),n&&(n.p=s),t[y]==r&&(t[y]=n),t[v]==r&&(t[v]=s),t[x]--}return!!r},forEach:function(e){for(var t,r=a(e,arguments[1],3);t=t?t.n:this[y];)for(r(t.v,t.k,this);t&&t.r;)t=t.p},has:function(e){return!!i(this,e)}}),s.DESC&&s.setDesc(c.prototype,\"size\",{get:function(){return l.def(this[x])}}),c},def:function(e,t,r){var s,a,o=i(e,t);return o?o.v=r:(e[v]=o={i:a=n(t,!0),k:t,v:r,p:s=e[v],n:void 0,r:!1},e[y]||(e[y]=o),s&&(s.n=o),e[x]++,\"F\"!==a&&(e[g][a]=o)),e},getEntry:i,setIter:function(t,r,n){e(\"./$.iter-define\")(t,r,function(e,t){f(this,$,{o:e,k:t})},function(){for(var e=this[$],t=e.k,r=e.l;r&&r.r;)r=r.p;return e.o&&(e.l=r=r?r.n:e.o[y])?\"keys\"==t?c(0,r.k):\"values\"==t?c(0,r.v):c(0,[r.k,r.v]):(e.o=void 0,c(1))},n?\"entries\":\"values\",!n,!0)}}},{\"./$\":38,\"./$.assert\":24,\"./$.ctx\":29,\"./$.for-of\":31,\"./$.iter\":37,\"./$.iter-define\":35,\"./$.mix\":39,\"./$.uid\":44}],27:[function(e,t,r){var n=e(\"./$.def\"),i=e(\"./$.for-of\");t.exports=function(e){n(n.P,e,{toJSON:function(){var e=[];return i(this,!1,e.push,e),e}})}},{\"./$.def\":30,\"./$.for-of\":31}],28:[function(e,t,r){\"use strict\";var n=e(\"./$\"),i=e(\"./$.def\"),s=e(\"./$.iter\"),a=s.BUGGY,o=e(\"./$.for-of\"),l=e(\"./$.assert\").inst,u=e(\"./$.uid\").safe(\"internal\");t.exports=function(t,r,s,c,h,f){var d=n.g[t],p=d,m=h?\"set\":\"add\",b=p&&p.prototype,g={};return n.DESC&&n.isFunction(p)&&(f||!a&&b.forEach&&b.entries)?(p=r(function(e,r){l(e,p,t),e[u]=new d,void 0!=r&&o(r,h,e[m],e)}),n.each.call(\"add,clear,delete,forEach,get,has,set,keys,values,entries\".split(\",\"),function(e){var t=\"add\"==e||\"set\"==e;e in b&&n.hide(p.prototype,e,function(r,n){var i=this[u][e](0===r?0:r,n);return t?this:i})}),\"size\"in b&&n.setDesc(p.prototype,\"size\",{get:function(){return this[u].size}})):(p=c.getConstructor(r,t,h,m),e(\"./$.mix\")(p.prototype,s)),e(\"./$.cof\").set(p,t),g[t]=p,i(i.G+i.W+i.F,g),e(\"./$.species\")(p),f||c.setIter(p,t,h),p}},{\"./$\":38,\"./$.assert\":24,\"./$.cof\":25,\"./$.def\":30,\"./$.for-of\":31,\"./$.iter\":37,\"./$.mix\":39,\"./$.species\":42,\"./$.uid\":44}],29:[function(e,t,r){var n=e(\"./$.assert\").fn;t.exports=function(e,t,r){if(n(e),~r&&void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,i){return e.call(t,r,n,i)}}return function(){return e.apply(t,arguments)}}},{\"./$.assert\":24}],30:[function(e,t,r){function n(e,t){return function(){return e.apply(t,arguments)}}function i(e,t,r){var s,u,c,h,f=e&i.G,d=e&i.P,p=f?a:e&i.S?a[t]:(a[t]||{}).prototype,m=f?o:o[t]||(o[t]={});f&&(r=t);for(s in r)u=!(e&i.F)&&p&&s in p,u&&s in m||(c=u?p[s]:r[s],f&&!l(p[s])?h=r[s]:e&i.B&&u?h=n(c,a):e&i.W&&p[s]==c?!function(e){h=function(t){return this instanceof e?new e(t):e(t)},h.prototype=e.prototype}(c):h=d&&l(c)?n(Function.call,c):c,m[s]=h,d&&((m.prototype||(m.prototype={}))[s]=c))}var s=e(\"./$\"),a=s.g,o=s.core,l=s.isFunction;i.F=1,i.G=2,i.S=4,i.P=8,i.B=16,i.W=32,t.exports=i},{\"./$\":38}],31:[function(e,t,r){var n=e(\"./$.ctx\"),i=e(\"./$.iter\").get,s=e(\"./$.iter-call\");t.exports=function(e,t,r,a){for(var o,l=i(e),u=n(r,a,t?2:1);!(o=l.next()).done;)if(s(l,u,o.value,t)===!1)return s.close(l)}},{\"./$.ctx\":29,\"./$.iter\":37,\"./$.iter-call\":34}],32:[function(e,t,r){t.exports=function(e){return e.FW=!1,e.path=e.core,e}},{}],33:[function(e,t,r){function n(e){try{return a(e)}catch(t){return o.slice()}}var i=e(\"./$\"),s={}.toString,a=i.getNames,o=\"object\"==typeof window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.get=function(e){return o&&\"[object Window]\"==s.call(e)?n(e):a(i.toObject(e))}},{\"./$\":38}],34:[function(e,t,r){function n(e){var t=e[\"return\"];void 0!==t&&s(t.call(e))}function i(e,t,r,i){try{return i?t(s(r)[0],r[1]):t(r)}catch(a){throw n(e),a}}var s=e(\"./$.assert\").obj;i.close=n,t.exports=i},{\"./$.assert\":24}],35:[function(e,t,r){var n=e(\"./$.def\"),i=e(\"./$.redef\"),s=e(\"./$\"),a=e(\"./$.cof\"),o=e(\"./$.iter\"),l=e(\"./$.wks\")(\"iterator\"),u=\"@@iterator\",c=\"keys\",h=\"values\",f=o.Iterators;t.exports=function(e,t,r,d,p,m,b){function g(e){function t(t){return new r(t,e)}switch(e){case c:return function(){return t(this)};case h:return function(){return t(this)}}return function(){return t(this)}}o.create(r,t,d);var v,y,$=t+\" Iterator\",x=e.prototype,_=x[l]||x[u]||p&&x[p],w=_||g(p);if(_){var k=s.getProto(w.call(new e));a.set(k,$,!0),s.FW&&s.has(x,u)&&o.set(k,s.that)}if((s.FW||b)&&o.set(x,w),f[t]=w,f[$]=s.that,p)if(v={keys:m?w:g(c),values:p==h?w:g(h),entries:p!=h?w:g(\"entries\")},b)for(y in v)y in x||i(x,y,v[y]);else n(n.P+n.F*o.BUGGY,t,v)}},{\"./$\":38,\"./$.cof\":25,\"./$.def\":30,\"./$.iter\":37,\"./$.redef\":40,\"./$.wks\":46}],36:[function(e,t,r){var n=e(\"./$.wks\")(\"iterator\"),i=!1;try{var s=[7][n]();s[\"return\"]=function(){i=!0},Array.from(s,function(){throw 2})}catch(a){}t.exports=function(e){if(!i)return!1;var t=!1;try{var r=[7],s=r[n]();s.next=function(){t=!0},r[n]=function(){return s},e(r)}catch(a){}return t}},{\"./$.wks\":46}],37:[function(e,t,r){\"use strict\";function n(e,t){i.hide(e,u,t),c in[]&&i.hide(e,c,t)}var i=e(\"./$\"),s=e(\"./$.cof\"),a=s.classof,o=e(\"./$.assert\"),l=o.obj,u=e(\"./$.wks\")(\"iterator\"),c=\"@@iterator\",h=e(\"./$.shared\")(\"iterators\"),f={};n(f,i.that),t.exports={BUGGY:\"keys\"in[]&&!(\"next\"in[].keys()),Iterators:h,step:function(e,t){return{value:t,done:!!e}},is:function(e){var t=Object(e),r=i.g.Symbol;return(r&&r.iterator||c)in t||u in t||i.has(h,a(t))},get:function(e){var t,r=i.g.Symbol;return void 0!=e&&(t=e[r&&r.iterator||c]||e[u]||h[a(e)]),o(i.isFunction(t),e,\" is not iterable!\"),l(t.call(e))},set:n,create:function(e,t,r,n){e.prototype=i.create(n||f,{next:i.desc(1,r)}),s.set(e,t+\" Iterator\")}}},{\"./$\":38,\"./$.assert\":24,\"./$.cof\":25,\"./$.shared\":41,\"./$.wks\":46}],38:[function(e,t,r){\"use strict\";function n(e){return isNaN(e=+e)?0:(e>0?m:p)(e)}function i(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}function s(e,t,r){return e[t]=r,e}function a(e){return v?function(t,r,n){return $.setDesc(t,r,i(e,n))}:s}function o(e){return null!==e&&(\"object\"==typeof e||\"function\"==typeof e)}function l(e){return\"function\"==typeof e}function u(e){if(void 0==e)throw TypeError(\"Can't call method on  \"+e);return e}var c=\"undefined\"!=typeof self?self:Function(\"return this\")(),h={},f=Object.defineProperty,d={}.hasOwnProperty,p=Math.ceil,m=Math.floor,b=Math.max,g=Math.min,v=!!function(){try{return 2==f({},\"a\",{get:function(){return 2}}).a}catch(e){}}(),y=a(1),$=t.exports=e(\"./$.fw\")({g:c,core:h,html:c.document&&document.documentElement,isObject:o,isFunction:l,that:function(){return this},toInteger:n,toLength:function(e){return e>0?g(n(e),9007199254740991):0},toIndex:function(e,t){return e=n(e),0>e?b(e+t,0):g(e,t)},has:function(e,t){return d.call(e,t)},create:Object.create,getProto:Object.getPrototypeOf,DESC:v,desc:i,getDesc:Object.getOwnPropertyDescriptor,setDesc:f,setDescs:Object.defineProperties,getKeys:Object.keys,getNames:Object.getOwnPropertyNames,getSymbols:Object.getOwnPropertySymbols,assertDefined:u,ES5Object:Object,toObject:function(e){return $.ES5Object(u(e))},hide:y,def:a(0),set:c.Symbol?s:y,each:[].forEach});\"undefined\"!=typeof __e&&(__e=h),\"undefined\"!=typeof __g&&(__g=c)},{\"./$.fw\":32}],39:[function(e,t,r){var n=e(\"./$.redef\");t.exports=function(e,t){for(var r in t)n(e,r,t[r]);return e}},{\"./$.redef\":40}],40:[function(e,t,r){t.exports=e(\"./$\").hide},{\"./$\":38}],41:[function(e,t,r){var n=e(\"./$\"),i=\"__core-js_shared__\",s=n.g[i]||(n.g[i]={});\nt.exports=function(e){return s[e]||(s[e]={})}},{\"./$\":38}],42:[function(e,t,r){var n=e(\"./$\"),i=e(\"./$.wks\")(\"species\");t.exports=function(e){!n.DESC||i in e||n.setDesc(e,i,{configurable:!0,get:n.that})}},{\"./$\":38,\"./$.wks\":46}],43:[function(e,t,r){var n=e(\"./$\");t.exports=function(e){return function(t,r){var i,s,a=String(n.assertDefined(t)),o=n.toInteger(r),l=a.length;return 0>o||o>=l?e?\"\":void 0:(i=a.charCodeAt(o),55296>i||i>56319||o+1===l||(s=a.charCodeAt(o+1))<56320||s>57343?e?a.charAt(o):i:e?a.slice(o,o+2):(i-55296<<10)+(s-56320)+65536)}}},{\"./$\":38}],44:[function(e,t,r){function n(e){return\"Symbol(\".concat(void 0===e?\"\":e,\")_\",(++i+Math.random()).toString(36))}var i=0;n.safe=e(\"./$\").g.Symbol||n,t.exports=n},{\"./$\":38}],45:[function(e,t,r){t.exports=function(){}},{}],46:[function(e,t,r){var n=e(\"./$\").g,i=e(\"./$.shared\")(\"wks\");t.exports=function(t){return i[t]||(i[t]=n.Symbol&&n.Symbol[t]||e(\"./$.uid\").safe(\"Symbol.\"+t))}},{\"./$\":38,\"./$.shared\":41,\"./$.uid\":44}],47:[function(e,t,r){var n=e(\"./$\"),i=e(\"./$.ctx\"),s=e(\"./$.def\"),a=e(\"./$.iter\"),o=e(\"./$.iter-call\");s(s.S+s.F*!e(\"./$.iter-detect\")(function(e){Array.from(e)}),\"Array\",{from:function(e){var t,r,s,l,u=Object(n.assertDefined(e)),c=arguments[1],h=void 0!==c,f=h?i(c,arguments[2],2):void 0,d=0;if(a.is(u))for(l=a.get(u),r=new(\"function\"==typeof this?this:Array);!(s=l.next()).done;d++)r[d]=h?o(l,f,[s.value,d],!0):s.value;else for(r=new(\"function\"==typeof this?this:Array)(t=n.toLength(u.length));t>d;d++)r[d]=h?f(u[d],d):u[d];return r.length=d,r}})},{\"./$\":38,\"./$.ctx\":29,\"./$.def\":30,\"./$.iter\":37,\"./$.iter-call\":34,\"./$.iter-detect\":36}],48:[function(e,t,r){var n=e(\"./$\"),i=e(\"./$.unscope\"),s=e(\"./$.uid\").safe(\"iter\"),a=e(\"./$.iter\"),o=a.step,l=a.Iterators;e(\"./$.iter-define\")(Array,\"Array\",function(e,t){n.set(this,s,{o:n.toObject(e),i:0,k:t})},function(){var e=this[s],t=e.o,r=e.k,n=e.i++;return!t||n>=t.length?(e.o=void 0,o(1)):\"keys\"==r?o(0,n):\"values\"==r?o(0,t[n]):o(0,[n,t[n]])},\"values\"),l.Arguments=l.Array,i(\"keys\"),i(\"values\"),i(\"entries\")},{\"./$\":38,\"./$.iter\":37,\"./$.iter-define\":35,\"./$.uid\":44,\"./$.unscope\":45}],49:[function(e,t,r){var n=e(\"./$\"),i=e(\"./$.def\"),s=n.isObject,a=n.toObject;n.each.call(\"freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames\".split(\",\"),function(t,r){var o=(n.core.Object||{})[t]||Object[t],l=0,u={};u[t]=0==r?function(e){return s(e)?o(e):e}:1==r?function(e){return s(e)?o(e):e}:2==r?function(e){return s(e)?o(e):e}:3==r?function(e){return s(e)?o(e):!0}:4==r?function(e){return s(e)?o(e):!0}:5==r?function(e){return s(e)?o(e):!1}:6==r?function(e,t){return o(a(e),t)}:7==r?function(e){return o(Object(n.assertDefined(e)))}:8==r?function(e){return o(a(e))}:e(\"./$.get-names\").get;try{o(\"z\")}catch(c){l=1}i(i.S+i.F*l,\"Object\",u)})},{\"./$\":38,\"./$.def\":30,\"./$.get-names\":33}],50:[function(e,t,r){\"use strict\";var n=e(\"./$.cof\"),i={};i[e(\"./$.wks\")(\"toStringTag\")]=\"z\",e(\"./$\").FW&&\"z\"!=n(i)&&e(\"./$.redef\")(Object.prototype,\"toString\",function(){return\"[object \"+n.classof(this)+\"]\"},!0)},{\"./$\":38,\"./$.cof\":25,\"./$.redef\":40,\"./$.wks\":46}],51:[function(e,t,r){\"use strict\";var n=e(\"./$.collection-strong\");e(\"./$.collection\")(\"Set\",function(e){return function(){return e(this,arguments[0])}},{add:function(e){return n.def(this,e=0===e?0:e,e)}},n)},{\"./$.collection\":28,\"./$.collection-strong\":26}],52:[function(e,t,r){var n=e(\"./$\").set,i=e(\"./$.string-at\")(!0),s=e(\"./$.uid\").safe(\"iter\"),a=e(\"./$.iter\"),o=a.step;e(\"./$.iter-define\")(String,\"String\",function(e){n(this,s,{o:String(e),i:0})},function(){var e,t=this[s],r=t.o,n=t.i;return n>=r.length?o(1):(e=i(r,n),t.i+=e.length,o(0,e))})},{\"./$\":38,\"./$.iter\":37,\"./$.iter-define\":35,\"./$.string-at\":43,\"./$.uid\":44}],53:[function(e,t,r){e(\"./$.collection-to-json\")(\"Set\")},{\"./$.collection-to-json\":27}],54:[function(e,t,r){e(\"./es6.array.iterator\");var n=e(\"./$\"),i=e(\"./$.iter\").Iterators,s=e(\"./$.wks\")(\"iterator\"),a=i.Array,o=n.g.NodeList,l=n.g.HTMLCollection,u=o&&o.prototype,c=l&&l.prototype;n.FW&&(!o||s in u||n.hide(u,s,a),!l||s in c||n.hide(c,s,a)),i.NodeList=i.HTMLCollection=a},{\"./$\":38,\"./$.iter\":37,\"./$.wks\":46,\"./es6.array.iterator\":48}],55:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/create-class\")[\"default\"],i=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],s=e(\"babel-runtime/helpers/to-consumable-array\")[\"default\"],a=e(\"babel-runtime/core-js/set\")[\"default\"],o=e(\"babel-runtime/core-js/object/assign\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var l=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];i(this,e),this._selectedItems=new a,this._selectedClass=t.selectedClass||\"selected\",this._layer=null,this._params=o({},this.getDefaults(),t)}return n(e,[{key:\"initialize\",value:function(e){this._layer=e}},{key:\"destroy\",value:function(){}},{key:\"getDefaults\",value:function(){return{}}},{key:\"select\",value:function(e,t){e.classList.add(this.selectedClass),this._selectedItems.add(e)}},{key:\"unselect\",value:function(e,t){e.classList.remove(this.selectedClass),this._selectedItems[\"delete\"](e)}},{key:\"toggleSelection\",value:function(e,t){var r=this._selectedItems.has(e)?\"unselect\":\"select\";this[r](e)}},{key:\"edit\",value:function(e,t,r,n,i,s){}},{key:\"selectedClass\",set:function(e){this._selectedClass=e},get:function(){return this._selectedClass}},{key:\"selectedItems\",get:function(){return[].concat(s(this._selectedItems))}}]),e}();r[\"default\"]=l,t.exports=r[\"default\"]},{\"babel-runtime/core-js/object/assign\":79,\"babel-runtime/core-js/set\":86,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/to-consumable-array\":95}],56:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var l=e(\"./base-behavior\"),u=o(l),c=function(e){function t(){a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).apply(this,arguments)}return i(t,e),s(t,[{key:\"edit\",value:function(e,t,r,n,i,s){var a=this._layer.data,o=e.height,l=e.timeToPixel(t.cx(r)),u=e.valueToPixel(t.cy(r)),c=l+n,h=u-i;if(a.length>2){var f=a.map(function(r){return e.timeToPixel(t.cx(r))});f.sort(function(e,t){return t>e?-1:1});var d=f.indexOf(l);(c<f[d-1]||c>f[d+1])&&(c=l)}0>h?h=0:h>o&&(h=o),t.cx(r,e.timeToPixel.invert(c)),t.cy(r,e.valueToPixel.invert(h))}}]),t}(u[\"default\"]);r[\"default\"]=c,t.exports=r[\"default\"]},{\"./base-behavior\":55,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93}],57:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/create-class\")[\"default\"],i=e(\"babel-runtime/helpers/class-call-check\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var s=function(){function e(){i(this,e)}return n(e,[{key:\"edit\",value:function(e,t,r,n){var i=e.timeContext;n.classList.contains(\"handler\")&&n.classList.contains(\"left\")?this._editLeft(i,t):n.classList.contains(\"handler\")&&n.classList.contains(\"right\")?this._editRight(i,t):n.classList.contains(\"segment\")&&this._move(i,t)}},{key:\"_editLeft\",value:function(e,t){var r=e.parent.timeToPixel(e.start),n=e.timeToPixel(e.offset),i=e.timeToPixel(e.duration),s=r+t,a=n-t,o=Math.max(i-t,1);e.start=e.parent.timeToPixel.invert(s),e.offset=e.timeToPixel.invert(a),e.duration=e.timeToPixel.invert(o)}},{key:\"_editRight\",value:function(e,t){var r=e.timeToPixel(e.duration),n=Math.max(r+t,1);e.duration=e.timeToPixel.invert(n)}},{key:\"_move\",value:function(e,t){var r=e.parent.timeToPixel(e.start),n=Math.max(r+t,0);e.start=e.parent.timeToPixel.invert(n)}},{key:\"stretch\",value:function(e,t,r,n){var i=e.timeContext,s=i.duration,a=i.offset;this.edit(e,t,r,n);var o=i.duration,l=o/s;i.stretchRatio*=l,i.offset=a,i.duration=s}}]),e}();r[\"default\"]=s,t.exports=r[\"default\"]},{\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90}],58:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/create-class\")[\"default\"],i=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],s=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var a=e(\"../utils/scales\"),o=s(a),l=function(){function e(t){if(i(this,e),!t)throw new Error(\"LayerTimeContext must have a parent\");this.parent=t,this._timeToPixel=null,this._start=0,this._duration=t.visibleDuration,this._offset=0,this._stretchRatio=1,this.parent._children.push(this)}return n(e,[{key:\"clone\",value:function(){var e=new this;return e.parent=this.parent,e.start=this.start,e.duration=this.duration,e.offset=this.offset,e.stretchRatio=this.stretchRatio,e}},{key:\"start\",get:function(){return this._start},set:function(e){this._start=e}},{key:\"duration\",get:function(){return this._duration},set:function(e){this._duration=e}},{key:\"offset\",get:function(){return this._offset},set:function(e){this._offset=e}},{key:\"stretchRatio\",get:function(){return this._stretchRatio},set:function(e){if(1===e)return void(this._timeToPixel=null);var t=this._timeToPixel?this._timeToPixel:o[\"default\"].linear().domain([0,1]);t.range([0,this.parent.computedPixelsPerSecond*e]),this._timeToPixel=t,this._stretchRatio=e}},{key:\"timeToPixel\",get:function(){return this._timeToPixel?this._timeToPixel:this.parent.timeToPixel}}]),e}();r[\"default\"]=l,t.exports=r[\"default\"]},{\"../utils/scales\":74,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/interop-require-default\":93}],59:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/helpers/sliced-to-array\")[\"default\"],l=e(\"babel-runtime/core-js/object/assign\")[\"default\"],u=e(\"babel-runtime/core-js/map\")[\"default\"],c=e(\"babel-runtime/core-js/get-iterator\")[\"default\"],h=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var f=e(\"../utils/scales\"),d=h(f),p=e(\"events\"),m=h(p),b=e(\"./namespace\"),g=h(b),v=e(\"../shapes/segment\"),y=h(v),$=e(\"../behaviors/time-context-behavior\"),x=h($),_=null,w=x[\"default\"],k=function(e){function t(e,r){var i=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),this.dataType=e,this.data=r;var s={height:100,top:0,id:\"\",yDomain:[0,1],opacity:1,contextHandlerWidth:2,className:null};this.params=l({},s,i),this.timeContext=null,this.$el=null,this.$boundingBox=null,this.$offset=null,this.$interactions=null,this._shapeConfiguration=null,this._commonShapeConfiguration=null,this._$itemShapeMap=new u,this._$itemDataMap=new u,this._$itemCommonShapeMap=new u,this._isContextEditable=!1,this._behavior=null,this._valueToPixel=d[\"default\"].linear().domain(this.params.yDomain).range([0,this.params.height]),this.contextBehavior=\"\",this._renderContainer(),null===_&&(_=new w)}return i(t,e),s(t,[{key:\"destroy\",value:function(){this.timeContext=null,this.data=null,this.params=null,this._behavior=null,this._$itemShapeMap.clear(),this._$itemDataMap.clear(),this._$itemCommonShapeMap.clear(),this.removeAllListeners()}},{key:\"setTimeContext\",value:function(e){this.timeContext=e,this._renderingContext={},this._updateRenderingContext()}},{key:\"_renderContainer\",value:function(){var e=this;this.$el=document.createElementNS(g[\"default\"],\"g\"),null!==this.params.className&&this.$el.classList.add(\"layer\",this.params.className),this.$boundingBox=document.createElementNS(g[\"default\"],\"svg\"),this.$boundingBox.classList.add(\"bounding-box\"),this.$offset=document.createElementNS(g[\"default\"],\"g\"),this.$offset.classList.add(\"offset\",\"items\"),this.$background=document.createElementNS(g[\"default\"],\"rect\"),this.$background.setAttributeNS(null,\"height\",\"100%\"),this.$background.setAttributeNS(null,\"width\",\"100%\"),this.$background.classList.add(\"background\"),this.$background.style.fillOpacity=0,this.$background.style.pointerEvents=\"none\",this.$interactions=document.createElementNS(g[\"default\"],\"g\"),this.$interactions.classList.add(\"interactions\"),this.$interactions.style.display=\"none\",this.contextShape=new y[\"default\"],this.contextShape.install({opacity:function(){return.1},color:function(){return\"#787878\"},width:function(){return e.timeContext.duration},height:function(){return e._renderingContext.valueToPixel.domain()[1]},y:function(){return e._renderingContext.valueToPixel.domain()[0]}}),this.$interactions.appendChild(this.contextShape.render()),this.$el.appendChild(this.$boundingBox),this.$boundingBox.appendChild(this.$offset),this.$offset.appendChild(this.$background),this.$boundingBox.appendChild(this.$interactions)}},{key:\"configureShape\",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],r=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];this._shapeConfiguration={ctor:e,accessors:t,options:r}}},{key:\"configureCommonShape\",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],r=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];this._commonShapeConfiguration={ctor:e,accessors:t,options:r}}},{key:\"setBehavior\",value:function(e){e.initialize(this),this._behavior=e}},{key:\"_updateRenderingContext\",value:function(){this._renderingContext.timeToPixel=this.timeContext.timeToPixel,this._renderingContext.valueToPixel=this._valueToPixel,this._renderingContext.height=this.params.height,this._renderingContext.width=this.timeContext.timeToPixel(this.timeContext.duration),this._renderingContext.offsetX=this.timeContext.timeToPixel(this.timeContext.offset),this._renderingContext.trackOffsetX=this.timeContext.parent.timeToPixel(this.timeContext.parent.offset),this._renderingContext.visibleWidth=this.timeContext.parent.visibleWidth}},{key:\"select\",value:function(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];if(this._behavior){t.length||(t=this._$itemDataMap.keys()),Array.isArray(t[0])&&(t=t[0]);var n=!0,i=!1,s=void 0;try{for(var a,o=c(t);!(n=(a=o.next()).done);n=!0){var l=a.value,u=this._$itemDataMap.get(l);this._behavior.select(l,u),this._toFront(l)}}catch(h){i=!0,s=h}finally{try{!n&&o[\"return\"]&&o[\"return\"]()}finally{if(i)throw s}}}}},{key:\"unselect\",value:function(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];if(this._behavior){t.length||(t=this._$itemDataMap.keys()),Array.isArray(t[0])&&(t=t[0]);var n=!0,i=!1,s=void 0;try{for(var a,o=c(t);!(n=(a=o.next()).done);n=!0){var l=a.value,u=this._$itemDataMap.get(l);this._behavior.unselect(l,u)}}catch(h){i=!0,s=h}finally{try{!n&&o[\"return\"]&&o[\"return\"]()}finally{if(i)throw s}}}}},{key:\"toggleSelection\",value:function(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];if(this._behavior){t.length||(t=this._$itemDataMap.keys()),Array.isArray(t[0])&&(t=t[0]);var n=!0,i=!1,s=void 0;try{for(var a,o=c(t);!(n=(a=o.next()).done);n=!0){var l=a.value,u=this._$itemDataMap.get(l);this._behavior.toggleSelection(l,u)}}catch(h){i=!0,s=h}finally{try{!n&&o[\"return\"]&&o[\"return\"]()}finally{if(i)throw s}}}}},{key:\"edit\",value:function(e,t,r,n){if(this._behavior){e=Array.isArray(e)?e:[e];var i=!0,s=!1,a=void 0;try{for(var o,l=c(e);!(i=(o=l.next()).done);i=!0){var u=o.value,h=this._$itemShapeMap.get(u),f=this._$itemDataMap.get(u);this._behavior.edit(this._renderingContext,h,f,t,r,n),this.emit(\"edit\",h,f)}}catch(d){s=!0,a=d}finally{try{!i&&l[\"return\"]&&l[\"return\"]()}finally{if(s)throw a}}}}},{key:\"setContextEditable\",value:function(){var e=arguments.length<=0||void 0===arguments[0]?!0:arguments[0],t=e?\"block\":\"none\";this.$interactions.style.display=t,this._isContextEditable=e}},{key:\"editContext\",value:function(e,t,r){_.edit(this,e,t,r)}},{key:\"stretchContext\",value:function(e,t,r){_.stretch(this,e,t,r)}},{key:\"_toFront\",value:function(e){this.$offset.appendChild(e)}},{key:\"getItemFromDOMElement\",value:function(e){var t=void 0;do{if(e.classList&&e.classList.contains(\"item\")){t=e;break}e=e.parentNode}while(null!==e);return this.hasItem(t)?t:null}},{key:\"getDatumFromItem\",value:function(e){return this._$itemDataMap.get(e)}},{key:\"getDatumFromDOMElement\",value:function(e){var t=this.getItemFromDOMElement(e);return null===t?null:this.getDatumFromItem(t)}},{key:\"hasItem\",value:function(e){return this._$itemDataMap.has(e)}},{key:\"hasElement\",value:function(e){do{if(e===this.$el)return!0;e=e.parentNode}while(null!==e);return!1}},{key:\"getItemsInArea\",value:function(e){var t=this.timeContext.timeToPixel(this.timeContext.start),r=this.timeContext.timeToPixel(this.timeContext.duration),n=this.timeContext.timeToPixel(this.timeContext.offset),i=(this.params.top,Math.max(e.left,t)),s=Math.min(e.left+e.width,t+r);i-=t+n,s-=t+n;var a=this.params.height-(e.top+e.height),l=this.params.height-e.top;a+=this.params.top,l+=this.params.top;var u=[],h=!0,f=!1,d=void 0;try{for(var p,m=c(this._$itemDataMap.entries());!(h=(p=m.next()).done);h=!0){var b=o(p.value,2),g=b[0],v=b[1],y=this._$itemShapeMap.get(g),$=y.inArea(this._renderingContext,v,i,a,s,l);$&&u.push(g)}}catch(x){f=!0,d=x}finally{try{!h&&m[\"return\"]&&m[\"return\"]()}finally{if(f)throw d}}return u}},{key:\"render\",value:function(){var e=this;if(null!==this._commonShapeConfiguration&&0===this._$itemCommonShapeMap.size){var t=this._commonShapeConfiguration,r=t.ctor,n=t.accessors,i=t.options,s=document.createElementNS(g[\"default\"],\"g\"),a=new r(i);a.install(n),s.appendChild(a.render()),s.classList.add(\"item\",\"common\",a.getClassName()),this._$itemCommonShapeMap.set(s,a),this.$offset.appendChild(s)}var l=document.createDocumentFragment(),u=this._$itemDataMap.values();this.data.forEach(function(t){var r=!0,n=!1,i=void 0;try{for(var s,a=c(u);!(r=(s=a.next()).done);r=!0){var o=s.value;if(o===t)return}}catch(h){n=!0,i=h}finally{try{!r&&a[\"return\"]&&a[\"return\"]()}finally{if(n)throw i}}var f=e._shapeConfiguration,d=f.ctor,p=f.accessors,m=f.options,b=new d(m);b.install(p);var g=b.render(e._renderingContext);g.classList.add(\"item\",b.getClassName()),e._$itemShapeMap.set(g,b),e._$itemDataMap.set(g,t),l.appendChild(g)}),this.$offset.appendChild(l);var h=!0,f=!1,d=void 0;try{for(var p,m=c(this._$itemDataMap.entries());!(h=(p=m.next()).done);h=!0){var b=o(p.value,2),v=b[0],y=b[1];if(-1===this.data.indexOf(y)){this.$offset.removeChild(v);var a=this._$itemShapeMap.get(v);a.destroy(),this._behavior.unselect(v,y),this._$itemDataMap[\"delete\"](v),this._$itemShapeMap[\"delete\"](v)}}}catch($){f=!0,d=$}finally{try{!h&&m[\"return\"]&&m[\"return\"]()}finally{if(f)throw d}}}},{key:\"update\",value:function(){this.updateContainer(),this.updateShapes()}},{key:\"updateContainer\",value:function(){this._updateRenderingContext();var e=this.timeContext,t=e.timeToPixel(e.duration),r=e.parent.timeToPixel(e.start),n=e.timeToPixel(e.offset),i=this.params.top,s=this.params.height,a=\"matrix(1, 0, 0, -1, \"+r+\", \"+(i+s)+\")\";this.$el.setAttributeNS(null,\"transform\",a),this.$boundingBox.setAttributeNS(null,\"width\",t),this.$boundingBox.setAttributeNS(null,\"height\",s),this.$boundingBox.style.opacity=this.params.opacity,this.$offset.setAttributeNS(null,\"transform\",\"translate(\"+n+\", 0)\"),this.contextShape.update(this._renderingContext,this.timeContext,0)}},{key:\"updateShapes\",value:function(){var e=this;arguments.length<=0||void 0===arguments[0]?null:arguments[0];this._updateRenderingContext(),this._$itemCommonShapeMap.forEach(function(t,r){t.update(e._renderingContext,e.data)});var t=!0,r=!1,n=void 0;try{for(var i,s=c(this._$itemDataMap.entries());!(t=(i=s.next()).done);t=!0){var a=o(i.value,2),l=a[0],u=a[1],h=this._$itemShapeMap.get(l);h.update(this._renderingContext,u)}}catch(f){r=!0,n=f}finally{try{!t&&s[\"return\"]&&s[\"return\"]()}finally{if(r)throw n}}}},{key:\"start\",get:function(){return this.timeContext.start},set:function(e){this.timeContext.start=e}},{key:\"offset\",get:function(){return this.timeContext.offset},set:function(e){this.timeContext.offset=e}},{key:\"duration\",get:function(){return this.timeContext.duration},set:function(e){this.timeContext.duration=e}},{key:\"stretchRatio\",get:function(){return this.timeContext.stretchRatio},set:function(e){this.timeContext.stretchRatio=e}},{key:\"yDomain\",set:function(e){this.params.yDomain=e,this._valueToPixel.domain(e)},get:function(){return this.params.yDomain}},{key:\"opacity\",set:function(e){this.params.opacity=e},get:function(){return this.params.opacity}},{key:\"items\",get:function(){var e=[],t=!0,r=!1,n=void 0;try{for(var i,s=c(this._$itemDataMap.keys());!(t=(i=s.next()).done);t=!0){var a=i.value;e.push(a)}}catch(o){r=!0,n=o}finally{try{!t&&s[\"return\"]&&s[\"return\"]()}finally{if(r)throw n}}return e}},{key:\"data\",get:function(){return this._data},set:function(e){switch(this.dataType){case\"entity\":this._data?this._data[0]=e:this._data=[e];break;case\"collection\":this._data=e}}},{key:\"selectedItems\",get:function(){return this._behavior?this._behavior.selectedItems:[]}}],[{key:\"configureTimeContextBehavior\",value:function(e){w=e}}]),t}(m[\"default\"].EventEmitter);r[\"default\"]=k,t.exports=r[\"default\"]},{\"../behaviors/time-context-behavior\":57,\"../shapes/segment\":72,\"../utils/scales\":74,\"./namespace\":60,\"babel-runtime/core-js/get-iterator\":76,\"babel-runtime/core-js/map\":78,\"babel-runtime/core-js/object/assign\":79,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93,\"babel-runtime/helpers/sliced-to-array\":94,events:159}],60:[function(e,t,r){\"use strict\";Object.defineProperty(r,\"__esModule\",{value:!0}),r[\"default\"]=\"http://www.w3.org/2000/svg\",t.exports=r[\"default\"]},{}],61:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/create-class\")[\"default\"],i=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],s=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var a=e(\"../utils/scales\"),o=s(a),l=function(){function e(t,r){i(this,e),this._children=[],this._timeToPixel=null,this._offset=0,this._zoom=1,this._computedPixelsPerSecond=t,this._visibleWidth=r,this._visibleDuration=this.visibleWidth/this._computedPixelsPerSecond,this._maintainVisibleDuration=!1;var n=o[\"default\"].linear().domain([0,1]).range([0,t]);this.timeToPixel=n,this._originalPixelsPerSecond=this._computedPixelsPerSecond}return n(e,[{key:\"_updateTimeToPixelRange\",value:function(){this._visibleDuration=this.visibleWidth/this._computedPixelsPerSecond,this.timeToPixel.range([0,this._computedPixelsPerSecond])}},{key:\"pixelsPerSecond\",get:function(){return this._originalPixelsPerSecond},set:function(e){this._computedPixelsPerSecond=e*this.zoom,this._originalPixelsPerSecond=e,this._updateTimeToPixelRange(),this._children.forEach(function(e){e._timeToPixel&&(e.stretchRatio=e.stretchRatio)})}},{key:\"computedPixelsPerSecond\",get:function(){return this._computedPixelsPerSecond}},{key:\"offset\",get:function(){return this._offset},set:function(e){this._offset=e}},{key:\"zoom\",get:function(){return this._zoom},set:function(e){var t=e/this._zoom;this._zoom=e,this._computedPixelsPerSecond=this._originalPixelsPerSecond*e,this._updateTimeToPixelRange(),this._children.forEach(function(e){e._timeToPixel&&(e.stretchRatio=e.stretchRatio*t)})}},{key:\"visibleWidth\",get:function(){return this._visibleWidth},set:function(e){var t=e/this.visibleWidth;this._visibleWidth=e,this._visibleDuration=this.visibleWidth/this._computedPixelsPerSecond,this.maintainVisibleDuration&&(this.pixelsPerSecond=this._computedPixelsPerSecond*t)}},{key:\"visibleDuration\",get:function(){return this._visibleDuration}},{key:\"maintainVisibleDuration\",get:function(){return this._maintainVisibleDuration},set:function(e){this._maintainVisibleDuration=e}},{key:\"timeToPixel\",get:function(){return this._timeToPixel},set:function(e){this._timeToPixel=e}}]),e}();r[\"default\"]=l,t.exports=r[\"default\"]},{\"../utils/scales\":74,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/interop-require-default\":93}],62:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/core-js/symbol/iterator\")[\"default\"],l=e(\"babel-runtime/regenerator\")[\"default\"],u=e(\"babel-runtime/core-js/get-iterator\")[\"default\"],c=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var h=e(\"events\"),f=c(h),d=e(\"../interactions/keyboard\"),p=c(d),m=e(\"./layer-time-context\"),b=c(m),g=e(\"../interactions/surface\"),v=c(g),y=e(\"./timeline-time-context\"),$=c(y),x=e(\"./track\"),_=c(x),w=e(\"./track-collection\"),k=c(w),j=function(e){function t(){var e=arguments.length<=0||void 0===arguments[0]?100:arguments[0],r=arguments.length<=1||void 0===arguments[1]?1e3:arguments[1],i=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],s=i.registerKeyboard,o=void 0===s?!0:s;a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),this._tracks=new k[\"default\"](this),this._state=null,this._surfaceCtor=v[\"default\"],o&&this.createInteraction(p[\"default\"],document),this._trackById={},this._groupedLayers={},this.timeContext=new $[\"default\"](e,r)}return i(t,e),s(t,[{key:\"configureSurface\",value:function(e){this._surfaceCtor=e}},{key:\"createInteraction\",value:function(e,t){var r=this,n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],i=new e(t,n);i.on(\"event\",function(e){return r._handleEvent(e)})}},{key:\"_handleEvent\",value:function(e){this.emit(\"event\",e),this._state&&this._state.handleEvent(e)}},{key:\"add\",value:function(e){if(-1!==this.tracks.indexOf(e))throw new Error(\"track already added to the timeline\");e.configure(this.timeContext),this.tracks.push(e),this.createInteraction(this._surfaceCtor,e.$el)}},{key:\"remove\",value:function(e){}},{key:\"createTrack\",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?100:arguments[1],r=arguments.length<=2||void 0===arguments[2]?null:arguments[2],n=new _[\"default\"](e,t);if(null!==r){if(void 0!==this._trackById[r])throw new Error('trackId: \"'+r+'\" is already used');this._trackById[r]=n}return this.add(n),n.render(),n.update(),n}},{key:\"addLayer\",value:function(e,t){var r=arguments.length<=2||void 0===arguments[2]?\"default\":arguments[2],n=arguments.length<=3||void 0===arguments[3]?!1:arguments[3],i=t;if(\"string\"==typeof t&&(i=this.getTrackById(t)),!e.timeContext){var s=n?this.timeContext:new b[\"default\"](this.timeContext);e.setTimeContext(s)}i.add(e),this._groupedLayers[r]||(this._groupedLayers[r]=[]),this._groupedLayers[r].push(e),e.render(),e.update()}},{key:\"removeLayer\",value:function(e){this.tracks.forEach(function(t){var r=t.layers.indexOf(e);-1!==r&&t.remove(e)});for(var t in this._groupedLayers){var r=this._groupedLayers[t],n=r.indexOf(e);-1!==n&&r.splice(e,1),r.length||delete this._groupedLayers[t]}}},{key:\"getTrackById\",value:function(e){return this._trackById[e]}},{key:\"getTrackFromDOMElement\",value:function(e){var t=null,r=null;do e.classList.contains(\"track\")&&(t=e),e=e.parentNode;while(null===t);return this.tracks.forEach(function(e){e.$svg===t&&(r=e)}),r}},{key:\"getLayersByGroup\",value:function(e){return this._groupedLayers[e]}},{key:o,value:l.mark(function r(){return l.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(u(this.tracks),\"t0\",1);case 1:case\"end\":return e.stop()}},r,this)})},{key:\"offset\",get:function(){return this.timeContext.offset},set:function(e){this.timeContext.offset=e}},{key:\"zoom\",get:function(){return this.timeContext.zoom},set:function(e){this.timeContext.zoom=e}},{key:\"pixelsPerSecond\",get:function(){return this.timeContext.pixelsPerSecond},set:function(e){this.timeContext.pixelsPerSecond=e}},{key:\"visibleWidth\",get:function(){return this.timeContext.visibleWidth},set:function(e){this.timeContext.visibleWidth=e}},{key:\"timeToPixel\",get:function(){return this.timeContext.timeToPixel}},{key:\"visibleDuration\",get:function(){return this.timeContext.visibleDuration}},{key:\"maintainVisibleDuration\",set:function(e){this.timeContext.maintainVisibleDuration=e},get:function(){return this.timeContext.maintainVisibleDuration}},{key:\"groupedLayers\",get:function(){return this._groupedLayers}},{key:\"state\",set:function(e){this._state&&this._state.exit(),this._state=e,this._state&&this._state.enter()},get:function(){return this._state}},{key:\"tracks\",get:function(){return this._tracks}},{key:\"layers\",get:function(){return this._tracks.layers}}]),t}(f[\"default\"].EventEmitter);r[\"default\"]=j,t.exports=r[\"default\"]},{\"../interactions/keyboard\":66,\"../interactions/surface\":67,\"./layer-time-context\":58,\"./timeline-time-context\":61,\"./track\":64,\"./track-collection\":63,\"babel-runtime/core-js/get-iterator\":76,\"babel-runtime/core-js/symbol/iterator\":88,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93,\"babel-runtime/regenerator\":156,events:159}],63:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var l=e(\"./layer\"),u=o(l),c=function(e){function t(e){a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),this._timeline=e}return i(t,e),s(t,[{key:\"_getLayersOrGroups\",value:function(){var e=arguments.length<=0||void 0===arguments[0]?null:arguments[0],t=null;return t=\"string\"==typeof e?this._timeline.groupedLayers[e]:e instanceof u[\"default\"]?[e]:this.layers}},{key:\"render\",value:function(){this.forEach(function(e){return e.render()}),this._timeline.emit(\"render\")}},{key:\"update\",value:function(e){var t=this._getLayersOrGroups(e);this.forEach(function(e){return e.update(t)}),this._timeline.emit(\"update\",t)}},{key:\"updateContainer\",value:function(e){this.forEach(function(e){return e.updateContainer()}),this._timeline.emit(\"update:containers\")}},{key:\"updateLayers\",value:function(e){var t=this._getLayersOrGroups(e);this.forEach(function(e){return e.updateLayers(t)}),this._timeline.emit(\"update:layers\",t)}},{key:\"height\",set:function(e){this.forEach(function(t){return t.height=e})}},{key:\"layers\",get:function(){var e=[];return this.forEach(function(t){return e=e.concat(t.layers)}),e}}]),t}(Array);r[\"default\"]=c,t.exports=r[\"default\"]},{\"./layer\":59,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93}],64:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/create-class\")[\"default\"],i=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],s=e(\"babel-runtime/core-js/get-iterator\")[\"default\"],a=e(\"babel-runtime/core-js/symbol/iterator\")[\"default\"],o=e(\"babel-runtime/regenerator\")[\"default\"],l=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var u=e(\"./namespace\"),c=l(u),h=function(){function e(t){var r=arguments.length<=1||void 0===arguments[1]?100:arguments[1];i(this,e),this.$el=t,this.layers=[],this._height=r,this.renderingContext=null,this._createContainer()}return n(e,[{key:\"configure\",\nvalue:function(e){this.renderingContext=e}},{key:\"destroy\",value:function(){var e=this;this.$el.removeChild(this.$svg),this.layers.forEach(function(t){return e.$layout.removeChild(t.$el)}),this.$el=null,this.renderingContext=null,this.layers.length=0}},{key:\"_createContainer\",value:function(){var e=document.createElementNS(c[\"default\"],\"svg\");e.setAttributeNS(null,\"shape-rendering\",\"optimizeSpeed\"),e.setAttributeNS(null,\"height\",this.height),e.setAttribute(\"xmlns:xhtml\",\"http://www.w3.org/1999/xhtml\"),e.classList.add(\"track\");var t=document.createElementNS(c[\"default\"],\"rect\");t.setAttributeNS(null,\"height\",\"100%\"),t.setAttributeNS(null,\"width\",\"100%\"),t.setAttributeNS(null,\"style\",\"fill-opacity:0\");var r=document.createElementNS(c[\"default\"],\"defs\"),n=document.createElementNS(c[\"default\"],\"g\");n.classList.add(\"offset\");var i=document.createElementNS(c[\"default\"],\"g\");i.classList.add(\"layout\");var s=document.createElementNS(c[\"default\"],\"g\");s.classList.add(\"interactions\"),e.appendChild(r),e.appendChild(t),n.appendChild(i),e.appendChild(n),e.appendChild(s),this.$el.appendChild(e),this.$el.style.fontSize=0,this.$el.style.transform=\"translateZ(0)\",this.$layout=i,this.$offset=n,this.$interactions=s,this.$svg=e,this.$background=t}},{key:\"add\",value:function(e){this.layers.push(e),this.$layout.appendChild(e.$el)}},{key:\"remove\",value:function(e){this.layers.splice(this.layers.indexOf(e),1),this.$layout.removeChild(e.$el)}},{key:\"render\",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,i=s(this);!(e=(n=i.next()).done);e=!0){var a=n.value;a.render()}}catch(o){t=!0,r=o}finally{try{!e&&i[\"return\"]&&i[\"return\"]()}finally{if(t)throw r}}}},{key:\"update\",value:function(){var e=arguments.length<=0||void 0===arguments[0]?null:arguments[0];this.updateContainer(),this.updateLayers(e)}},{key:\"updateContainer\",value:function(){var e=this.$svg,t=this.$offset,r=this.renderingContext,n=this.height,i=r.visibleWidth,s=r.timeToPixel(r.offset),a=\"translate(\"+s+\", 0)\";e.setAttributeNS(null,\"height\",n),e.setAttributeNS(null,\"width\",i),e.setAttributeNS(null,\"viewbox\",\"0 0 \"+i+\" \"+n),t.setAttributeNS(null,\"transform\",a)}},{key:\"updateLayers\",value:function(){var e=this,t=arguments.length<=0||void 0===arguments[0]?null:arguments[0];t=null===t?this.layers:t,t.forEach(function(t){-1!==e.layers.indexOf(t)&&t.update()})}},{key:a,value:o.mark(function t(){return o.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.delegateYield(s(this.layers),\"t0\",1);case 1:case\"end\":return e.stop()}},t,this)})},{key:\"height\",get:function(){return this._height},set:function(e){this._height=e}}]),e}();r[\"default\"]=h,t.exports=r[\"default\"]},{\"./namespace\":60,\"babel-runtime/core-js/get-iterator\":76,\"babel-runtime/core-js/symbol/iterator\":88,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/interop-require-default\":93,\"babel-runtime/regenerator\":156}],65:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var l=e(\"events\"),u=o(l),c=function(e){function t(e){a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this),this.el=e,this._bindEvents()}return i(t,e),s(t,[{key:\"_createEvent\",value:function(e,t){}},{key:\"_bindEvents\",value:function(){}}]),t}(u[\"default\"].EventEmitter);r[\"default\"]=c,t.exports=r[\"default\"]},{\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93,events:159}],66:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var l=e(\"./event-source\"),u=o(l),c=e(\"./wave-event\"),h=o(c),f=function(e){function t(e){return a(this,t),t._instance?t._instance:(n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this,e),this.sourceName=\"keyboard\",void(t._instance=this))}return i(t,e),s(t,[{key:\"_createEvent\",value:function(e,t){var r=new h[\"default\"](this.sourceName,e,t);return r.shiftKey=t.shiftKey,r.ctrlKey=t.ctrlKey,r.altKey=t.altKey,r.metaKey=t.metaKey,r[\"char\"]=String.fromCharCode(t.keyCode),r}},{key:\"_bindEvents\",value:function(){var e=this,t=function(t){var r=e._createEvent(\"keydown\",t);e.emit(\"event\",r)},r=function(t){var r=e._createEvent(\"keyup\",t);e.emit(\"event\",r)};this.el.addEventListener(\"keydown\",t,!1),this.el.addEventListener(\"keyup\",r,!1)}}]),t}(u[\"default\"]);r[\"default\"]=f,t.exports=r[\"default\"]},{\"./event-source\":65,\"./wave-event\":68,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93}],67:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var l=e(\"./event-source\"),u=o(l),c=e(\"./wave-event\"),h=o(c),f=(window.document.body,function(e){function t(e){a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).call(this,e),this.sourceName=\"surface\",this.mouseDownEvent=null,this.lastEvent=null}return i(t,e),s(t,[{key:\"_createEvent\",value:function(e,t){var r=new h[\"default\"](this.sourceName,e,t),n=this._getRelativePosition(t);return r.x=n.x,r.y=n.y,this.dx=null,this.dy=null,this.area=null,r}},{key:\"_getRelativePosition\",value:function(e){var t=0,r=0,n=this.el.getBoundingClientRect(),i=document.body.scrollLeft+document.documentElement.scrollLeft,s=document.body.scrollTop+document.documentElement.scrollTop;return e.pageX||e.pageY?(t=e.pageX,r=e.pageY):(e.clientX||e.clientY)&&(t=e.clientX+i,r=e.clientY+s),t-=n.left+i,r-=n.top+s,{x:t,y:r}}},{key:\"_defineArea\",value:function(e,t,r){if(t&&r){e.dx=e.x-r.x,e.dy=e.y-r.y;var n=t.x<e.x?t.x:e.x,i=t.y<e.y?t.y:e.y,s=Math.abs(Math.round(e.x-t.x)),a=Math.abs(Math.round(e.y-t.y));e.area={left:n,top:i,width:s,height:a}}}},{key:\"_bindEvents\",value:function(){var e=this,t=function(t){window.getSelection().removeAllRanges();var i=e._createEvent(\"mousedown\",t);e.isMouseDown=!0,e.mouseDownEvent=i,e.lastEvent=i,window.addEventListener(\"mousemove\",r,!1),window.addEventListener(\"mouseup\",n,!1),e.emit(\"event\",i)},r=function(t){var r=e._createEvent(\"mousemove\",t);e._defineArea(r,e.mouseDownEvent,e.lastEvent),e.lastEvent=r,e.emit(\"event\",r)},n=function l(t){var n=e._createEvent(\"mouseup\",t);e._defineArea(n,e.mouseDownEvent,e.lastEvent),e.isMouseDown=!1,e.mouseDownEvent=null,e.lastEvent=null,window.removeEventListener(\"mousemove\",r),window.removeEventListener(\"mouseup\",l),e.emit(\"event\",n)},i=function(t){var r=e._createEvent(\"click\",t);e.emit(\"event\",r)},s=function(t){var r=e._createEvent(\"dblclick\",t);e.emit(\"event\",r)},a=function(t){var r=e._createEvent(\"mouseover\",t);e.emit(\"event\",r)},o=function(t){var r=e._createEvent(\"mouseout\",t);e.emit(\"event\",r)};this.el.addEventListener(\"mousedown\",t,!1),this.el.addEventListener(\"click\",i,!1),this.el.addEventListener(\"dblclick\",s,!1),this.el.addEventListener(\"mouseover\",a,!1),this.el.addEventListener(\"mouseout\",o,!1)}}]),t}(u[\"default\"]));r[\"default\"]=f,t.exports=r[\"default\"]},{\"./event-source\":65,\"./wave-event\":68,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93}],68:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/class-call-check\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var i=function s(e,t,r){n(this,s),this.source=e,this.type=t,this.originalEvent=r,this.target=r.target,this.currentTarget=r.currentTarget};r[\"default\"]=i,t.exports=r[\"default\"]},{\"babel-runtime/helpers/class-call-check\":89}],69:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/create-class\")[\"default\"],i=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],s=e(\"babel-runtime/core-js/object/assign\")[\"default\"],a=e(\"babel-runtime/core-js/object/keys\")[\"default\"],o=e(\"babel-runtime/core-js/object/define-property\")[\"default\"],l=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var u=e(\"../core/namespace\"),c=l(u),h=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];i(this,e),this.$el=null,this.ns=c[\"default\"],this.params=s({},this._getDefaults(),t);var r=this._getAccessorList();this._createAccessors(r),this._setDefaultAccessors(r)}return n(e,[{key:\"_getDefaults\",value:function(){return{}}},{key:\"destroy\",value:function(){this.$el=null}},{key:\"getClassName\",value:function(){return\"shape\"}},{key:\"_getAccessorList\",value:function(){return{}}},{key:\"install\",value:function(e){for(var t in e)this[t]=e[t]}},{key:\"_createAccessors\",value:function(e){this._accessors={};var t=Object.getPrototypeOf(this);a(e).forEach(function(e){t.hasOwnProperty(e)||o(t,e,{get:function(){return this._accessors[e]},set:function(t){this._accessors[e]=t}})})}},{key:\"_setDefaultAccessors\",value:function(e){var t=this;a(e).forEach(function(r){var n=e[r],i=function(e){var t=arguments.length<=1||void 0===arguments[1]?null:arguments[1];return null===t?e[r]||n:void(e[r]=t)};t[r]=i})}},{key:\"render\",value:function(e){}},{key:\"update\",value:function(e,t){}},{key:\"inArea\",value:function(e,t,r,n,i,s){}}]),e}();r[\"default\"]=h,t.exports=r[\"default\"]},{\"../core/namespace\":60,\"babel-runtime/core-js/object/assign\":79,\"babel-runtime/core-js/object/define-property\":81,\"babel-runtime/core-js/object/keys\":83,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/interop-require-default\":93}],70:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var l=e(\"./base-shape\"),u=o(l),c=function(e){function t(){a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).apply(this,arguments)}return i(t,e),s(t,[{key:\"getClassName\",value:function(){return\"dot\"}},{key:\"_getAccessorList\",value:function(){return{cx:0,cy:0,r:3,color:\"#000000\"}}},{key:\"render\",value:function(){return this.$el?this.$el:(this.$el=document.createElementNS(this.ns,\"circle\"),this.$el)}},{key:\"update\",value:function(e,t){var r=e.timeToPixel(this.cx(t)),n=e.valueToPixel(this.cy(t)),i=this.r(t),s=this.color(t);this.$el.setAttributeNS(null,\"transform\",\"translate(\"+r+\", \"+n+\")\"),this.$el.setAttributeNS(null,\"r\",i),this.$el.style.fill=s}},{key:\"inArea\",value:function(e,t,r,n,i,s){var a=e.timeToPixel(this.cx(t)),o=e.valueToPixel(this.cy(t));return a>r&&i>a&&o>n&&s>o?!0:!1}}]),t}(u[\"default\"]);r[\"default\"]=c,t.exports=r[\"default\"]},{\"./base-shape\":69,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93}],71:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var l=e(\"./base-shape\"),u=o(l),c=function(e){function t(){a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).apply(this,arguments)}return i(t,e),s(t,[{key:\"getClassName\",value:function(){return\"line\"}},{key:\"_getAccessorList\",value:function(){return{cx:0,cy:0}}},{key:\"_getDefaults\",value:function(){return{color:\"#000000\"}}},{key:\"render\",value:function(e){return this.$el?this.$el:(this.$el=document.createElementNS(this.ns,\"path\"),this.$el)}},{key:\"update\",value:function(e,t){var r=this;t=t.slice(0),t.sort(function(e,t){return r.cx(e)<r.cx(t)?-1:1}),this.$el.setAttributeNS(null,\"d\",this._buildLine(e,t)),this.$el.style.stroke=this.params.color,this.$el.style.fill=\"none\",t=null}},{key:\"_buildLine\",value:function(e,t){var r=this;if(!t.length)return\"\";var n=t.map(function(t,n){var i=e.timeToPixel(r.cx(t)),s=e.valueToPixel(r.cy(t));return i+\",\"+s});return\"M\"+n.join(\"L\")}}]),t}(u[\"default\"]);r[\"default\"]=c,t.exports=r[\"default\"]},{\"./base-shape\":69,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93}],72:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/get\")[\"default\"],i=e(\"babel-runtime/helpers/inherits\")[\"default\"],s=e(\"babel-runtime/helpers/create-class\")[\"default\"],a=e(\"babel-runtime/helpers/class-call-check\")[\"default\"],o=e(\"babel-runtime/helpers/interop-require-default\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var l=e(\"./base-shape\"),u=o(l),c=function(e){function t(){a(this,t),n(Object.getPrototypeOf(t.prototype),\"constructor\",this).apply(this,arguments)}return i(t,e),s(t,[{key:\"getClassName\",value:function(){return\"segment\"}},{key:\"_getAccessorList\",value:function(){return{x:0,y:0,width:0,height:1,color:\"#000000\",opacity:1}}},{key:\"_getDefaults\",value:function(){return{displayHandlers:!0,handlerWidth:2,handlerOpacity:.8,opacity:.6}}},{key:\"render\",value:function(e){return this.$el?this.$el:(this.$el=document.createElementNS(this.ns,\"g\"),this.$segment=document.createElementNS(this.ns,\"rect\"),this.$segment.classList.add(\"segment\"),this.$segment.style.opacity=this.params.opacity,this.$segment.setAttributeNS(null,\"shape-rendering\",\"crispEdges\"),this.$el.appendChild(this.$segment),this.params.displayHandlers&&(this.$leftHandler=document.createElementNS(this.ns,\"rect\"),this.$leftHandler.classList.add(\"left\",\"handler\"),this.$leftHandler.setAttributeNS(null,\"width\",this.params.handlerWidth),this.$leftHandler.setAttributeNS(null,\"shape-rendering\",\"crispEdges\"),this.$leftHandler.style.opacity=this.params.handlerOpacity,this.$leftHandler.style.cursor=\"ew-resize\",this.$rightHandler=document.createElementNS(this.ns,\"rect\"),this.$rightHandler.classList.add(\"right\",\"handler\"),this.$rightHandler.setAttributeNS(null,\"width\",this.params.handlerWidth),this.$rightHandler.setAttributeNS(null,\"shape-rendering\",\"crispEdges\"),this.$rightHandler.style.opacity=this.params.handlerOpacity,this.$rightHandler.style.cursor=\"ew-resize\",this.$el.appendChild(this.$leftHandler),this.$el.appendChild(this.$rightHandler)),this.$el)}},{key:\"update\",value:function(e,t){var r=e.timeToPixel(this.x(t)),n=e.valueToPixel(this.y(t)),i=e.timeToPixel(this.width(t)),s=e.valueToPixel(this.height(t)),a=this.color(t),o=this.opacity(t);if(this.$el.setAttributeNS(null,\"transform\",\"translate(\"+r+\", \"+n+\")\"),this.$el.style.opacity=o,this.$segment.setAttributeNS(null,\"width\",Math.max(i,0)),this.$segment.setAttributeNS(null,\"height\",s),this.$segment.style.fill=a,this.params.displayHandlers){this.$leftHandler.setAttributeNS(null,\"height\",s),this.$leftHandler.setAttributeNS(null,\"transform\",\"translate(0, 0)\"),this.$leftHandler.style.fill=a;var l=\"translate(\"+(i-this.params.handlerWidth)+\", 0)\";this.$rightHandler.setAttributeNS(null,\"height\",s),this.$rightHandler.setAttributeNS(null,\"transform\",l),this.$rightHandler.style.fill=a}}},{key:\"inArea\",value:function(e,t,r,n,i,s){var a=e.timeToPixel(this.x(t)),o=e.timeToPixel(this.x(t)+this.width(t)),l=e.valueToPixel(this.y(t)),u=e.valueToPixel(this.y(t)+this.height(t)),c=Math.max(0,Math.min(i,o)-Math.max(r,a)),h=Math.max(0,Math.min(s,u)-Math.max(n,l)),f=c*h;return f>0}}]),t}(u[\"default\"]);r[\"default\"]=c,t.exports=r[\"default\"]},{\"./base-shape\":69,\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90,\"babel-runtime/helpers/get\":91,\"babel-runtime/helpers/inherits\":92,\"babel-runtime/helpers/interop-require-default\":93}],73:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/helpers/create-class\")[\"default\"],i=e(\"babel-runtime/helpers/class-call-check\")[\"default\"];Object.defineProperty(r,\"__esModule\",{value:!0});var s=function(){function e(t){arguments.length<=1||void 0===arguments[1]?{}:arguments[1];i(this,e),this.timeline=t}return n(e,[{key:\"enter\",value:function(){}},{key:\"exit\",value:function(){}},{key:\"handleEvent\",value:function(e){}},{key:\"tracks\",get:function(){return this.timeline.tracks}},{key:\"layers\",get:function(){return this.timeline.tracks.layers}}]),e}();r[\"default\"]=s,t.exports=r[\"default\"]},{\"babel-runtime/helpers/class-call-check\":89,\"babel-runtime/helpers/create-class\":90}],74:[function(e,t,r){\"use strict\";Object.defineProperty(r,\"__esModule\",{value:!0}),r[\"default\"]={linear:function(){function e(){i=(n[1]-n[0])/(r[1]-r[0]),s=n[0]-i*r[0]}function t(e){return i*e+s}var r=[0,1],n=[0,1],i=1,s=0;return t.invert=function(e){return(e-s)/i},t.domain=function(){var n=arguments.length<=0||void 0===arguments[0]?null:arguments[0];return null===n?r:(r=n,e(),t)},t.range=function(){var r=arguments.length<=0||void 0===arguments[0]?null:arguments[0];return null===r?n:(n=r,e(),t)},t}},t.exports=r[\"default\"]},{}],75:[function(e,t,r){arguments[4][10][0].apply(r,arguments)},{\"core-js/library/fn/array/from\":96,dup:10}],76:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/get-iterator\"),__esModule:!0}},{\"core-js/library/fn/get-iterator\":97}],77:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/is-iterable\"),__esModule:!0}},{\"core-js/library/fn/is-iterable\":98}],78:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/map\"),__esModule:!0}},{\"core-js/library/fn/map\":99}],79:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/assign\"),__esModule:!0}},{\"core-js/library/fn/object/assign\":100}],80:[function(e,t,r){arguments[4][11][0].apply(r,arguments)},{\"core-js/library/fn/object/create\":101,dup:11}],81:[function(e,t,r){arguments[4][12][0].apply(r,arguments)},{\"core-js/library/fn/object/define-property\":102,dup:12}],82:[function(e,t,r){arguments[4][13][0].apply(r,arguments)},{\"core-js/library/fn/object/get-own-property-descriptor\":103,dup:13}],83:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/keys\"),__esModule:!0}},{\"core-js/library/fn/object/keys\":104}],84:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/object/set-prototype-of\"),__esModule:!0}},{\"core-js/library/fn/object/set-prototype-of\":105}],85:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/promise\"),__esModule:!0}},{\"core-js/library/fn/promise\":106}],86:[function(e,t,r){arguments[4][14][0].apply(r,arguments)},{\"core-js/library/fn/set\":107,dup:14}],87:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/symbol\"),__esModule:!0}},{\"core-js/library/fn/symbol\":108}],88:[function(e,t,r){t.exports={\"default\":e(\"core-js/library/fn/symbol/iterator\"),__esModule:!0}},{\"core-js/library/fn/symbol/iterator\":109}],89:[function(e,t,r){arguments[4][15][0].apply(r,arguments)},{dup:15}],90:[function(e,t,r){arguments[4][16][0].apply(r,arguments)},{\"babel-runtime/core-js/object/define-property\":81,dup:16}],91:[function(e,t,r){arguments[4][17][0].apply(r,arguments)},{\"babel-runtime/core-js/object/get-own-property-descriptor\":82,dup:17}],92:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/core-js/object/create\")[\"default\"],i=e(\"babel-runtime/core-js/object/set-prototype-of\")[\"default\"];r[\"default\"]=function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);e.prototype=n(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(i?i(e,t):e.__proto__=t)},r.__esModule=!0},{\"babel-runtime/core-js/object/create\":80,\"babel-runtime/core-js/object/set-prototype-of\":84}],93:[function(e,t,r){\"use strict\";r[\"default\"]=function(e){return e&&e.__esModule?e:{\"default\":e}},r.__esModule=!0},{}],94:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/core-js/get-iterator\")[\"default\"],i=e(\"babel-runtime/core-js/is-iterable\")[\"default\"];r[\"default\"]=function(){function e(e,t){var r=[],i=!0,s=!1,a=void 0;try{for(var o,l=n(e);!(i=(o=l.next()).done)&&(r.push(o.value),!t||r.length!==t);i=!0);}catch(u){s=!0,a=u}finally{try{!i&&l[\"return\"]&&l[\"return\"]()}finally{if(s)throw a}}return r}return function(t,r){if(Array.isArray(t))return t;if(i(Object(t)))return e(t,r);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}}(),r.__esModule=!0},{\"babel-runtime/core-js/get-iterator\":76,\"babel-runtime/core-js/is-iterable\":77}],95:[function(e,t,r){\"use strict\";var n=e(\"babel-runtime/core-js/array/from\")[\"default\"];r[\"default\"]=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return n(e)},r.__esModule=!0},{\"babel-runtime/core-js/array/from\":75}],96:[function(e,t,r){arguments[4][19][0].apply(r,arguments)},{\"../../modules/$\":128,\"../../modules/es6.array.from\":142,\"../../modules/es6.string.iterator\":151,dup:19}],97:[function(e,t,r){e(\"../modules/web.dom.iterable\"),e(\"../modules/es6.string.iterator\"),e(\"../modules/core.iter-helpers\"),t.exports=e(\"../modules/$\").core.getIterator},{\"../modules/$\":128,\"../modules/core.iter-helpers\":141,\"../modules/es6.string.iterator\":151,\"../modules/web.dom.iterable\":155}],98:[function(e,t,r){e(\"../modules/web.dom.iterable\"),e(\"../modules/es6.string.iterator\"),e(\"../modules/core.iter-helpers\"),t.exports=e(\"../modules/$\").core.isIterable},{\"../modules/$\":128,\"../modules/core.iter-helpers\":141,\"../modules/es6.string.iterator\":151,\"../modules/web.dom.iterable\":155}],99:[function(e,t,r){e(\"../modules/es6.object.to-string\"),e(\"../modules/es6.string.iterator\"),e(\"../modules/web.dom.iterable\"),e(\"../modules/es6.map\"),e(\"../modules/es7.map.to-json\"),t.exports=e(\"../modules/$\").core.Map},{\"../modules/$\":128,\"../modules/es6.map\":144,\"../modules/es6.object.to-string\":148,\"../modules/es6.string.iterator\":151,\"../modules/es7.map.to-json\":153,\"../modules/web.dom.iterable\":155}],100:[function(e,t,r){e(\"../../modules/es6.object.assign\"),t.exports=e(\"../../modules/$\").core.Object.assign},{\"../../modules/$\":128,\"../../modules/es6.object.assign\":145}],101:[function(e,t,r){arguments[4][20][0].apply(r,arguments)},{\"../../modules/$\":128,dup:20}],102:[function(e,t,r){arguments[4][21][0].apply(r,arguments)},{\"../../modules/$\":128,dup:21}],103:[function(e,t,r){arguments[4][22][0].apply(r,arguments)},{\"../../modules/$\":128,\"../../modules/es6.object.statics-accept-primitives\":147,dup:22}],104:[function(e,t,r){e(\"../../modules/es6.object.statics-accept-primitives\"),t.exports=e(\"../../modules/$\").core.Object.keys},{\"../../modules/$\":128,\"../../modules/es6.object.statics-accept-primitives\":147}],105:[function(e,t,r){e(\"../../modules/es6.object.set-prototype-of\"),t.exports=e(\"../../modules/$\").core.Object.setPrototypeOf},{\"../../modules/$\":128,\"../../modules/es6.object.set-prototype-of\":146}],106:[function(e,t,r){e(\"../modules/es6.object.to-string\"),e(\"../modules/es6.string.iterator\"),e(\"../modules/web.dom.iterable\"),e(\"../modules/es6.promise\"),t.exports=e(\"../modules/$\").core.Promise},{\"../modules/$\":128,\"../modules/es6.object.to-string\":148,\"../modules/es6.promise\":149,\"../modules/es6.string.iterator\":151,\"../modules/web.dom.iterable\":155}],107:[function(e,t,r){arguments[4][23][0].apply(r,arguments)},{\"../modules/$\":128,\"../modules/es6.object.to-string\":148,\"../modules/es6.set\":150,\"../modules/es6.string.iterator\":151,\"../modules/es7.set.to-json\":154,\"../modules/web.dom.iterable\":155,dup:23}],108:[function(e,t,r){e(\"../../modules/es6.symbol\"),t.exports=e(\"../../modules/$\").core.Symbol},{\"../../modules/$\":128,\"../../modules/es6.symbol\":152}],109:[function(e,t,r){e(\"../../modules/es6.string.iterator\"),e(\"../../modules/web.dom.iterable\"),t.exports=e(\"../../modules/$.wks\")(\"iterator\")},{\"../../modules/$.wks\":140,\"../../modules/es6.string.iterator\":151,\"../../modules/web.dom.iterable\":155}],110:[function(e,t,r){arguments[4][24][0].apply(r,arguments)},{\"./$\":128,dup:24}],111:[function(e,t,r){var n=e(\"./$\"),i=e(\"./$.enum-keys\");t.exports=Object.assign||function(e,t){for(var r=Object(n.assertDefined(e)),s=arguments.length,a=1;s>a;)for(var o,l=n.ES5Object(arguments[a++]),u=i(l),c=u.length,h=0;c>h;)r[o=u[h++]]=l[o];return r}},{\"./$\":128,\"./$.enum-keys\":119}],112:[function(e,t,r){arguments[4][25][0].apply(r,arguments)},{\"./$\":128,\"./$.wks\":140,dup:25}],113:[function(e,t,r){arguments[4][26][0].apply(r,arguments)},{\"./$\":128,\"./$.assert\":110,\"./$.ctx\":116,\"./$.for-of\":120,\"./$.iter\":127,\"./$.iter-define\":125,\"./$.mix\":130,\"./$.uid\":138,dup:26}],114:[function(e,t,r){arguments[4][27][0].apply(r,arguments)},{\"./$.def\":117,\"./$.for-of\":120,dup:27}],115:[function(e,t,r){arguments[4][28][0].apply(r,arguments)},{\"./$\":128,\"./$.assert\":110,\"./$.cof\":112,\"./$.def\":117,\"./$.for-of\":120,\"./$.iter\":127,\"./$.mix\":130,\"./$.species\":135,\"./$.uid\":138,dup:28}],116:[function(e,t,r){arguments[4][29][0].apply(r,arguments)},{\"./$.assert\":110,dup:29}],117:[function(e,t,r){arguments[4][30][0].apply(r,arguments)},{\"./$\":128,dup:30}],118:[function(e,t,r){var n=e(\"./$\"),i=n.g.document,s=n.isObject,a=s(i)&&s(i.createElement);t.exports=function(e){return a?i.createElement(e):{}}},{\"./$\":128}],119:[function(e,t,r){var n=e(\"./$\");t.exports=function(e){var t=n.getKeys(e),r=n.getDesc,i=n.getSymbols;return i&&n.each.call(i(e),function(n){r(e,n).enumerable&&t.push(n)}),t}},{\"./$\":128}],120:[function(e,t,r){arguments[4][31][0].apply(r,arguments)},{\"./$.ctx\":116,\"./$.iter\":127,\"./$.iter-call\":124,dup:31}],121:[function(e,t,r){arguments[4][32][0].apply(r,arguments)},{dup:32}],122:[function(e,t,r){arguments[4][33][0].apply(r,arguments)},{\"./$\":128,dup:33}],123:[function(e,t,r){t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3]);case 5:return n?e(t[0],t[1],t[2],t[3],t[4]):e.call(r,t[0],t[1],t[2],t[3],t[4])}return e.apply(r,t)}},{}],124:[function(e,t,r){arguments[4][34][0].apply(r,arguments)},{\"./$.assert\":110,dup:34}],125:[function(e,t,r){arguments[4][35][0].apply(r,arguments)},{\"./$\":128,\"./$.cof\":112,\"./$.def\":117,\"./$.iter\":127,\"./$.redef\":131,\"./$.wks\":140,dup:35}],126:[function(e,t,r){arguments[4][36][0].apply(r,arguments)},{\"./$.wks\":140,dup:36}],127:[function(e,t,r){arguments[4][37][0].apply(r,arguments)},{\"./$\":128,\"./$.assert\":110,\"./$.cof\":112,\"./$.shared\":134,\"./$.wks\":140,dup:37}],128:[function(e,t,r){arguments[4][38][0].apply(r,arguments)},{\"./$.fw\":121,dup:38}],129:[function(e,t,r){var n=e(\"./$\");t.exports=function(e,t){for(var r,i=n.toObject(e),s=n.getKeys(i),a=s.length,o=0;a>o;)if(i[r=s[o++]]===t)return r}},{\"./$\":128}],130:[function(e,t,r){arguments[4][39][0].apply(r,arguments)},{\"./$.redef\":131,dup:39}],131:[function(e,t,r){arguments[4][40][0].apply(r,arguments)},{\"./$\":128,dup:40}],132:[function(e,t,r){t.exports=Object.is||function(e,t){return e===t?0!==e||1/e===1/t:e!=e&&t!=t}},{}],133:[function(e,t,r){function n(e,t){s.obj(e),s(null===t||i.isObject(t),t,\": can't set as prototype!\")}var i=e(\"./$\"),s=e(\"./$.assert\");t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,r){try{r=e(\"./$.ctx\")(Function.call,i.getDesc(Object.prototype,\"__proto__\").set,2),r({},[])}catch(s){t=!0}return function(e,i){return n(e,i),t?e.__proto__=i:r(e,i),e}}():void 0),check:n}},{\"./$\":128,\"./$.assert\":110,\"./$.ctx\":116}],134:[function(e,t,r){arguments[4][41][0].apply(r,arguments)},{\"./$\":128,dup:41}],135:[function(e,t,r){arguments[4][42][0].apply(r,arguments)},{\"./$\":128,\"./$.wks\":140,dup:42}],136:[function(e,t,r){arguments[4][43][0].apply(r,arguments)},{\"./$\":128,dup:43}],137:[function(e,t,r){\"use strict\";function n(){var e=+this;if(l.has(x,e)){var t=x[e];delete x[e],t()}}function i(e){n.call(e.data)}var s,a,o,l=e(\"./$\"),u=e(\"./$.ctx\"),c=e(\"./$.cof\"),h=e(\"./$.invoke\"),f=e(\"./$.dom-create\"),d=l.g,p=l.isFunction,m=l.html,b=d.process,g=d.setImmediate,v=d.clearImmediate,y=d.MessageChannel,$=0,x={},_=\"onreadystatechange\";p(g)&&p(v)||(g=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return x[++$]=function(){h(p(e)?e:Function(e),t)},s($),$},v=function(e){delete x[e]},\"process\"==c(b)?s=function(e){b.nextTick(u(n,e,1))}:d.addEventListener&&p(d.postMessage)&&!d.importScripts?(s=function(e){d.postMessage(e,\"*\")},d.addEventListener(\"message\",i,!1)):p(y)?(a=new y,o=a.port2,a.port1.onmessage=i,s=u(o.postMessage,o,1)):s=_ in f(\"script\")?function(e){m.appendChild(f(\"script\"))[_]=function(){m.removeChild(this),n.call(e)}}:function(e){setTimeout(u(n,e,1),0)}),t.exports={set:g,clear:v}},{\"./$\":128,\"./$.cof\":112,\"./$.ctx\":116,\"./$.dom-create\":118,\"./$.invoke\":123}],138:[function(e,t,r){arguments[4][44][0].apply(r,arguments)},{\"./$\":128,dup:44}],139:[function(e,t,r){arguments[4][45][0].apply(r,arguments)},{dup:45}],140:[function(e,t,r){arguments[4][46][0].apply(r,arguments)},{\"./$\":128,\"./$.shared\":134,\"./$.uid\":138,dup:46}],141:[function(e,t,r){var n=e(\"./$\").core,i=e(\"./$.iter\");n.isIterable=i.is,n.getIterator=i.get},{\"./$\":128,\"./$.iter\":127}],142:[function(e,t,r){arguments[4][47][0].apply(r,arguments)},{\"./$\":128,\"./$.ctx\":116,\"./$.def\":117,\"./$.iter\":127,\"./$.iter-call\":124,\"./$.iter-detect\":126,dup:47}],143:[function(e,t,r){arguments[4][48][0].apply(r,arguments)},{\"./$\":128,\"./$.iter\":127,\"./$.iter-define\":125,\"./$.uid\":138,\"./$.unscope\":139,dup:48}],144:[function(e,t,r){\"use strict\";var n=e(\"./$.collection-strong\");e(\"./$.collection\")(\"Map\",function(e){return function(){return e(this,arguments[0])}},{get:function(e){var t=n.getEntry(this,e);return t&&t.v},set:function(e,t){return n.def(this,0===e?0:e,t)}},n,!0)},{\"./$.collection\":115,\"./$.collection-strong\":113}],145:[function(e,t,r){var n=e(\"./$.def\");n(n.S,\"Object\",{assign:e(\"./$.assign\")})},{\"./$.assign\":111,\"./$.def\":117}],146:[function(e,t,r){var n=e(\"./$.def\");n(n.S,\"Object\",{setPrototypeOf:e(\"./$.set-proto\").set})},{\"./$.def\":117,\"./$.set-proto\":133}],147:[function(e,t,r){arguments[4][49][0].apply(r,arguments)},{\"./$\":128,\"./$.def\":117,\"./$.get-names\":122,dup:49}],148:[function(e,t,r){arguments[4][50][0].apply(r,arguments)},{\"./$\":128,\"./$.cof\":112,\"./$.redef\":131,\"./$.wks\":140,dup:50}],149:[function(e,t,r){\"use strict\";function n(e){var t=new S(function(){});return e&&(t.constructor=Object),S.resolve(t)===t}function i(e){return L(e)&&(D?\"Promise\"==m.classof(e):w in e)}function s(e,t){return d.FW||e!==S||t!==f?$(e,t):!0}function a(e){var t=T(e)[_];return void 0!=t?t:e}function o(e){var t;return L(e)&&(t=e.then),C(t)?t:!1}function l(e){var t=e.c;t.length&&O.call(j,function(){function r(t){var r,s,a=i?t.ok:t.fail;try{a?(i||(e.h=!0),r=a===!0?n:a(n),r===t.P?t.rej(TypeError(\"Promise-chain cycle\")):(s=o(r))?s.call(r,t.res,t.rej):t.res(r)):t.rej(n)}catch(l){t.rej(l)}}for(var n=e.v,i=1==e.s,s=0;t.length>s;)r(t[s++]);t.length=0})}function u(e){var t,r=e[w],n=r.a||r.c,i=0;if(r.h)return!1;for(;n.length>i;)if(t=n[i++],t.fail||!u(t.P))return!1;return!0}function c(e){var t,r=this;r.d||(r.d=!0,r=r.r||r,r.v=e,r.s=2,r.a=r.c.slice(),setTimeout(function(){O.call(j,function(){u(t=r.p)&&(P?E.emit(\"unhandledRejection\",e,t):j.console&&console.error&&console.error(\"Unhandled promise rejection\",e)),\nr.a=void 0})},1),l(r))}function h(e){var t,r=this;if(!r.d){r.d=!0,r=r.r||r;try{(t=o(e))?O.call(j,function(){var n={r:r,d:!1};try{t.call(e,p(h,n,1),p(c,n,1))}catch(i){c.call(n,i)}}):(r.v=e,r.s=1,l(r))}catch(n){c.call({r:r,d:!1},n)}}}var f,d=e(\"./$\"),p=e(\"./$.ctx\"),m=e(\"./$.cof\"),b=e(\"./$.def\"),g=e(\"./$.assert\"),v=e(\"./$.for-of\"),y=e(\"./$.set-proto\").set,$=e(\"./$.same\"),x=e(\"./$.species\"),_=e(\"./$.wks\")(\"species\"),w=e(\"./$.uid\").safe(\"record\"),k=\"Promise\",j=d.g,E=j.process,P=\"process\"==m(E),O=E&&E.nextTick||e(\"./$.task\").set,S=j[k],C=d.isFunction,L=d.isObject,M=g.fn,T=g.obj,D=function(){function e(t){var r=new S(t);return y(r,e.prototype),r}var t=!1;try{if(t=C(S)&&C(S.resolve)&&n(),y(e,S),e.prototype=d.create(S.prototype,{constructor:{value:e}}),e.resolve(5).then(function(){})instanceof e||(t=!1),t&&d.DESC){var r=!1;S.resolve(d.setDesc({},\"then\",{get:function(){r=!0}})),t=r}}catch(i){t=!1}return t}();D||(S=function(e){M(e);var t={p:g.inst(this,S,k),c:[],a:void 0,s:0,d:!1,v:void 0,h:!1};d.hide(this,w,t);try{e(p(h,t,1),p(c,t,1))}catch(r){c.call(t,r)}},e(\"./$.mix\")(S.prototype,{then:function(e,t){var r=T(T(this).constructor)[_],n={ok:C(e)?e:!0,fail:C(t)?t:!1},i=n.P=new(void 0!=r?r:S)(function(e,t){n.res=M(e),n.rej=M(t)}),s=this[w];return s.c.push(n),s.a&&s.a.push(n),s.s&&l(s),i},\"catch\":function(e){return this.then(void 0,e)}})),b(b.G+b.W+b.F*!D,{Promise:S}),m.set(S,k),x(S),x(f=d.core[k]),b(b.S+b.F*!D,k,{reject:function(e){return new(a(this))(function(t,r){r(e)})}}),b(b.S+b.F*(!D||n(!0)),k,{resolve:function(e){return i(e)&&s(e.constructor,this)?e:new this(function(t){t(e)})}}),b(b.S+b.F*!(D&&e(\"./$.iter-detect\")(function(e){S.all(e)[\"catch\"](function(){})})),k,{all:function(e){var t=a(this),r=[];return new t(function(n,i){v(e,!1,r.push,r);var s=r.length,a=Array(s);s?d.each.call(r,function(e,r){t.resolve(e).then(function(e){a[r]=e,--s||n(a)},i)}):n(a)})},race:function(e){var t=a(this);return new t(function(r,n){v(e,!1,function(e){t.resolve(e).then(r,n)})})}})},{\"./$\":128,\"./$.assert\":110,\"./$.cof\":112,\"./$.ctx\":116,\"./$.def\":117,\"./$.for-of\":120,\"./$.iter-detect\":126,\"./$.mix\":130,\"./$.same\":132,\"./$.set-proto\":133,\"./$.species\":135,\"./$.task\":137,\"./$.uid\":138,\"./$.wks\":140}],150:[function(e,t,r){arguments[4][51][0].apply(r,arguments)},{\"./$.collection\":115,\"./$.collection-strong\":113,dup:51}],151:[function(e,t,r){arguments[4][52][0].apply(r,arguments)},{\"./$\":128,\"./$.iter\":127,\"./$.iter-define\":125,\"./$.string-at\":136,\"./$.uid\":138,dup:52}],152:[function(e,t,r){\"use strict\";function n(e){var t=N[e]=h.set(w(C.prototype),M,e);return x&&L&&I($,e,{configurable:!0,set:function(t){_(this,T)&&_(this[T],e)&&(this[T][e]=!1),I(this,e,E(1,t))}}),t}function i(e,t,r){return r&&_(N,t)?(r.enumerable?(_(e,T)&&e[T][t]&&(e[T][t]=!1),r=w(r,{enumerable:E(0,!1)})):(_(e,T)||j(e,T,E(1,{})),e[T][t]=!0),I(e,t,r)):j(e,t,r)}function s(e,t){y(e);for(var r,n=v(t=S(t)),s=0,a=n.length;a>s;)i(e,r=n[s++],t[r]);return e}function a(e,t){return void 0===t?w(e):s(w(e),t)}function o(e){var t=D.call(this,e);return t||!_(this,e)||!_(N,e)||_(this,T)&&this[T][e]?t:!0}function l(e,t){var r=k(e=S(e),t);return!r||!_(N,t)||_(e,T)&&e[T][t]||(r.enumerable=!0),r}function u(e){for(var t,r=O(S(e)),n=[],i=0;r.length>i;)_(N,t=r[i++])||t==T||n.push(t);return n}function c(e){for(var t,r=O(S(e)),n=[],i=0;r.length>i;)_(N,t=r[i++])&&n.push(N[t]);return n}var h=e(\"./$\"),f=e(\"./$.cof\").set,d=e(\"./$.uid\"),p=e(\"./$.shared\"),m=e(\"./$.def\"),b=e(\"./$.redef\"),g=e(\"./$.keyof\"),v=e(\"./$.enum-keys\"),y=e(\"./$.assert\").obj,$=Object.prototype,x=h.DESC,_=h.has,w=h.create,k=h.getDesc,j=h.setDesc,E=h.desc,P=e(\"./$.get-names\"),O=P.get,S=h.toObject,C=h.g.Symbol,L=!1,M=d(\"tag\"),T=d(\"hidden\"),D={}.propertyIsEnumerable,A=p(\"symbol-registry\"),N=p(\"symbols\"),F=h.isFunction(C),I=x?function(){try{return w(j({},T,{get:function(){return j(this,T,{value:!1})[T]}}))[T]||j}catch(e){return function(e,t,r){var n=k($,t);n&&delete $[t],j(e,t,r),n&&e!==$&&j($,t,n)}}}():j;F||(C=function(){if(this instanceof C)throw TypeError(\"Symbol is not a constructor\");return n(d(arguments[0]))},b(C.prototype,\"toString\",function(){return this[M]}),h.create=a,h.setDesc=i,h.getDesc=l,h.setDescs=s,h.getNames=P.get=u,h.getSymbols=c,h.DESC&&h.FW&&b($,\"propertyIsEnumerable\",o,!0));var R={\"for\":function(e){return _(A,e+=\"\")?A[e]:A[e]=C(e)},keyFor:function(e){return g(A,e)},useSetter:function(){L=!0},useSimple:function(){L=!1}};h.each.call(\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),function(t){var r=e(\"./$.wks\")(t);R[t]=F?r:n(r)}),L=!0,m(m.G+m.W,{Symbol:C}),m(m.S,\"Symbol\",R),m(m.S+m.F*!F,\"Object\",{create:a,defineProperty:i,defineProperties:s,getOwnPropertyDescriptor:l,getOwnPropertyNames:u,getOwnPropertySymbols:c}),f(C,\"Symbol\"),f(Math,\"Math\",!0),f(h.g.JSON,\"JSON\",!0)},{\"./$\":128,\"./$.assert\":110,\"./$.cof\":112,\"./$.def\":117,\"./$.enum-keys\":119,\"./$.get-names\":122,\"./$.keyof\":129,\"./$.redef\":131,\"./$.shared\":134,\"./$.uid\":138,\"./$.wks\":140}],153:[function(e,t,r){e(\"./$.collection-to-json\")(\"Map\")},{\"./$.collection-to-json\":114}],154:[function(e,t,r){arguments[4][53][0].apply(r,arguments)},{\"./$.collection-to-json\":114,dup:53}],155:[function(e,t,r){arguments[4][54][0].apply(r,arguments)},{\"./$\":128,\"./$.iter\":127,\"./$.wks\":140,\"./es6.array.iterator\":143,dup:54}],156:[function(e,t,r){(function(r){var n=\"object\"==typeof r?r:\"object\"==typeof window?window:\"object\"==typeof self?self:this,i=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf(\"regeneratorRuntime\")>=0,s=i&&n.regeneratorRuntime;n.regeneratorRuntime=void 0,t.exports=e(\"./runtime\"),i?n.regeneratorRuntime=s:delete n.regeneratorRuntime,t.exports={\"default\":t.exports,__esModule:!0}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{\"./runtime\":157}],157:[function(e,t,r){(function(r,n){\"use strict\";var i=e(\"babel-runtime/core-js/symbol\")[\"default\"],s=e(\"babel-runtime/core-js/symbol/iterator\")[\"default\"],a=e(\"babel-runtime/core-js/object/create\")[\"default\"],o=e(\"babel-runtime/core-js/promise\")[\"default\"];!function(e){function n(e,t,r,n){var i=a((t||u).prototype);return i._invoke=m(e,r||null,new v(n||[])),i}function l(e,t,r){try{return{type:\"normal\",arg:e.call(t,r)}}catch(n){return{type:\"throw\",arg:n}}}function u(){}function c(){}function h(){}function f(e){[\"next\",\"throw\",\"return\"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function d(e){this.arg=e}function p(e){function t(t,r){var n=e[t](r),i=n.value;return i instanceof d?o.resolve(i.arg).then(s,a):o.resolve(i).then(function(e){return n.value=e,n})}function n(e,r){var n=i?i.then(function(){return t(e,r)}):new o(function(n){n(t(e,r))});return i=n[\"catch\"](function(e){}),n}\"object\"==typeof r&&r.domain&&(t=r.domain.bind(t));var i,s=t.bind(e,\"next\"),a=t.bind(e,\"throw\");t.bind(e,\"return\");this._invoke=n}function m(e,t,r){var n=E;return function(i,s){if(n===O)throw new Error(\"Generator is already running\");if(n===S){if(\"throw\"===i)throw s;return $()}for(;;){var a=r.delegate;if(a){if(\"return\"===i||\"throw\"===i&&a.iterator[i]===x){r.delegate=null;var o=a.iterator[\"return\"];if(o){var u=l(o,a.iterator,s);if(\"throw\"===u.type){i=\"throw\",s=u.arg;continue}}if(\"return\"===i)continue}var u=l(a.iterator[i],a.iterator,s);if(\"throw\"===u.type){r.delegate=null,i=\"throw\",s=u.arg;continue}i=\"next\",s=x;var c=u.arg;if(!c.done)return n=P,c;r[a.resultName]=c.value,r.next=a.nextLoc,r.delegate=null}if(\"next\"===i)n===P?r.sent=s:r.sent=x;else if(\"throw\"===i){if(n===E)throw n=S,s;r.dispatchException(s)&&(i=\"next\",s=x)}else\"return\"===i&&r.abrupt(\"return\",s);n=O;var u=l(e,t,r);if(\"normal\"===u.type){n=r.done?S:P;var c={value:u.arg,done:r.done};if(u.arg!==C)return c;r.delegate&&\"next\"===i&&(s=x)}else\"throw\"===u.type&&(n=S,i=\"throw\",s=u.arg)}}}function b(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function g(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function v(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(b,this),this.reset(!0)}function y(e){if(e){var t=e[w];if(t)return t.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function i(){for(;++r<e.length;)if(_.call(e,r))return i.value=e[r],i.done=!1,i;return i.value=x,i.done=!0,i};return n.next=n}}return{next:$}}function $(){return{value:x,done:!0}}var x,_=Object.prototype.hasOwnProperty,w=\"function\"==typeof i&&s||\"@@iterator\",k=\"object\"==typeof t,j=e.regeneratorRuntime;if(j)return void(k&&(t.exports=j));j=e.regeneratorRuntime=k?t.exports:{},j.wrap=n;var E=\"suspendedStart\",P=\"suspendedYield\",O=\"executing\",S=\"completed\",C={},L=h.prototype=u.prototype;c.prototype=L.constructor=h,h.constructor=c,c.displayName=\"GeneratorFunction\",j.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return t?t===c||\"GeneratorFunction\"===(t.displayName||t.name):!1},j.mark=function(e){return e.__proto__=h,e.prototype=a(L),e},j.awrap=function(e){return new d(e)},f(p.prototype),j.async=function(e,t,r,i){var s=new p(n(e,t,r,i));return j.isGeneratorFunction(t)?s:s.next().then(function(e){return e.done?e.value:s.next()})},f(L),L[w]=function(){return this},L.toString=function(){return\"[object Generator]\"},j.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},j.values=y,v.prototype={constructor:v,reset:function(e){if(this.prev=0,this.next=0,this.sent=x,this.done=!1,this.delegate=null,this.tryEntries.forEach(g),!e)for(var t in this)\"t\"===t.charAt(0)&&_.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=x)},stop:function(){this.done=!0;var e=this.tryEntries[0],t=e.completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(e){function t(t,n){return s.type=\"throw\",s.arg=e,r.next=t,!!n}if(this.done)throw e;for(var r=this,n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n],s=i.completion;if(\"root\"===i.tryLoc)return t(\"end\");if(i.tryLoc<=this.prev){var a=_.call(i,\"catchLoc\"),o=_.call(i,\"finallyLoc\");if(a&&o){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(a){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!o)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&_.call(n,\"finallyLoc\")&&this.prev<n.finallyLoc){var i=n;break}}i&&(\"break\"===e||\"continue\"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=e,s.arg=t,i?this.next=i.finallyLoc:this.complete(s),C},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=e.arg,this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t)},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),g(r),C}},\"catch\":function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if(\"throw\"===n.type){var i=n.arg;g(r)}return i}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,t,r){return this.delegate={iterator:y(e),resultName:t,nextLoc:r},C}}}(\"object\"==typeof n?n:\"object\"==typeof window?window:\"object\"==typeof self?self:void 0)}).call(this,e(\"_process\"),\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{_process:160,\"babel-runtime/core-js/object/create\":80,\"babel-runtime/core-js/promise\":85,\"babel-runtime/core-js/symbol\":87,\"babel-runtime/core-js/symbol/iterator\":88}],158:[function(e,t,r){t.exports={name:\"waves-basic-controllers\",version:\"0.4.1\",description:\"basic-controllers for rapid prototyping\",main:\"waves-basic-controllers.js\",standalone:\"wavesBasicControllers\",scripts:{transpile:\"./bin/scripts --transpile\",prebundle:\"npm run hint && npm run transpile\",bundle:\"./bin/scripts --bundle\",postbundle:\"npm run uglify\",uglify:\"./bin/scripts --uglify\",watch:\"./bin/scripts --watch\",test:\"tac6\",pretest:\"npm run hint\",hint:\"jshint ./es6; true\",pretag:\"branch=$(git symbolic-ref -q HEAD); if [ $branch != 'refs/heads/master' ]; then echo '=> You must be in master branch to run this command'; exit 1; fi && npm run bundle && git commit -am 'rebundled'\",tag:\"npm version $1\",posttag:\"git push origin master && git push origin --tags\"},license:\"BSD-3\",repository:{type:\"git\",url:\"https://github.com/wavesjs/basic-controllers.git\"},jshintConfig:{esnext:!0,browser:!0,node:!0,devel:!0},dependencies:{\"babel-runtime\":\"^5.4.4\",\"waves-ui\":\"git://github.com/wavesjs/ui\"},devDependencies:{\"fs-extra\":\"^0.16.3\",jshint:\"^2.6.0\",\"node-watch\":\"^0.3.4\",\"uglify-js\":\"^2.4.16\"}}},{}],159:[function(e,t,r){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function i(e){return\"function\"==typeof e}function s(e){return\"number\"==typeof e}function a(e){return\"object\"==typeof e&&null!==e}function o(e){return void 0===e}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if(!s(e)||0>e||isNaN(e))throw TypeError(\"n must be a positive number\");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,r,n,s,l,u;if(this._events||(this._events={}),\"error\"===e&&(!this._events.error||a(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;throw TypeError('Uncaught, unspecified \"error\" event.')}if(r=this._events[e],o(r))return!1;if(i(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:for(n=arguments.length,s=new Array(n-1),l=1;n>l;l++)s[l-1]=arguments[l];r.apply(this,s)}else if(a(r)){for(n=arguments.length,s=new Array(n-1),l=1;n>l;l++)s[l-1]=arguments[l];for(u=r.slice(),n=u.length,l=0;n>l;l++)u[l].apply(this,s)}return!0},n.prototype.addListener=function(e,t){var r;if(!i(t))throw TypeError(\"listener must be a function\");if(this._events||(this._events={}),this._events.newListener&&this.emit(\"newListener\",e,i(t.listener)?t.listener:t),this._events[e]?a(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,a(this._events[e])&&!this._events[e].warned){var r;r=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners,r&&r>0&&this._events[e].length>r&&(this._events[e].warned=!0,console.error(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\",this._events[e].length),\"function\"==typeof console.trace&&console.trace())}return this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){function r(){this.removeListener(e,r),n||(n=!0,t.apply(this,arguments))}if(!i(t))throw TypeError(\"listener must be a function\");var n=!1;return r.listener=t,this.on(e,r),this},n.prototype.removeListener=function(e,t){var r,n,s,o;if(!i(t))throw TypeError(\"listener must be a function\");if(!this._events||!this._events[e])return this;if(r=this._events[e],s=r.length,n=-1,r===t||i(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit(\"removeListener\",e,t);else if(a(r)){for(o=s;o-->0;)if(r[o]===t||r[o].listener&&r[o].listener===t){n=o;break}if(0>n)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(n,1),this._events.removeListener&&this.emit(\"removeListener\",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)\"removeListener\"!==t&&this.removeAllListeners(t);return this.removeAllListeners(\"removeListener\"),this._events={},this}if(r=this._events[e],i(r))this.removeListener(e,r);else for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?i(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.listenerCount=function(e,t){var r;return r=e._events&&e._events[t]?i(e._events[t])?1:e._events[t].length:0}},{}],160:[function(e,t,r){function n(){c=!1,o.length?u=o.concat(u):h=-1,u.length&&i()}function i(){if(!c){var e=setTimeout(n);c=!0;for(var t=u.length;t;){for(o=u,u=[];++h<t;)o[h].run();h=-1,t=u.length}o=null,c=!1,clearTimeout(e)}}function s(e,t){this.fun=e,this.array=t}function a(){}var o,l=t.exports={},u=[],c=!1,h=-1;l.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new s(e,t)),c||setTimeout(i,0)},s.prototype.run=function(){this.fun.apply(null,this.array)},l.title=\"browser\",l.browser=!0,l.env={},l.argv=[],l.version=\"\",l.versions={},l.on=a,l.addListener=a,l.once=a,l.off=a,l.removeListener=a,l.removeAllListeners=a,l.emit=a,l.binding=function(e){throw new Error(\"process.binding is not supported\")},l.cwd=function(){return\"/\"},l.chdir=function(e){throw new Error(\"process.chdir is not supported\")},l.umask=function(){return 0}},{}]},{},[1])(1)});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(146)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3dhdmVzLXVpL2V4YW1wbGVzL2Fzc2V0cy93YXZlcy1iYXNpYy1jb250cm9sbGVycy5taW4uanM/NmM1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9ZSgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxlKTtlbHNle3ZhciB0O3Q9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLHQud2F2ZXNCYXNpY0NvbnRyb2xsZXJzPWUoKX19KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIGUodCxyLG4pe2Z1bmN0aW9uIGkoYSxvKXtpZighclthXSl7aWYoIXRbYV0pe3ZhciBsPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIW8mJmwpcmV0dXJuIGwoYSwhMCk7aWYocylyZXR1cm4gcyhhLCEwKTt2YXIgdT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2ErXCInXCIpO3Rocm93IHUuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIix1fXZhciBjPXJbYV09e2V4cG9ydHM6e319O3RbYV1bMF0uY2FsbChjLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIHI9dFthXVsxXVtlXTtyZXR1cm4gaShyP3I6ZSl9LGMsYy5leHBvcnRzLGUsdCxyLG4pfXJldHVybiByW2FdLmV4cG9ydHN9Zm9yKHZhciBzPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsYT0wO2E8bi5sZW5ndGg7YSsrKWkoblthXSk7cmV0dXJuIGl9KHsxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49KGUoXCIuL2Rpc3QvdXRpbHMvc3R5bGVzXCIpLGUoXCIuL2Rpc3QvYmFzZS1jb250cm9sbGVyXCIpKSxpPXtUaXRsZTplKFwiLi9kaXN0L3RpdGxlXCIpLEJ1dHRvbnM6ZShcIi4vZGlzdC9idXR0b25zXCIpLFRvZ2dsZTplKFwiLi9kaXN0L3RvZ2dsZVwiKSxTbGlkZXI6ZShcIi4vZGlzdC9zbGlkZXJcIiksQnJlYWtwb2ludDplKFwiLi9kaXN0L2JyZWFrcG9pbnRcIiksc2V0VGhlbWU6ZnVuY3Rpb24oZSl7bi50aGVtZT1lfX07dC5leHBvcnRzPWl9LHtcIi4vZGlzdC9iYXNlLWNvbnRyb2xsZXJcIjoyLFwiLi9kaXN0L2JyZWFrcG9pbnRcIjozLFwiLi9kaXN0L2J1dHRvbnNcIjo0LFwiLi9kaXN0L3NsaWRlclwiOjYsXCIuL2Rpc3QvdGl0bGVcIjo3LFwiLi9kaXN0L3RvZ2dsZVwiOjgsXCIuL2Rpc3QvdXRpbHMvc3R5bGVzXCI6OX1dLDI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCIpW1wiZGVmYXVsdFwiXSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3NldFwiKVtcImRlZmF1bHRcIl0sbD1lKFwiZXZlbnRzXCIpLHU9ZShcIi4vdXRpbHMvc3R5bGVzXCIpLGM9bmV3IG8saD12b2lkIDA7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixmdW5jdGlvbigpe2MuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS5vblJlc2l6ZSgpfSl9KTt2YXIgZj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7YSh0aGlzLHQpLG4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImNvbnN0cnVjdG9yXCIsdGhpcykuY2FsbCh0aGlzKSwwPT09Yy5zaXplJiZ1Lmluc2VydFN0eWxlU2hlZXQoKSxjLmFkZCh0aGlzKX1yZXR1cm4gaSh0LGUpLHModCxbe2tleTpcIl9hcHBseU9wdGlvbm5hbFBhcmFtZXRlcnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPD0wfHx2b2lkIDA9PT1hcmd1bWVudHNbMF0/bnVsbDphcmd1bWVudHNbMF0scj1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV0/bnVsbDphcmd1bWVudHNbMV07dCYmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpKSx0LmFwcGVuZENoaWxkKHRoaXMucmVuZGVyKCkpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gZS5vblJlc2l6ZSgpfSwwKSksciYmdGhpcy5vbihcImNoYW5nZVwiLHIpfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKSx0aGlzLiRlbC5jbGFzc0xpc3QuYWRkKHUubnMsaCksdGhpcy4kZWx9fSx7a2V5Olwib25SZXNpemVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHQ9ZS53aWR0aCxyPXQ+NjAwP1wicmVtb3ZlXCI6XCJhZGRcIjt0aGlzLiRlbC5jbGFzc0xpc3Rbcl0oXCJzbWFsbFwiKX19LHtrZXk6XCJiaW5kRXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt9fV0sW3trZXk6XCJ0aGVtZVwiLHNldDpmdW5jdGlvbihlKXtjLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUuJGVsLmNsYXNzTGlzdC5yZW1vdmUoaCl9KSxoPWUsYy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLiRlbC5jbGFzc0xpc3QuYWRkKGgpfSl9LGdldDpmdW5jdGlvbigpe3JldHVybiBofX1dKSx0fShsLkV2ZW50RW1pdHRlcik7Zi50aGVtZT1cImxpZ2h0XCIsdC5leHBvcnRzPWZ9LHtcIi4vdXRpbHMvc3R5bGVzXCI6OSxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXRcIjoxNCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6MTUsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6MTYsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCI6MTcsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxOCxldmVudHM6MTU5fV0sMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCIpW1wiZGVmYXVsdFwiXSxpPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIilbXCJkZWZhdWx0XCJdLHM9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIilbXCJkZWZhdWx0XCJdLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXSxvPWUoXCJ3YXZlcy11aS9kaXN0L2NvcmUvdGltZWxpbmVcIiksbD1lKFwid2F2ZXMtdWkvZGlzdC9jb3JlL2xheWVyXCIpLHU9ZShcIndhdmVzLXVpL2Rpc3QvY29yZS9sYXllci10aW1lLWNvbnRleHRcIiksYz1lKFwid2F2ZXMtdWkvZGlzdC9zaGFwZXMvbGluZVwiKSxoPWUoXCJ3YXZlcy11aS9kaXN0L3NoYXBlcy9kb3RcIiksZj1lKFwid2F2ZXMtdWkvZGlzdC9iZWhhdmlvcnMvYnJlYWtwb2ludC1iZWhhdmlvclwiKSxkPWUoXCJ3YXZlcy11aS9kaXN0L3N0YXRlcy9iYXNlLXN0YXRlXCIpLHA9ZShcIi4vYmFzZS1jb250cm9sbGVyXCIpLG09ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXthKHRoaXMsdCksbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiY29uc3RydWN0b3JcIix0aGlzKS5jYWxsKHRoaXMsZSksdGhpcy5jdXJyZW50RWRpdGVkTGF5ZXI9bnVsbCx0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbH1yZXR1cm4gaSh0LGUpLHModCxbe2tleTpcImVudGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5OlwiZXhpdFwiLHZhbHVlOmZ1bmN0aW9uKCl7fX0se2tleTpcImhhbmRsZUV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7c3dpdGNoKGUudHlwZSl7Y2FzZVwibW91c2Vkb3duXCI6dGhpcy5vbk1vdXNlRG93bihlKTticmVhaztjYXNlXCJtb3VzZW1vdmVcIjp0aGlzLm9uTW91c2VNb3ZlKGUpO2JyZWFrO2Nhc2VcIm1vdXNldXBcIjp0aGlzLm9uTW91c2VVcChlKX19fSx7a2V5Olwib25Nb3VzZURvd25cIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMubW91c2VEb3duPSEwLHRoaXMuY3VycmVudFRhcmdldD1lLnRhcmdldCx0aGlzLmxheWVycy5mb3JFYWNoKGZ1bmN0aW9uKHIpe3IudW5zZWxlY3QoKTt2YXIgbj1yLmdldEl0ZW1Gcm9tRE9NRWxlbWVudChlLnRhcmdldCk7aWYobnVsbD09PW4pe3ZhciBpPVtlLngvdC50aW1lbGluZS52aXNpYmxlV2lkdGgsMS1lLnkvci5wYXJhbXMuaGVpZ2h0XTtyLmRhdGEucHVzaChpKSx0LnRpbWVsaW5lLnRyYWNrcy5yZW5kZXIoKSx0LnRpbWVsaW5lLnRyYWNrcy51cGRhdGUoKX1lbHNlIGlmKGUub3JpZ2luYWxFdmVudC5zaGlmdEtleSl7dmFyIHM9ci5kYXRhLGk9ci5nZXREYXR1bUZyb21JdGVtKG4pO3Muc3BsaWNlKHMuaW5kZXhPZihpKSwxKSx0LnRpbWVsaW5lLnRyYWNrcy5yZW5kZXIoKSx0LnRpbWVsaW5lLnRyYWNrcy51cGRhdGUoKX1lbHNlIHQuY3VycmVudEVkaXRlZExheWVyPXIsci5zZWxlY3Qobil9KX19LHtrZXk6XCJvbk1vdXNlTW92ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYodGhpcy5tb3VzZURvd24mJnRoaXMuY3VycmVudEVkaXRlZExheWVyKXt2YXIgcj10aGlzLmN1cnJlbnRFZGl0ZWRMYXllcixuPXIuc2VsZWN0ZWRJdGVtcztuLmZvckVhY2goZnVuY3Rpb24obil7ci5lZGl0KG4sZS5keCxlLmR5LHQuY3VycmVudFRhcmdldCl9KSxyLnVwZGF0ZShuKX19fSx7a2V5Olwib25Nb3VzZVVwXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5jdXJyZW50RWRpdGVkTGF5ZXI9bnVsbCx0aGlzLm1vdXNlRG93bj0hMX19XSksdH0oZCksYj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg8PTF8fHZvaWQgMD09PWFyZ3VtZW50c1sxXT9bXTphcmd1bWVudHNbMV0saT1hcmd1bWVudHMubGVuZ3RoPD0yfHx2b2lkIDA9PT1hcmd1bWVudHNbMl0/bnVsbDphcmd1bWVudHNbMl0scz1hcmd1bWVudHMubGVuZ3RoPD0zfHx2b2lkIDA9PT1hcmd1bWVudHNbM10/bnVsbDphcmd1bWVudHNbM107YSh0aGlzLHQpLG4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImNvbnN0cnVjdG9yXCIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLnR5cGU9XCJicmVha3BvaW50XCIsdGhpcy5sZWdlbmQ9ZSx0aGlzLmRvdHM9cixuKE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJfYXBwbHlPcHRpb25uYWxQYXJhbWV0ZXJzXCIsdGhpcykuY2FsbCh0aGlzLGkscyl9cmV0dXJuIGkodCxlKSxzKHQsW3trZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPSdcXG4gICAgICA8c3BhbiBjbGFzcz1cImxlZ2VuZFwiPicrdGhpcy5sZWdlbmQrJzwvc3Bhbj5cXG4gICAgICA8ZGl2IGNsYXNzPVwiaW5uZXItd3JhcHBlciB0aW1lbGluZVwiPjwvZGl2PlxcbiAgICAnLHI9MzAwO3RoaXMuJGVsPW4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcInJlbmRlclwiLHRoaXMpLmNhbGwodGhpcyksdGhpcy4kZWwuY2xhc3NMaXN0LmFkZCh0aGlzLnR5cGUpLHRoaXMuJGVsLmlubmVySFRNTD1lLHRoaXMuJHRyYWNrPXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoXCIudGltZWxpbmVcIiksdGhpcy50aW1lbGluZT1uZXcgbyx0aGlzLnRpbWVsaW5lLmNyZWF0ZVRyYWNrKHRoaXMuJHRyYWNrLHIsXCJtYWluXCIpO3ZhciBpPW5ldyB1KHRoaXMudGltZWxpbmUudGltZUNvbnRleHQpO3RoaXMuYnJlYWtwb2ludExheWVyPW5ldyBsKFwiY29sbGVjdGlvblwiLHRoaXMuZG90cyx7aGVpZ2h0OnJ9KSx0aGlzLmJyZWFrcG9pbnRMYXllci5zZXRUaW1lQ29udGV4dChpKTt2YXIgcz1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV0/bnVsbDphcmd1bWVudHNbMV07cmV0dXJuIG51bGwhPT10JiYoZVswXT10KSxlWzBdfSxhPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg8PTF8fHZvaWQgMD09PWFyZ3VtZW50c1sxXT9udWxsOmFyZ3VtZW50c1sxXTtyZXR1cm4gbnVsbCE9PXQmJihlWzFdPXQpLGVbMV19O3JldHVybiB0aGlzLmJyZWFrcG9pbnRMYXllci5jb25maWd1cmVTaGFwZShoLHtjb2xvcjpmdW5jdGlvbihlKXtyZXR1cm5cIiNmZmZmZmZcIn0sY3g6cyxjeTphfSksdGhpcy5icmVha3BvaW50TGF5ZXIuY29uZmlndXJlQ29tbW9uU2hhcGUoYyx7Y3g6cyxjeTphfSx7Y29sb3I6XCIjZmZmZmZmXCJ9KSx0aGlzLmJyZWFrcG9pbnRMYXllci5zZXRCZWhhdmlvcihuZXcgZiksdGhpcy5icmVha3BvaW50TGF5ZXIub24oXCJlZGl0XCIsZnVuY3Rpb24oZSx0KXt0WzBdPU1hdGgubWF4KDAsTWF0aC5taW4odFswXSwxKSksdFsxXT1NYXRoLm1heCgwLE1hdGgubWluKHRbMV0sMSkpfSksdGhpcy50aW1lbGluZS5hZGRMYXllcih0aGlzLmJyZWFrcG9pbnRMYXllcixcIm1haW5cIiksdGhpcy50aW1lbGluZS50cmFja3MucmVuZGVyKCksdGhpcy50aW1lbGluZS50cmFja3MudXBkYXRlKCksdGhpcy50aW1lbGluZS5zdGF0ZT1uZXcgbSh0aGlzLnRpbWVsaW5lKSx0aGlzLmJpbmRFdmVudHMoKSx0aGlzLiRlbH19LHtrZXk6XCJvblJlc2l6ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7bihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwib25SZXNpemVcIix0aGlzKS5jYWxsKHRoaXMpO3ZhciBlPXRoaXMuJHRyYWNrLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO3RoaXMudGltZWxpbmUudmlzaWJsZVdpZHRoPWUsdGhpcy50aW1lbGluZS5waXhlbHNQZXJTZWNvbmQ9ZSx0aGlzLnRpbWVsaW5lLnRyYWNrcy51cGRhdGUoKX19LHtrZXk6XCJiaW5kRXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMudGltZWxpbmUub24oXCJ1cGRhdGVcIixmdW5jdGlvbigpe2UuZW1pdChcImNoYW5nZVwiLGUuZG90cyl9KX19XSksdH0ocCk7dC5leHBvcnRzPWJ9LHtcIi4vYmFzZS1jb250cm9sbGVyXCI6MixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6MTUsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6MTYsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCI6MTcsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxOCxcIndhdmVzLXVpL2Rpc3QvYmVoYXZpb3JzL2JyZWFrcG9pbnQtYmVoYXZpb3JcIjo1NixcIndhdmVzLXVpL2Rpc3QvY29yZS9sYXllclwiOjU5LFwid2F2ZXMtdWkvZGlzdC9jb3JlL2xheWVyLXRpbWUtY29udGV4dFwiOjU4LFwid2F2ZXMtdWkvZGlzdC9jb3JlL3RpbWVsaW5lXCI6NjIsXCJ3YXZlcy11aS9kaXN0L3NoYXBlcy9kb3RcIjo3MCxcIndhdmVzLXVpL2Rpc3Qvc2hhcGVzL2xpbmVcIjo3MSxcIndhdmVzLXVpL2Rpc3Qvc3RhdGVzL2Jhc2Utc3RhdGVcIjo3M31dLDQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCIpW1wiZGVmYXVsdFwiXSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zyb21cIilbXCJkZWZhdWx0XCJdLGw9ZShcIi4vYmFzZS1jb250cm9sbGVyXCIpLHU9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg8PTJ8fHZvaWQgMD09PWFyZ3VtZW50c1syXT9udWxsOmFyZ3VtZW50c1syXSxzPWFyZ3VtZW50cy5sZW5ndGg8PTN8fHZvaWQgMD09PWFyZ3VtZW50c1szXT9udWxsOmFyZ3VtZW50c1szXTthKHRoaXMsdCksbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiY29uc3RydWN0b3JcIix0aGlzKS5jYWxsKHRoaXMpLHRoaXMudHlwZT1cImJ1dHRvbnNcIix0aGlzLmxlZ2VuZD1lLHRoaXMubGFiZWxzPXIsbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiX2FwcGx5T3B0aW9ubmFsUGFyYW1ldGVyc1wiLHRoaXMpLmNhbGwodGhpcyxpLHMpfXJldHVybiBpKHQsZSkscyh0LFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0nXFxuICAgICAgPHNwYW4gY2xhc3M9XCJsZWdlbmRcIj4nK3RoaXMubGVnZW5kKyc8L3NwYW4+XFxuICAgICAgPGRpdiBjbGFzcz1cImlubmVyLXdyYXBwZXJcIj5cXG4gICAgICAgICcrdGhpcy5sYWJlbHMubWFwKGZ1bmN0aW9uKGUpe3JldHVybic8YnV0dG9uIGRhdGEtbGFiZWw9XCInK2UrJ1wiPicrZStcIjwvYnV0dG9uPlwifSkuam9pbihcIlwiKStcIlxcbiAgICAgIDwvZGl2PlwiO3JldHVybiB0aGlzLiRlbD1uKE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJyZW5kZXJcIix0aGlzKS5jYWxsKHRoaXMpLHRoaXMuJGVsLmNsYXNzTGlzdC5hZGQodGhpcy50eXBlKSx0aGlzLiRlbC5pbm5lckhUTUw9ZSx0aGlzLiRidXR0b25zPW8odGhpcy4kZWwucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvblwiKSksdGhpcy5iaW5kRXZlbnRzKCksdGhpcy4kZWx9fSx7a2V5OlwiYmluZEV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLiRidXR0b25zLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIHI9dC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWxhYmVsXCIpO3QuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSx0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIil9KSx0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsZnVuY3Rpb24obil7bi5wcmV2ZW50RGVmYXVsdCgpLHQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKSxlLmVtaXQoXCJjaGFuZ2VcIixyKX0pfSl9fV0pLHR9KGwpO3QuZXhwb3J0cz11fSx7XCIuL2Jhc2UtY29udHJvbGxlclwiOjIsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbVwiOjEwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIjoxNSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIjoxNixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXRcIjoxNyxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjE4fV0sNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1cIiAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMgeyB3aWR0aDogMTAwJTsgbWF4LXdpZHRoOiA4MDBweDsgaGVpZ2h0OiAzMHB4OyBwYWRkaW5nOiAzcHg7IG1hcmdpbjogNHB4IDA7IGJhY2tncm91bmQtY29sb3I6ICNlZmVmZWY7IGJvcmRlcjogMXB4IHNvbGlkICNhYWFhYWE7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7IGJvcmRlci1yYWRpdXM6IDJweDsgZGlzcGxheTogYmxvY2s7IGNvbG9yOiAjNDY0NjQ2OyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycyAubGVnZW5kIHsgZm9udDogaXRhbGljIGJvbGQgMTJweCBhcmlhbDsgbGluZS1oZWlnaHQ6IDIycHg7IG92ZXJmbG93OiBoaWRkZW47IHRleHQtYWxpZ246IHJpZ2h0OyBwYWRkaW5nOiAwIDhweCAwIDA7IGRpc3BsYXk6IGJsb2NrOyBib3gtc2l6aW5nOiBib3JkZXItYm94OyB3aWR0aDogMjQlOyBmbG9hdDogbGVmdDsgd2hpdGUtc3BhY2U6IG5vd3JhcDsgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLW1vei11c2VyLXNlbGVjdDogbm9uZTsgLW1zLXVzZXItc2VsZWN0OiBub25lOyB1c2VyLXNlbGVjdDogbm9uZTsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMgLmlubmVyLXdyYXBwZXIgeyBkaXNwbGF5OiAtd2Via2l0LWlubGluZS1mbGV4OyBkaXNwbGF5OiBpbmxpbmUtZmxleDsgLXdlYmtpdC1mbGV4LXdyYXA6IG5vLXdyYXA7IGZsZXgtd3JhcDogbm8td3JhcDsgd2lkdGg6IDc2JTsgZmxvYXQ6IGxlZnQ7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLnNtYWxsOm5vdCgudG9nZ2xlKSB7IGhlaWdodDogYXV0bzsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuc21hbGw6bm90KC50b2dnbGUpIC5sZWdlbmQgeyB3aWR0aDogMTAwJTsgZmxvYXQ6IG5vbmU7IHRleHQtYWxpZ246IGxlZnQ7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLnNtYWxsOm5vdCgudG9nZ2xlKSAuaW5uZXItd3JhcHBlciB7IHdpZHRoOiAxMDAlOyBmbG9hdDogbm9uZTsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuc21hbGwudG9nZ2xlIC5sZWdlbmQgeyBkaXNwbGF5OiBibG9jazsgbWFyZ2luLXJpZ2h0OiAyMHB4OyB0ZXh0LWFsaWduOiBsZWZ0OyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5zbWFsbC50b2dnbGUgLmlubmVyLXdyYXBwZXIgeyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHdpZHRoOiBhdXRvOyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy50aXRsZSB7IGJvcmRlcjogbm9uZTsgbWFyZ2luLWJvdHRvbTogMDsgcGFkZGluZy1ib3R0b206IDA7IHBhZGRpbmctdG9wOiA2cHg7IGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBoZWlnaHQ6IDI1cHg7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLnRpdGxlIC5sZWdlbmQgeyBmb250OiBub3JtYWwgYm9sZCAxM3B4IGFyaWFsOyBsaW5lLWhlaWdodDogMjJweDsgaGVpZ2h0OiAyMnB4OyBvdmVyZmxvdzogaGlkZGVuOyB0ZXh0LWFsaWduOiBsZWZ0OyBwYWRkaW5nOiAwOyB3aWR0aDogMTAwJTsgYm94LXNpemluZzogYm9yZGVyLWJveDsgLXdlYmtpdC1mbGV4LWdyb3c6IDE7IGZsZXgtZ3JvdzogMTsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuYnV0dG9ucyBidXR0b24geyBmb250OiBub3JtYWwgbm9ybWFsIDEycHggYXJpYWw7IGhlaWdodDogMjJweDsgYm9yZGVyOiBub25lOyBiYWNrZ3JvdW5kLWNvbG9yOiAjNDY0NjQ2OyBjb2xvcjogI2ZmZmZmZjsgbWFyZ2luOiAwIDRweCAwIDA7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7IGJvcmRlci1yYWRpdXM6IDJweDsgY3Vyc29yOiBwb2ludGVyOyAtd2Via2l0LWZsZXgtZ3JvdzogMTsgZmxleC1ncm93OiAxOyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5idXR0b25zIGJ1dHRvbjpsYXN0LWNoaWxkIHsgbWFyZ2luOiAwOyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5idXR0b25zIGJ1dHRvbi5hY3RpdmUgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjNjg2ODY4OyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5idXR0b25zIGJ1dHRvbjpmb2N1cyB7IG91dGxpbmU6IG5vbmU7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLnRvZ2dsZSAudG9nZ2xlLWNvbnRhaW5lciB7IHBhZGRpbmc6IDA7IG1hcmdpbjogMDsgd2lkdGg6IDE5cHg7IGhlaWdodDogMTlweDsgYmFja2dyb3VuZC1jb2xvcjogIzQ2NDY0NjsgZmxleC1yb3c6IDE7IHBvc2l0aW9uOiByZWxhdGl2ZTsgdG9wOiAxcHg7IGN1cnNvcjogcG9pbnRlcjsgYm9yZGVyLXJhZGl1czogMnB4OyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy50b2dnbGUgLnRvZ2dsZS1jb250YWluZXIgLnggeyB3aWR0aDogMXB4OyBoZWlnaHQ6IDE5cHg7IGJhY2tncm91bmQtY29sb3I6ICNlZmVmZWY7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogOXB4OyBkaXNwbGF5OiBub25lOyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy50b2dnbGUgLnRvZ2dsZS1jb250YWluZXIuYWN0aXZlIC54IHsgZGlzcGxheTogYmxvY2s7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLnRvZ2dsZSAudG9nZ2xlLWNvbnRhaW5lciAueC54MSB7IC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOyB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLnRvZ2dsZSAudG9nZ2xlLWNvbnRhaW5lciAueC54MiB7IC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTsgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuc2xpZGVyIC5pbm5lci13cmFwcGVyIC5yYW5nZSB7IGhlaWdodDogMjJweDsgZGlzcGxheTogaW5saW5lLWJsb2NrOyBtYXJnaW46IDA7IC13ZWJraXQtZmxleC1ncm93OiA0OyBmbGV4LWdyb3c6IDQgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuc2xpZGVyIC5pbm5lci13cmFwcGVyIC5udW1iZXItd3JhcHBlciB7IGRpc3BsYXk6IGlubGluZTsgaGVpZ2h0OiAyMnB4OyB0ZXh0LWFsaWduOiByaWdodDsgLXdlYmtpdC1mbGV4LWdyb3c6IDM7IGZsZXgtZ3JvdzogMzsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuc2xpZGVyIC5pbm5lci13cmFwcGVyLmxhcmdlIC5yYW5nZSB7IC13ZWJraXQtZmxleC1ncm93OiA1MDsgZmxleC1ncm93OiA1MCB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5zbGlkZXIgLmlubmVyLXdyYXBwZXIubGFyZ2UgLm51bWJlci13cmFwcGVyIHsgLXdlYmtpdC1mbGV4LWdyb3c6IDE7IGZsZXgtZ3JvdzogMTsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuc2xpZGVyIC5pbm5lci13cmFwcGVyLnNtYWxsIC5yYW5nZSB7IC13ZWJraXQtZmxleC1ncm93OiAxOyBmbGV4LWdyb3c6IDEgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuc2xpZGVyIC5pbm5lci13cmFwcGVyLnNtYWxsIC5udW1iZXItd3JhcHBlciB7IC13ZWJraXQtZmxleC1ncm93OiA3OyBmbGV4LWdyb3c6IDc7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLnNsaWRlciAuaW5uZXItd3JhcHBlciAubnVtYmVyLXdyYXBwZXIgLm51bWJlciB7IGhlaWdodDogMjJweDsgd2lkdGg6IDU0cHg7IHBvc2l0aW9uOiByZWxhdGl2ZTsgbGVmdDogNXB4OyBmb250OiBub3JtYWwgbm9ybWFsIDEycHggYXJpYWw7IGJvcmRlcjogbm9uZTsgYmFja2dyb3VuZDogbm9uZTsgcGFkZGluZzogMCAwIDAgNHB4OyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHRleHQtYWxpZ246IHJpZ2h0OyB2ZXJ0aWNhbC1hbGlnbjogdG9wOyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5zbGlkZXIgLmlubmVyLXdyYXBwZXIgLm51bWJlci13cmFwcGVyIC51bml0IHsgZm9udDogaXRhbGljIG5vcm1hbCAxMnB4IGFyaWFsOyBsaW5lLWhlaWdodDogMjJweDsgaGVpZ2h0OiAyMnB4OyB3aWR0aDogMzBweDsgZGlzcGxheTogaW5saW5lLWJsb2NrOyBwb3NpdGlvbjogcmVsYXRpdmU7IHBhZGRpbmctbGVmdDogNXB4OyBwYWRkaW5nLXJpZ2h0OiA1cHg7IGNvbG9yOiAjNTY1NjU2OyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5zbGlkZXIgLmlubmVyLXdyYXBwZXIgLm51bWJlci13cmFwcGVyIC51bml0IHN1cCB7IGxpbmUtaGVpZ2h0OiA3cHg7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLmJyZWFrcG9pbnQgeyBoZWlnaHQ6IGF1dG87IG92ZXJmbG93OiBhdXRvOyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5icmVha3BvaW50IC50aW1lbGluZSB7IGJhY2tncm91bmQtY29sb3I6ICM0NjQ2NDY7IGJvcmRlci1yYWRpdXM6IDJweDsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuZGFyayB7IGJhY2tncm91bmQtY29sb3I6ICM0NjQ2NDY7IGJvcmRlcjogMXB4IHNvbGlkICM2ODY4Njg7IGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOTUpOyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5kYXJrLnRpdGxlIHsgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IGJvcmRlcjogbm9uZTsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuZGFyay50b2dnbGUgLnRvZ2dsZS1jb250YWluZXIgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZlZmVmOyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5kYXJrLnRvZ2dsZSAudG9nZ2xlLWNvbnRhaW5lciAueCB7IGJhY2tncm91bmQtY29sb3I6ICM0NjQ2NDY7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLmRhcmsuYnV0dG9ucyBidXR0b24geyBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZlZmVmOyBjb2xvcjogIzQ2NDY0NjsgfSAud2F2ZXMtYmFzaWMtY29udHJvbGxlcnMuZGFyay5idXR0b25zIGJ1dHRvbi5hY3RpdmUgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjY2RjZGNkOyB9IC53YXZlcy1iYXNpYy1jb250cm9sbGVycy5kYXJrLnNsaWRlciAuaW5uZXItd3JhcHBlciAubnVtYmVyLXdyYXBwZXIgLm51bWJlciB7IGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOSk7IH0gLndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLmRhcmsuc2xpZGVyIC5pbm5lci13cmFwcGVyIC5udW1iZXItd3JhcHBlciAudW5pdCB7IGNvbG9yOiAjYmNiY2JjOyB9IFwifSx7fV0sNjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCIpW1wiZGVmYXVsdFwiXSxpPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIilbXCJkZWZhdWx0XCJdLHM9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIilbXCJkZWZhdWx0XCJdLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXSxvPWUoXCIuL2Jhc2UtY29udHJvbGxlclwiKSxsPShlKFwiLi91dGlscy9zdHlsZXNcIiksZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV0/MDphcmd1bWVudHNbMV0saT1hcmd1bWVudHMubGVuZ3RoPD0yfHx2b2lkIDA9PT1hcmd1bWVudHNbMl0/MTphcmd1bWVudHNbMl0scz1hcmd1bWVudHMubGVuZ3RoPD0zfHx2b2lkIDA9PT1hcmd1bWVudHNbM10/LjAxOmFyZ3VtZW50c1szXSxvPWFyZ3VtZW50cy5sZW5ndGg8PTR8fHZvaWQgMD09PWFyZ3VtZW50c1s0XT8wOmFyZ3VtZW50c1s0XSxsPWFyZ3VtZW50cy5sZW5ndGg8PTV8fHZvaWQgMD09PWFyZ3VtZW50c1s1XT9cIlwiOmFyZ3VtZW50c1s1XSx1PWFyZ3VtZW50cy5sZW5ndGg8PTZ8fHZvaWQgMD09PWFyZ3VtZW50c1s2XT9cImRlZmF1bHRcIjphcmd1bWVudHNbNl0sYz1hcmd1bWVudHMubGVuZ3RoPD03fHx2b2lkIDA9PT1hcmd1bWVudHNbN10/bnVsbDphcmd1bWVudHNbN10saD1hcmd1bWVudHMubGVuZ3RoPD04fHx2b2lkIDA9PT1hcmd1bWVudHNbOF0/bnVsbDphcmd1bWVudHNbOF07YSh0aGlzLHQpLG4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImNvbnN0cnVjdG9yXCIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLnR5cGU9XCJzbGlkZXJcIix0aGlzLmxlZ2VuZD1lLHRoaXMubWluPXIsdGhpcy5tYXg9aSx0aGlzLnN0ZXA9cyx0aGlzLnVuaXQ9bCx0aGlzLnNpemU9dSx0aGlzLl92YWx1ZT1vLG4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcIl9hcHBseU9wdGlvbm5hbFBhcmFtZXRlcnNcIix0aGlzKS5jYWxsKHRoaXMsYyxoKX1yZXR1cm4gaSh0LGUpLHModCxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9J1xcbiAgICAgIDxzcGFuIGNsYXNzPVwibGVnZW5kXCI+Jyt0aGlzLmxlZ2VuZCsnPC9zcGFuPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJpbm5lci13cmFwcGVyICcrdGhpcy5zaXplKydcIj5cXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cInJhbmdlXCIgdHlwZT1cInJhbmdlXCIgbWluPVwiJyt0aGlzLm1pbisnXCIgbWF4PVwiJyt0aGlzLm1heCsnXCIgc3RlcD1cIicrdGhpcy5zdGVwKydcIiB2YWx1ZT1cIicrdGhpcy52YWx1ZSsnXCIgLz5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJudW1iZXItd3JhcHBlclwiPlxcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzPVwibnVtYmVyXCIgbWluPVwiJyt0aGlzLm1pbisnXCIgbWF4PVwiJyt0aGlzLm1heCsnXCIgc3RlcD1cIicrdGhpcy5zdGVwKydcIiB2YWx1ZT1cIicrdGhpcy52YWx1ZSsnXCIgLz5cXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ1bml0XCI+Jyt0aGlzLnVuaXQrXCI8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cIjtyZXR1cm4gdGhpcy4kZWw9bihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwicmVuZGVyXCIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLiRlbC5jbGFzc0xpc3QuYWRkKHRoaXMudHlwZSksdGhpcy4kZWwuaW5uZXJIVE1MPWUsdGhpcy4kcmFuZ2U9dGhpcy4kZWwucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cInJhbmdlXCJdJyksdGhpcy4kbnVtYmVyPXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJudW1iZXJcIl0nKSx0aGlzLmJpbmRFdmVudHMoKSx0aGlzLiRlbH19LHtrZXk6XCJiaW5kRXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJHJhbmdlLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLGZ1bmN0aW9uKCl7dmFyIHQ9cGFyc2VGbG9hdChlLiRyYW5nZS52YWx1ZSk7ZS4kbnVtYmVyLnZhbHVlPXQsZS52YWx1ZT10LGUuZW1pdChcImNoYW5nZVwiLHQpfSwhMSksdGhpcy4kbnVtYmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIixmdW5jdGlvbigpe3ZhciB0PXBhcnNlRmxvYXQoZS4kbnVtYmVyLnZhbHVlKTtlLiRyYW5nZS52YWx1ZT10LGUudmFsdWU9dCxlLmVtaXQoXCJjaGFuZ2VcIix0KX0sITEpfX0se2tleTpcInZhbHVlXCIsc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3ZhbHVlPWUsdGhpcy4kbnVtYmVyJiZ0aGlzLiRyYW5nZSYmKHRoaXMuJG51bWJlci52YWx1ZT10aGlzLnZhbHVlLHRoaXMuJHJhbmdlLnZhbHVlPXRoaXMudmFsdWUpfSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdmFsdWV9fV0pLHR9KG8pKTt0LmV4cG9ydHM9bH0se1wiLi9iYXNlLWNvbnRyb2xsZXJcIjoyLFwiLi91dGlscy9zdHlsZXNcIjo5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIjoxNSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIjoxNixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXRcIjoxNyxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjE4fV0sNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCIpW1wiZGVmYXVsdFwiXSxpPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIilbXCJkZWZhdWx0XCJdLHM9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIilbXCJkZWZhdWx0XCJdLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXSxvPWUoXCIuL2Jhc2UtY29udHJvbGxlclwiKSxsPShlKFwiLi91dGlscy9zdHlsZXNcIiksZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV0/bnVsbDphcmd1bWVudHNbMV07YSh0aGlzLHQpLG4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImNvbnN0cnVjdG9yXCIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLnR5cGU9XCJ0aXRsZVwiLHRoaXMubGVnZW5kPWUsbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiX2FwcGx5T3B0aW9ubmFsUGFyYW1ldGVyc1wiLHRoaXMpLmNhbGwodGhpcyxyKX1yZXR1cm4gaSh0LGUpLHModCxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9JzxzcGFuIGNsYXNzPVwibGVnZW5kXCI+Jyt0aGlzLmxlZ2VuZCtcIjwvc3Bhbj5cIjtyZXR1cm4gdGhpcy4kZWw9bihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwicmVuZGVyXCIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLiRlbC5jbGFzc0xpc3QuYWRkKHRoaXMudHlwZSksdGhpcy4kZWwuaW5uZXJIVE1MPWUsdGhpcy4kZWx9fV0pLHR9KG8pKTt0LmV4cG9ydHM9bH0se1wiLi9iYXNlLWNvbnRyb2xsZXJcIjoyLFwiLi91dGlscy9zdHlsZXNcIjo5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIjoxNSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIjoxNixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXRcIjoxNyxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjE4fV0sODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCIpW1wiZGVmYXVsdFwiXSxpPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIilbXCJkZWZhdWx0XCJdLHM9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIilbXCJkZWZhdWx0XCJdLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXSxvPWUoXCIuL2Jhc2UtY29udHJvbGxlclwiKSxsPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDw9MXx8dm9pZCAwPT09YXJndW1lbnRzWzFdPyExOmFyZ3VtZW50c1sxXSxpPWFyZ3VtZW50cy5sZW5ndGg8PTJ8fHZvaWQgMD09PWFyZ3VtZW50c1syXT8hMTphcmd1bWVudHNbMl0scz1hcmd1bWVudHMubGVuZ3RoPD0zfHx2b2lkIDA9PT1hcmd1bWVudHNbM10/bnVsbDphcmd1bWVudHNbM107YSh0aGlzLHQpLG4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImNvbnN0cnVjdG9yXCIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLnR5cGU9XCJ0b2dnbGVcIix0aGlzLmxlZ2VuZD1lLHRoaXMuX2FjdGl2ZT1yLG4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcIl9hcHBseU9wdGlvbm5hbFBhcmFtZXRlcnNcIix0aGlzKS5jYWxsKHRoaXMsaSxzKX1yZXR1cm4gaSh0LGUpLHModCxbe2tleTpcIl91cGRhdGVCdG5cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuYWN0aXZlP1wiYWRkXCI6XCJyZW1vdmVcIjt0aGlzLiR0b2dnbGUuY2xhc3NMaXN0W2VdKFwiYWN0aXZlXCIpfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9J1xcbiAgICAgIDxzcGFuIGNsYXNzPVwibGVnZW5kXCI+Jyt0aGlzLmxlZ2VuZCsnPC9zcGFuPlxcbiAgICAgIDxkaXYgY2xhc3M9XCJpbm5lci13cmFwcGVyXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwidG9nZ2xlLWNvbnRhaW5lclwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwieCB4MVwiPjwvZGl2PjxkaXYgY2xhc3M9XCJ4IHgyXCI+PC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj4nO3JldHVybiB0aGlzLiRlbD1uKE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJyZW5kZXJcIix0aGlzKS5jYWxsKHRoaXMpLHRoaXMuJGVsLmNsYXNzTGlzdC5hZGQodGhpcy50eXBlKSx0aGlzLiRlbC5pbm5lckhUTUw9ZSx0aGlzLiR0b2dnbGU9dGhpcy4kZWwucXVlcnlTZWxlY3RvcihcIi50b2dnbGUtY29udGFpbmVyXCIpLHRoaXMuYmluZEV2ZW50cygpLHRoaXMuYWN0aXZlPXRoaXMuX2FjdGl2ZSx0aGlzLiRlbH19LHtrZXk6XCJiaW5kRXZlbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJHRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksZS5hY3RpdmU9IWUuYWN0aXZlLGUuZW1pdChcImNoYW5nZVwiLGUuYWN0aXZlKX0pfX0se2tleTpcImFjdGl2ZVwiLHNldDpmdW5jdGlvbihlKXt0aGlzLl9hY3RpdmU9ZSx0aGlzLl91cGRhdGVCdG4oKX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2FjdGl2ZX19XSksdH0obyk7dC5leHBvcnRzPWx9LHtcIi4vYmFzZS1jb250cm9sbGVyXCI6MixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6MTUsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6MTYsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCI6MTcsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxOH1dLDk6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi4vLi4vcGFja2FnZS5qc29uXCIpLGk9ZShcIi4uL2Nzcy9zdHlsZXMuanNcIikscz1uLm5hbWU7dC5leHBvcnRzLmluc2VydFN0eWxlU2hlZXQ9ZnVuY3Rpb24oKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7ZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLW5hbWVzcGFjZVwiLHMpLGUuaW5uZXJIVE1MPWksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlKX0sdC5leHBvcnRzLm5zPXN9LHtcIi4uLy4uL3BhY2thZ2UuanNvblwiOjE1OCxcIi4uL2Nzcy9zdHlsZXMuanNcIjo1fV0sMTA6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb21cIjoxOX1dLDExOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCI6MjB9XSwxMjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiOjIxfV0sMTM6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIjoyMn1dLDE0OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3NldFwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL3NldFwiOjIzfV0sMTU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9LHIuX19lc01vZHVsZT0hMH0se31dLDE2OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpW1wiZGVmYXVsdFwiXTtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIGk9dFtyXTtpLmVudW1lcmFibGU9aS5lbnVtZXJhYmxlfHwhMSxpLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBpJiYoaS53cml0YWJsZT0hMCksbihlLGkua2V5LGkpfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxyLl9fZXNNb2R1bGU9ITB9LHtcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCI6MTJ9XSwxNzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKVtcImRlZmF1bHRcIl07cltcImRlZmF1bHRcIl09ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgaT0hMDtpOyl7dmFyIHM9ZSxhPXQsbz1yO2w9Yz11PXZvaWQgMCxpPSExLG51bGw9PT1zJiYocz1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBsPW4ocyxhKTtpZih2b2lkIDAhPT1sKXtpZihcInZhbHVlXCJpbiBsKXJldHVybiBsLnZhbHVlO3ZhciB1PWwuZ2V0O3JldHVybiB2b2lkIDA9PT11P3ZvaWQgMDp1LmNhbGwobyl9dmFyIGM9T2JqZWN0LmdldFByb3RvdHlwZU9mKHMpO2lmKG51bGw9PT1jKXJldHVybiB2b2lkIDA7ZT1jLHQ9YSxyPW8saT0hMH19LHIuX19lc01vZHVsZT0hMH0se1wiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIjoxM31dLDE4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpW1wiZGVmYXVsdFwiXTtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiK3R5cGVvZiB0KTtlLnByb3RvdHlwZT1uKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSx0JiYoZS5fX3Byb3RvX189dCl9LHIuX19lc01vZHVsZT0hMH0se1wiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGVcIjoxMX1dLDE5OltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiKSxlKFwiLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbVwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvJFwiKS5jb3JlLkFycmF5LmZyb219LHtcIi4uLy4uL21vZHVsZXMvJFwiOjM4LFwiLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbVwiOjQ3LFwiLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCI6NTJ9XSwyMDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLi8uLi9tb2R1bGVzLyRcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY3JlYXRlKGUsdCl9fSx7XCIuLi8uLi9tb2R1bGVzLyRcIjozOH1dLDIxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4uLy4uL21vZHVsZXMvJFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuLnNldERlc2MoZSx0LHIpfX0se1wiLi4vLi4vbW9kdWxlcy8kXCI6Mzh9XSwyMjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLi8uLi9tb2R1bGVzLyRcIik7ZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zdGF0aWNzLWFjY2VwdC1wcmltaXRpdmVzXCIpLHQuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuLmdldERlc2MoZSx0KX19LHtcIi4uLy4uL21vZHVsZXMvJFwiOjM4LFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnN0YXRpY3MtYWNjZXB0LXByaW1pdGl2ZXNcIjo0OX1dLDIzOltmdW5jdGlvbihlLHQscil7ZShcIi4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmdcIiksZShcIi4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiKSxlKFwiLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpLGUoXCIuLi9tb2R1bGVzL2VzNi5zZXRcIiksZShcIi4uL21vZHVsZXMvZXM3LnNldC50by1qc29uXCIpLHQuZXhwb3J0cz1lKFwiLi4vbW9kdWxlcy8kXCIpLmNvcmUuU2V0fSx7XCIuLi9tb2R1bGVzLyRcIjozOCxcIi4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmdcIjo1MCxcIi4uL21vZHVsZXMvZXM2LnNldFwiOjUxLFwiLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCI6NTIsXCIuLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvblwiOjUzLFwiLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCI6NTR9XSwyNDpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSx0LHIpe2lmKCFlKXRocm93IFR5cGVFcnJvcihyP3Qrcjp0KX12YXIgaT1lKFwiLi8kXCIpO24uZGVmPWkuYXNzZXJ0RGVmaW5lZCxuLmZuPWZ1bmN0aW9uKGUpe2lmKCFpLmlzRnVuY3Rpb24oZSkpdGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgZnVuY3Rpb24hXCIpO3JldHVybiBlfSxuLm9iaj1mdW5jdGlvbihlKXtpZighaS5pc09iamVjdChlKSl0aHJvdyBUeXBlRXJyb3IoZStcIiBpcyBub3QgYW4gb2JqZWN0IVwiKTtyZXR1cm4gZX0sbi5pbnN0PWZ1bmN0aW9uKGUsdCxyKXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBUeXBlRXJyb3IocitcIjogdXNlIHRoZSAnbmV3JyBvcGVyYXRvciFcIik7cmV0dXJuIGV9LHQuZXhwb3J0cz1ufSx7XCIuLyRcIjozOH1dLDI1OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlKXtyZXR1cm4gYS5jYWxsKGUpLnNsaWNlKDgsLTEpfXZhciBpPWUoXCIuLyRcIikscz1lKFwiLi8kLndrc1wiKShcInRvU3RyaW5nVGFnXCIpLGE9e30udG9TdHJpbmc7bi5jbGFzc29mPWZ1bmN0aW9uKGUpe3ZhciB0LHI7cmV0dXJuIHZvaWQgMD09ZT92b2lkIDA9PT1lP1wiVW5kZWZpbmVkXCI6XCJOdWxsXCI6XCJzdHJpbmdcIj09dHlwZW9mKHI9KHQ9T2JqZWN0KGUpKVtzXSk/cjpuKHQpfSxuLnNldD1mdW5jdGlvbihlLHQscil7ZSYmIWkuaGFzKGU9cj9lOmUucHJvdG90eXBlLHMpJiZpLmhpZGUoZSxzLHQpfSx0LmV4cG9ydHM9bn0se1wiLi8kXCI6MzgsXCIuLyQud2tzXCI6NDZ9XSwyNjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXtpZighZChlKSlyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZT9lOihcInN0cmluZ1wiPT10eXBlb2YgZT9cIlNcIjpcIlBcIikrZTtpZighaChlLGIpKXtpZighbShlKSlyZXR1cm5cIkZcIjtpZighdClyZXR1cm5cIkVcIjtwKGUsYiwrK18pfXJldHVyblwiT1wiK2VbYl19ZnVuY3Rpb24gaShlLHQpe3ZhciByLGk9bih0KTtpZihcIkZcIiE9PWkpcmV0dXJuIGVbZ11baV07Zm9yKHI9ZVt5XTtyO3I9ci5uKWlmKHIuaz09dClyZXR1cm4gcn12YXIgcz1lKFwiLi8kXCIpLGE9ZShcIi4vJC5jdHhcIiksbz1lKFwiLi8kLnVpZFwiKS5zYWZlLGw9ZShcIi4vJC5hc3NlcnRcIiksdT1lKFwiLi8kLmZvci1vZlwiKSxjPWUoXCIuLyQuaXRlclwiKS5zdGVwLGg9cy5oYXMsZj1zLnNldCxkPXMuaXNPYmplY3QscD1zLmhpZGUsbT1PYmplY3QuaXNFeHRlbnNpYmxlfHxkLGI9byhcImlkXCIpLGc9byhcIk8xXCIpLHY9byhcImxhc3RcIikseT1vKFwiZmlyc3RcIiksJD1vKFwiaXRlclwiKSx4PXMuREVTQz9vKFwic2l6ZVwiKTpcInNpemVcIixfPTA7dC5leHBvcnRzPXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbih0LHIsbixvKXt2YXIgYz10KGZ1bmN0aW9uKGUsdCl7bC5pbnN0KGUsYyxyKSxmKGUsZyxzLmNyZWF0ZShudWxsKSksZihlLHgsMCksZihlLHYsdm9pZCAwKSxmKGUseSx2b2lkIDApLHZvaWQgMCE9dCYmdSh0LG4sZVtvXSxlKX0pO3JldHVybiBlKFwiLi8kLm1peFwiKShjLnByb3RvdHlwZSx7Y2xlYXI6ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcyx0PWVbZ10scj1lW3ldO3I7cj1yLm4pci5yPSEwLHIucCYmKHIucD1yLnAubj12b2lkIDApLGRlbGV0ZSB0W3IuaV07ZVt5XT1lW3ZdPXZvaWQgMCxlW3hdPTB9LFwiZGVsZXRlXCI6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPWkodCxlKTtpZihyKXt2YXIgbj1yLm4scz1yLnA7ZGVsZXRlIHRbZ11bci5pXSxyLnI9ITAscyYmKHMubj1uKSxuJiYobi5wPXMpLHRbeV09PXImJih0W3ldPW4pLHRbdl09PXImJih0W3ZdPXMpLHRbeF0tLX1yZXR1cm4hIXJ9LGZvckVhY2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9YShlLGFyZ3VtZW50c1sxXSwzKTt0PXQ/dC5uOnRoaXNbeV07KWZvcihyKHQudix0LmssdGhpcyk7dCYmdC5yOyl0PXQucH0saGFzOmZ1bmN0aW9uKGUpe3JldHVybiEhaSh0aGlzLGUpfX0pLHMuREVTQyYmcy5zZXREZXNjKGMucHJvdG90eXBlLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbC5kZWYodGhpc1t4XSl9fSksY30sZGVmOmZ1bmN0aW9uKGUsdCxyKXt2YXIgcyxhLG89aShlLHQpO3JldHVybiBvP28udj1yOihlW3ZdPW89e2k6YT1uKHQsITApLGs6dCx2OnIscDpzPWVbdl0sbjp2b2lkIDAscjohMX0sZVt5XXx8KGVbeV09bykscyYmKHMubj1vKSxlW3hdKyssXCJGXCIhPT1hJiYoZVtnXVthXT1vKSksZX0sZ2V0RW50cnk6aSxzZXRJdGVyOmZ1bmN0aW9uKHQscixuKXtlKFwiLi8kLml0ZXItZGVmaW5lXCIpKHQscixmdW5jdGlvbihlLHQpe2YodGhpcywkLHtvOmUsazp0fSl9LGZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXNbJF0sdD1lLmsscj1lLmw7ciYmci5yOylyPXIucDtyZXR1cm4gZS5vJiYoZS5sPXI9cj9yLm46ZS5vW3ldKT9cImtleXNcIj09dD9jKDAsci5rKTpcInZhbHVlc1wiPT10P2MoMCxyLnYpOmMoMCxbci5rLHIudl0pOihlLm89dm9pZCAwLGMoMSkpfSxuP1wiZW50cmllc1wiOlwidmFsdWVzXCIsIW4sITApfX19LHtcIi4vJFwiOjM4LFwiLi8kLmFzc2VydFwiOjI0LFwiLi8kLmN0eFwiOjI5LFwiLi8kLmZvci1vZlwiOjMxLFwiLi8kLml0ZXJcIjozNyxcIi4vJC5pdGVyLWRlZmluZVwiOjM1LFwiLi8kLm1peFwiOjM5LFwiLi8kLnVpZFwiOjQ0fV0sMjc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kLmRlZlwiKSxpPWUoXCIuLyQuZm9yLW9mXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtuKG4uUCxlLHt0b0pTT046ZnVuY3Rpb24oKXt2YXIgZT1bXTtyZXR1cm4gaSh0aGlzLCExLGUucHVzaCxlKSxlfX0pfX0se1wiLi8kLmRlZlwiOjMwLFwiLi8kLmZvci1vZlwiOjMxfV0sMjg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi8kXCIpLGk9ZShcIi4vJC5kZWZcIikscz1lKFwiLi8kLml0ZXJcIiksYT1zLkJVR0dZLG89ZShcIi4vJC5mb3Itb2ZcIiksbD1lKFwiLi8kLmFzc2VydFwiKS5pbnN0LHU9ZShcIi4vJC51aWRcIikuc2FmZShcImludGVybmFsXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LHIscyxjLGgsZil7dmFyIGQ9bi5nW3RdLHA9ZCxtPWg/XCJzZXRcIjpcImFkZFwiLGI9cCYmcC5wcm90b3R5cGUsZz17fTtyZXR1cm4gbi5ERVNDJiZuLmlzRnVuY3Rpb24ocCkmJihmfHwhYSYmYi5mb3JFYWNoJiZiLmVudHJpZXMpPyhwPXIoZnVuY3Rpb24oZSxyKXtsKGUscCx0KSxlW3VdPW5ldyBkLHZvaWQgMCE9ciYmbyhyLGgsZVttXSxlKX0pLG4uZWFjaC5jYWxsKFwiYWRkLGNsZWFyLGRlbGV0ZSxmb3JFYWNoLGdldCxoYXMsc2V0LGtleXMsdmFsdWVzLGVudHJpZXNcIi5zcGxpdChcIixcIiksZnVuY3Rpb24oZSl7dmFyIHQ9XCJhZGRcIj09ZXx8XCJzZXRcIj09ZTtlIGluIGImJm4uaGlkZShwLnByb3RvdHlwZSxlLGZ1bmN0aW9uKHIsbil7dmFyIGk9dGhpc1t1XVtlXSgwPT09cj8wOnIsbik7cmV0dXJuIHQ/dGhpczppfSl9KSxcInNpemVcImluIGImJm4uc2V0RGVzYyhwLnByb3RvdHlwZSxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbdV0uc2l6ZX19KSk6KHA9Yy5nZXRDb25zdHJ1Y3RvcihyLHQsaCxtKSxlKFwiLi8kLm1peFwiKShwLnByb3RvdHlwZSxzKSksZShcIi4vJC5jb2ZcIikuc2V0KHAsdCksZ1t0XT1wLGkoaS5HK2kuVytpLkYsZyksZShcIi4vJC5zcGVjaWVzXCIpKHApLGZ8fGMuc2V0SXRlcihwLHQsaCkscH19LHtcIi4vJFwiOjM4LFwiLi8kLmFzc2VydFwiOjI0LFwiLi8kLmNvZlwiOjI1LFwiLi8kLmRlZlwiOjMwLFwiLi8kLmZvci1vZlwiOjMxLFwiLi8kLml0ZXJcIjozNyxcIi4vJC5taXhcIjozOSxcIi4vJC5zcGVjaWVzXCI6NDIsXCIuLyQudWlkXCI6NDR9XSwyOTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLyQuYXNzZXJ0XCIpLmZuO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYobihlKSx+ciYmdm9pZCAwPT09dClyZXR1cm4gZTtzd2l0Y2gocil7Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gZS5jYWxsKHQscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gZS5jYWxsKHQscixuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLG4saSl7cmV0dXJuIGUuY2FsbCh0LHIsbixpKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodCxhcmd1bWVudHMpfX19LHtcIi4vJC5hc3NlcnRcIjoyNH1dLDMwOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlLHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHQsYXJndW1lbnRzKX19ZnVuY3Rpb24gaShlLHQscil7dmFyIHMsdSxjLGgsZj1lJmkuRyxkPWUmaS5QLHA9Zj9hOmUmaS5TP2FbdF06KGFbdF18fHt9KS5wcm90b3R5cGUsbT1mP286b1t0XXx8KG9bdF09e30pO2YmJihyPXQpO2ZvcihzIGluIHIpdT0hKGUmaS5GKSYmcCYmcyBpbiBwLHUmJnMgaW4gbXx8KGM9dT9wW3NdOnJbc10sZiYmIWwocFtzXSk/aD1yW3NdOmUmaS5CJiZ1P2g9bihjLGEpOmUmaS5XJiZwW3NdPT1jPyFmdW5jdGlvbihlKXtoPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzIGluc3RhbmNlb2YgZT9uZXcgZSh0KTplKHQpfSxoLnByb3RvdHlwZT1lLnByb3RvdHlwZX0oYyk6aD1kJiZsKGMpP24oRnVuY3Rpb24uY2FsbCxjKTpjLG1bc109aCxkJiYoKG0ucHJvdG90eXBlfHwobS5wcm90b3R5cGU9e30pKVtzXT1jKSl9dmFyIHM9ZShcIi4vJFwiKSxhPXMuZyxvPXMuY29yZSxsPXMuaXNGdW5jdGlvbjtpLkY9MSxpLkc9MixpLlM9NCxpLlA9OCxpLkI9MTYsaS5XPTMyLHQuZXhwb3J0cz1pfSx7XCIuLyRcIjozOH1dLDMxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vJC5jdHhcIiksaT1lKFwiLi8kLml0ZXJcIikuZ2V0LHM9ZShcIi4vJC5pdGVyLWNhbGxcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGEpe2Zvcih2YXIgbyxsPWkoZSksdT1uKHIsYSx0PzI6MSk7IShvPWwubmV4dCgpKS5kb25lOylpZihzKGwsdSxvLnZhbHVlLHQpPT09ITEpcmV0dXJuIHMuY2xvc2UobCl9fSx7XCIuLyQuY3R4XCI6MjksXCIuLyQuaXRlclwiOjM3LFwiLi8kLml0ZXItY2FsbFwiOjM0fV0sMzI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuRlc9ITEsZS5wYXRoPWUuY29yZSxlfX0se31dLDMzOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlKXt0cnl7cmV0dXJuIGEoZSl9Y2F0Y2godCl7cmV0dXJuIG8uc2xpY2UoKX19dmFyIGk9ZShcIi4vJFwiKSxzPXt9LnRvU3RyaW5nLGE9aS5nZXROYW1lcyxvPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzP09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdyk6W107dC5leHBvcnRzLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gbyYmXCJbb2JqZWN0IFdpbmRvd11cIj09cy5jYWxsKGUpP24oZSk6YShpLnRvT2JqZWN0KGUpKX19LHtcIi4vJFwiOjM4fV0sMzQ6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKGUpe3ZhciB0PWVbXCJyZXR1cm5cIl07dm9pZCAwIT09dCYmcyh0LmNhbGwoZSkpfWZ1bmN0aW9uIGkoZSx0LHIsaSl7dHJ5e3JldHVybiBpP3QocyhyKVswXSxyWzFdKTp0KHIpfWNhdGNoKGEpe3Rocm93IG4oZSksYX19dmFyIHM9ZShcIi4vJC5hc3NlcnRcIikub2JqO2kuY2xvc2U9bix0LmV4cG9ydHM9aX0se1wiLi8kLmFzc2VydFwiOjI0fV0sMzU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kLmRlZlwiKSxpPWUoXCIuLyQucmVkZWZcIikscz1lKFwiLi8kXCIpLGE9ZShcIi4vJC5jb2ZcIiksbz1lKFwiLi8kLml0ZXJcIiksbD1lKFwiLi8kLndrc1wiKShcIml0ZXJhdG9yXCIpLHU9XCJAQGl0ZXJhdG9yXCIsYz1cImtleXNcIixoPVwidmFsdWVzXCIsZj1vLkl0ZXJhdG9yczt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsZCxwLG0sYil7ZnVuY3Rpb24gZyhlKXtmdW5jdGlvbiB0KHQpe3JldHVybiBuZXcgcih0LGUpfXN3aXRjaChlKXtjYXNlIGM6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcyl9O2Nhc2UgaDpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcyl9fW8uY3JlYXRlKHIsdCxkKTt2YXIgdix5LCQ9dCtcIiBJdGVyYXRvclwiLHg9ZS5wcm90b3R5cGUsXz14W2xdfHx4W3VdfHxwJiZ4W3BdLHc9X3x8ZyhwKTtpZihfKXt2YXIgaz1zLmdldFByb3RvKHcuY2FsbChuZXcgZSkpO2Euc2V0KGssJCwhMCkscy5GVyYmcy5oYXMoeCx1KSYmby5zZXQoayxzLnRoYXQpfWlmKChzLkZXfHxiKSYmby5zZXQoeCx3KSxmW3RdPXcsZlskXT1zLnRoYXQscClpZih2PXtrZXlzOm0/dzpnKGMpLHZhbHVlczpwPT1oP3c6ZyhoKSxlbnRyaWVzOnAhPWg/dzpnKFwiZW50cmllc1wiKX0sYilmb3IoeSBpbiB2KXkgaW4geHx8aSh4LHksdlt5XSk7ZWxzZSBuKG4uUCtuLkYqby5CVUdHWSx0LHYpfX0se1wiLi8kXCI6MzgsXCIuLyQuY29mXCI6MjUsXCIuLyQuZGVmXCI6MzAsXCIuLyQuaXRlclwiOjM3LFwiLi8kLnJlZGVmXCI6NDAsXCIuLyQud2tzXCI6NDZ9XSwzNjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLyQud2tzXCIpKFwiaXRlcmF0b3JcIiksaT0hMTt0cnl7dmFyIHM9WzddW25dKCk7c1tcInJldHVyblwiXT1mdW5jdGlvbigpe2k9ITB9LEFycmF5LmZyb20ocyxmdW5jdGlvbigpe3Rocm93IDJ9KX1jYXRjaChhKXt9dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFpKXJldHVybiExO3ZhciB0PSExO3RyeXt2YXIgcj1bN10scz1yW25dKCk7cy5uZXh0PWZ1bmN0aW9uKCl7dD0hMH0scltuXT1mdW5jdGlvbigpe3JldHVybiBzfSxlKHIpfWNhdGNoKGEpe31yZXR1cm4gdH19LHtcIi4vJC53a3NcIjo0Nn1dLDM3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQpe2kuaGlkZShlLHUsdCksYyBpbltdJiZpLmhpZGUoZSxjLHQpfXZhciBpPWUoXCIuLyRcIikscz1lKFwiLi8kLmNvZlwiKSxhPXMuY2xhc3NvZixvPWUoXCIuLyQuYXNzZXJ0XCIpLGw9by5vYmosdT1lKFwiLi8kLndrc1wiKShcIml0ZXJhdG9yXCIpLGM9XCJAQGl0ZXJhdG9yXCIsaD1lKFwiLi8kLnNoYXJlZFwiKShcIml0ZXJhdG9yc1wiKSxmPXt9O24oZixpLnRoYXQpLHQuZXhwb3J0cz17QlVHR1k6XCJrZXlzXCJpbltdJiYhKFwibmV4dFwiaW5bXS5rZXlzKCkpLEl0ZXJhdG9yczpoLHN0ZXA6ZnVuY3Rpb24oZSx0KXtyZXR1cm57dmFsdWU6dCxkb25lOiEhZX19LGlzOmZ1bmN0aW9uKGUpe3ZhciB0PU9iamVjdChlKSxyPWkuZy5TeW1ib2w7cmV0dXJuKHImJnIuaXRlcmF0b3J8fGMpaW4gdHx8dSBpbiB0fHxpLmhhcyhoLGEodCkpfSxnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQscj1pLmcuU3ltYm9sO3JldHVybiB2b2lkIDAhPWUmJih0PWVbciYmci5pdGVyYXRvcnx8Y118fGVbdV18fGhbYShlKV0pLG8oaS5pc0Z1bmN0aW9uKHQpLGUsXCIgaXMgbm90IGl0ZXJhYmxlIVwiKSxsKHQuY2FsbChlKSl9LHNldDpuLGNyZWF0ZTpmdW5jdGlvbihlLHQscixuKXtlLnByb3RvdHlwZT1pLmNyZWF0ZShufHxmLHtuZXh0OmkuZGVzYygxLHIpfSkscy5zZXQoZSx0K1wiIEl0ZXJhdG9yXCIpfX19LHtcIi4vJFwiOjM4LFwiLi8kLmFzc2VydFwiOjI0LFwiLi8kLmNvZlwiOjI1LFwiLi8kLnNoYXJlZFwiOjQxLFwiLi8kLndrc1wiOjQ2fV0sMzg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBpc05hTihlPStlKT8wOihlPjA/bTpwKShlKX1mdW5jdGlvbiBpKGUsdCl7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnR9fWZ1bmN0aW9uIHMoZSx0LHIpe3JldHVybiBlW3RdPXIsZX1mdW5jdGlvbiBhKGUpe3JldHVybiB2P2Z1bmN0aW9uKHQscixuKXtyZXR1cm4gJC5zZXREZXNjKHQscixpKGUsbikpfTpzfWZ1bmN0aW9uIG8oZSl7cmV0dXJuIG51bGwhPT1lJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpfWZ1bmN0aW9uIGwoZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1mdW5jdGlvbiB1KGUpe2lmKHZvaWQgMD09ZSl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIrZSk7cmV0dXJuIGV9dmFyIGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCksaD17fSxmPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxkPXt9Lmhhc093blByb3BlcnR5LHA9TWF0aC5jZWlsLG09TWF0aC5mbG9vcixiPU1hdGgubWF4LGc9TWF0aC5taW4sdj0hIWZ1bmN0aW9uKCl7dHJ5e3JldHVybiAyPT1mKHt9LFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMn19KS5hfWNhdGNoKGUpe319KCkseT1hKDEpLCQ9dC5leHBvcnRzPWUoXCIuLyQuZndcIikoe2c6Yyxjb3JlOmgsaHRtbDpjLmRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsaXNPYmplY3Q6byxpc0Z1bmN0aW9uOmwsdGhhdDpmdW5jdGlvbigpe3JldHVybiB0aGlzfSx0b0ludGVnZXI6bix0b0xlbmd0aDpmdW5jdGlvbihlKXtyZXR1cm4gZT4wP2cobihlKSw5MDA3MTk5MjU0NzQwOTkxKTowfSx0b0luZGV4OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bihlKSwwPmU/YihlK3QsMCk6ZyhlLHQpfSxoYXM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZC5jYWxsKGUsdCl9LGNyZWF0ZTpPYmplY3QuY3JlYXRlLGdldFByb3RvOk9iamVjdC5nZXRQcm90b3R5cGVPZixERVNDOnYsZGVzYzppLGdldERlc2M6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixzZXREZXNjOmYsc2V0RGVzY3M6T2JqZWN0LmRlZmluZVByb3BlcnRpZXMsZ2V0S2V5czpPYmplY3Qua2V5cyxnZXROYW1lczpPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxnZXRTeW1ib2xzOk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsYXNzZXJ0RGVmaW5lZDp1LEVTNU9iamVjdDpPYmplY3QsdG9PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuICQuRVM1T2JqZWN0KHUoZSkpfSxoaWRlOnksZGVmOmEoMCksc2V0OmMuU3ltYm9sP3M6eSxlYWNoOltdLmZvckVhY2h9KTtcInVuZGVmaW5lZFwiIT10eXBlb2YgX19lJiYoX19lPWgpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBfX2cmJihfX2c9Yyl9LHtcIi4vJC5md1wiOjMyfV0sMzk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kLnJlZGVmXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KW4oZSxyLHRbcl0pO3JldHVybiBlfX0se1wiLi8kLnJlZGVmXCI6NDB9XSw0MDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKFwiLi8kXCIpLmhpZGV9LHtcIi4vJFwiOjM4fV0sNDE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kXCIpLGk9XCJfX2NvcmUtanNfc2hhcmVkX19cIixzPW4uZ1tpXXx8KG4uZ1tpXT17fSk7XG50LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHNbZV18fChzW2VdPXt9KX19LHtcIi4vJFwiOjM4fV0sNDI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kXCIpLGk9ZShcIi4vJC53a3NcIikoXCJzcGVjaWVzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXshbi5ERVNDfHxpIGluIGV8fG4uc2V0RGVzYyhlLGkse2NvbmZpZ3VyYWJsZTohMCxnZXQ6bi50aGF0fSl9fSx7XCIuLyRcIjozOCxcIi4vJC53a3NcIjo0Nn1dLDQzOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vJFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscil7dmFyIGkscyxhPVN0cmluZyhuLmFzc2VydERlZmluZWQodCkpLG89bi50b0ludGVnZXIociksbD1hLmxlbmd0aDtyZXR1cm4gMD5vfHxvPj1sP2U/XCJcIjp2b2lkIDA6KGk9YS5jaGFyQ29kZUF0KG8pLDU1Mjk2Pml8fGk+NTYzMTl8fG8rMT09PWx8fChzPWEuY2hhckNvZGVBdChvKzEpKTw1NjMyMHx8cz41NzM0Mz9lP2EuY2hhckF0KG8pOmk6ZT9hLnNsaWNlKG8sbysyKTooaS01NTI5Njw8MTApKyhzLTU2MzIwKSs2NTUzNil9fX0se1wiLi8kXCI6Mzh9XSw0NDpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oZSl7cmV0dXJuXCJTeW1ib2woXCIuY29uY2F0KHZvaWQgMD09PWU/XCJcIjplLFwiKV9cIiwoKytpK01hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDM2KSl9dmFyIGk9MDtuLnNhZmU9ZShcIi4vJFwiKS5nLlN5bWJvbHx8bix0LmV4cG9ydHM9bn0se1wiLi8kXCI6Mzh9XSw0NTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbigpe319LHt9XSw0NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLyRcIikuZyxpPWUoXCIuLyQuc2hhcmVkXCIpKFwid2tzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gaVt0XXx8KGlbdF09bi5TeW1ib2wmJm4uU3ltYm9sW3RdfHxlKFwiLi8kLnVpZFwiKS5zYWZlKFwiU3ltYm9sLlwiK3QpKX19LHtcIi4vJFwiOjM4LFwiLi8kLnNoYXJlZFwiOjQxLFwiLi8kLnVpZFwiOjQ0fV0sNDc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kXCIpLGk9ZShcIi4vJC5jdHhcIikscz1lKFwiLi8kLmRlZlwiKSxhPWUoXCIuLyQuaXRlclwiKSxvPWUoXCIuLyQuaXRlci1jYWxsXCIpO3Mocy5TK3MuRiohZShcIi4vJC5pdGVyLWRldGVjdFwiKShmdW5jdGlvbihlKXtBcnJheS5mcm9tKGUpfSksXCJBcnJheVwiLHtmcm9tOmZ1bmN0aW9uKGUpe3ZhciB0LHIscyxsLHU9T2JqZWN0KG4uYXNzZXJ0RGVmaW5lZChlKSksYz1hcmd1bWVudHNbMV0saD12b2lkIDAhPT1jLGY9aD9pKGMsYXJndW1lbnRzWzJdLDIpOnZvaWQgMCxkPTA7aWYoYS5pcyh1KSlmb3IobD1hLmdldCh1KSxyPW5ldyhcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzP3RoaXM6QXJyYXkpOyEocz1sLm5leHQoKSkuZG9uZTtkKyspcltkXT1oP28obCxmLFtzLnZhbHVlLGRdLCEwKTpzLnZhbHVlO2Vsc2UgZm9yKHI9bmV3KFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXM/dGhpczpBcnJheSkodD1uLnRvTGVuZ3RoKHUubGVuZ3RoKSk7dD5kO2QrKylyW2RdPWg/Zih1W2RdLGQpOnVbZF07cmV0dXJuIHIubGVuZ3RoPWQscn19KX0se1wiLi8kXCI6MzgsXCIuLyQuY3R4XCI6MjksXCIuLyQuZGVmXCI6MzAsXCIuLyQuaXRlclwiOjM3LFwiLi8kLml0ZXItY2FsbFwiOjM0LFwiLi8kLml0ZXItZGV0ZWN0XCI6MzZ9XSw0ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLyRcIiksaT1lKFwiLi8kLnVuc2NvcGVcIikscz1lKFwiLi8kLnVpZFwiKS5zYWZlKFwiaXRlclwiKSxhPWUoXCIuLyQuaXRlclwiKSxvPWEuc3RlcCxsPWEuSXRlcmF0b3JzO2UoXCIuLyQuaXRlci1kZWZpbmVcIikoQXJyYXksXCJBcnJheVwiLGZ1bmN0aW9uKGUsdCl7bi5zZXQodGhpcyxzLHtvOm4udG9PYmplY3QoZSksaTowLGs6dH0pfSxmdW5jdGlvbigpe3ZhciBlPXRoaXNbc10sdD1lLm8scj1lLmssbj1lLmkrKztyZXR1cm4hdHx8bj49dC5sZW5ndGg/KGUubz12b2lkIDAsbygxKSk6XCJrZXlzXCI9PXI/bygwLG4pOlwidmFsdWVzXCI9PXI/bygwLHRbbl0pOm8oMCxbbix0W25dXSl9LFwidmFsdWVzXCIpLGwuQXJndW1lbnRzPWwuQXJyYXksaShcImtleXNcIiksaShcInZhbHVlc1wiKSxpKFwiZW50cmllc1wiKX0se1wiLi8kXCI6MzgsXCIuLyQuaXRlclwiOjM3LFwiLi8kLml0ZXItZGVmaW5lXCI6MzUsXCIuLyQudWlkXCI6NDQsXCIuLyQudW5zY29wZVwiOjQ1fV0sNDk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kXCIpLGk9ZShcIi4vJC5kZWZcIikscz1uLmlzT2JqZWN0LGE9bi50b09iamVjdDtuLmVhY2guY2FsbChcImZyZWV6ZSxzZWFsLHByZXZlbnRFeHRlbnNpb25zLGlzRnJvemVuLGlzU2VhbGVkLGlzRXh0ZW5zaWJsZSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsZ2V0UHJvdG90eXBlT2Ysa2V5cyxnZXRPd25Qcm9wZXJ0eU5hbWVzXCIuc3BsaXQoXCIsXCIpLGZ1bmN0aW9uKHQscil7dmFyIG89KG4uY29yZS5PYmplY3R8fHt9KVt0XXx8T2JqZWN0W3RdLGw9MCx1PXt9O3VbdF09MD09cj9mdW5jdGlvbihlKXtyZXR1cm4gcyhlKT9vKGUpOmV9OjE9PXI/ZnVuY3Rpb24oZSl7cmV0dXJuIHMoZSk/byhlKTplfToyPT1yP2Z1bmN0aW9uKGUpe3JldHVybiBzKGUpP28oZSk6ZX06Mz09cj9mdW5jdGlvbihlKXtyZXR1cm4gcyhlKT9vKGUpOiEwfTo0PT1yP2Z1bmN0aW9uKGUpe3JldHVybiBzKGUpP28oZSk6ITB9OjU9PXI/ZnVuY3Rpb24oZSl7cmV0dXJuIHMoZSk/byhlKTohMX06Nj09cj9mdW5jdGlvbihlLHQpe3JldHVybiBvKGEoZSksdCl9Ojc9PXI/ZnVuY3Rpb24oZSl7cmV0dXJuIG8oT2JqZWN0KG4uYXNzZXJ0RGVmaW5lZChlKSkpfTo4PT1yP2Z1bmN0aW9uKGUpe3JldHVybiBvKGEoZSkpfTplKFwiLi8kLmdldC1uYW1lc1wiKS5nZXQ7dHJ5e28oXCJ6XCIpfWNhdGNoKGMpe2w9MX1pKGkuUytpLkYqbCxcIk9iamVjdFwiLHUpfSl9LHtcIi4vJFwiOjM4LFwiLi8kLmRlZlwiOjMwLFwiLi8kLmdldC1uYW1lc1wiOjMzfV0sNTA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi8kLmNvZlwiKSxpPXt9O2lbZShcIi4vJC53a3NcIikoXCJ0b1N0cmluZ1RhZ1wiKV09XCJ6XCIsZShcIi4vJFwiKS5GVyYmXCJ6XCIhPW4oaSkmJmUoXCIuLyQucmVkZWZcIikoT2JqZWN0LnByb3RvdHlwZSxcInRvU3RyaW5nXCIsZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgXCIrbi5jbGFzc29mKHRoaXMpK1wiXVwifSwhMCl9LHtcIi4vJFwiOjM4LFwiLi8kLmNvZlwiOjI1LFwiLi8kLnJlZGVmXCI6NDAsXCIuLyQud2tzXCI6NDZ9XSw1MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuLyQuY29sbGVjdGlvbi1zdHJvbmdcIik7ZShcIi4vJC5jb2xsZWN0aW9uXCIpKFwiU2V0XCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcyxhcmd1bWVudHNbMF0pfX0se2FkZDpmdW5jdGlvbihlKXtyZXR1cm4gbi5kZWYodGhpcyxlPTA9PT1lPzA6ZSxlKX19LG4pfSx7XCIuLyQuY29sbGVjdGlvblwiOjI4LFwiLi8kLmNvbGxlY3Rpb24tc3Ryb25nXCI6MjZ9XSw1MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLyRcIikuc2V0LGk9ZShcIi4vJC5zdHJpbmctYXRcIikoITApLHM9ZShcIi4vJC51aWRcIikuc2FmZShcIml0ZXJcIiksYT1lKFwiLi8kLml0ZXJcIiksbz1hLnN0ZXA7ZShcIi4vJC5pdGVyLWRlZmluZVwiKShTdHJpbmcsXCJTdHJpbmdcIixmdW5jdGlvbihlKXtuKHRoaXMscyx7bzpTdHJpbmcoZSksaTowfSl9LGZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzW3NdLHI9dC5vLG49dC5pO3JldHVybiBuPj1yLmxlbmd0aD9vKDEpOihlPWkocixuKSx0LmkrPWUubGVuZ3RoLG8oMCxlKSl9KX0se1wiLi8kXCI6MzgsXCIuLyQuaXRlclwiOjM3LFwiLi8kLml0ZXItZGVmaW5lXCI6MzUsXCIuLyQuc3RyaW5nLWF0XCI6NDMsXCIuLyQudWlkXCI6NDR9XSw1MzpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLyQuY29sbGVjdGlvbi10by1qc29uXCIpKFwiU2V0XCIpfSx7XCIuLyQuY29sbGVjdGlvbi10by1qc29uXCI6Mjd9XSw1NDpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuL2VzNi5hcnJheS5pdGVyYXRvclwiKTt2YXIgbj1lKFwiLi8kXCIpLGk9ZShcIi4vJC5pdGVyXCIpLkl0ZXJhdG9ycyxzPWUoXCIuLyQud2tzXCIpKFwiaXRlcmF0b3JcIiksYT1pLkFycmF5LG89bi5nLk5vZGVMaXN0LGw9bi5nLkhUTUxDb2xsZWN0aW9uLHU9byYmby5wcm90b3R5cGUsYz1sJiZsLnByb3RvdHlwZTtuLkZXJiYoIW98fHMgaW4gdXx8bi5oaWRlKHUscyxhKSwhbHx8cyBpbiBjfHxuLmhpZGUoYyxzLGEpKSxpLk5vZGVMaXN0PWkuSFRNTENvbGxlY3Rpb249YX0se1wiLi8kXCI6MzgsXCIuLyQuaXRlclwiOjM3LFwiLi8kLndrc1wiOjQ2LFwiLi9lczYuYXJyYXkuaXRlcmF0b3JcIjo0OH1dLDU1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIilbXCJkZWZhdWx0XCJdLGk9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvdG8tY29uc3VtYWJsZS1hcnJheVwiKVtcImRlZmF1bHRcIl0sYT1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3NldFwiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ25cIilbXCJkZWZhdWx0XCJdO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg8PTB8fHZvaWQgMD09PWFyZ3VtZW50c1swXT97fTphcmd1bWVudHNbMF07aSh0aGlzLGUpLHRoaXMuX3NlbGVjdGVkSXRlbXM9bmV3IGEsdGhpcy5fc2VsZWN0ZWRDbGFzcz10LnNlbGVjdGVkQ2xhc3N8fFwic2VsZWN0ZWRcIix0aGlzLl9sYXllcj1udWxsLHRoaXMuX3BhcmFtcz1vKHt9LHRoaXMuZ2V0RGVmYXVsdHMoKSx0KX1yZXR1cm4gbihlLFt7a2V5OlwiaW5pdGlhbGl6ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX2xheWVyPWV9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7fX0se2tleTpcImdldERlZmF1bHRzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm57fX19LHtrZXk6XCJzZWxlY3RcIix2YWx1ZTpmdW5jdGlvbihlLHQpe2UuY2xhc3NMaXN0LmFkZCh0aGlzLnNlbGVjdGVkQ2xhc3MpLHRoaXMuX3NlbGVjdGVkSXRlbXMuYWRkKGUpfX0se2tleTpcInVuc2VsZWN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtlLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zZWxlY3RlZENsYXNzKSx0aGlzLl9zZWxlY3RlZEl0ZW1zW1wiZGVsZXRlXCJdKGUpfX0se2tleTpcInRvZ2dsZVNlbGVjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5fc2VsZWN0ZWRJdGVtcy5oYXMoZSk/XCJ1bnNlbGVjdFwiOlwic2VsZWN0XCI7dGhpc1tyXShlKX19LHtrZXk6XCJlZGl0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbixpLHMpe319LHtrZXk6XCJzZWxlY3RlZENsYXNzXCIsc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3NlbGVjdGVkQ2xhc3M9ZX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlbGVjdGVkQ2xhc3N9fSx7a2V5Olwic2VsZWN0ZWRJdGVtc1wiLGdldDpmdW5jdGlvbigpe3JldHVybltdLmNvbmNhdChzKHRoaXMuX3NlbGVjdGVkSXRlbXMpKX19XSksZX0oKTtyW1wiZGVmYXVsdFwiXT1sLHQuZXhwb3J0cz1yW1wiZGVmYXVsdFwiXX0se1wiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ25cIjo3OSxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXRcIjo4NixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6ODksXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6OTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvdG8tY29uc3VtYWJsZS1hcnJheVwiOjk1fV0sNTY6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCIpW1wiZGVmYXVsdFwiXSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbD1lKFwiLi9iYXNlLWJlaGF2aW9yXCIpLHU9byhsKSxjPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXthKHRoaXMsdCksbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiY29uc3RydWN0b3JcIix0aGlzKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGkodCxlKSxzKHQsW3trZXk6XCJlZGl0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbixpLHMpe3ZhciBhPXRoaXMuX2xheWVyLmRhdGEsbz1lLmhlaWdodCxsPWUudGltZVRvUGl4ZWwodC5jeChyKSksdT1lLnZhbHVlVG9QaXhlbCh0LmN5KHIpKSxjPWwrbixoPXUtaTtpZihhLmxlbmd0aD4yKXt2YXIgZj1hLm1hcChmdW5jdGlvbihyKXtyZXR1cm4gZS50aW1lVG9QaXhlbCh0LmN4KHIpKX0pO2Yuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiB0PmU/LTE6MX0pO3ZhciBkPWYuaW5kZXhPZihsKTsoYzxmW2QtMV18fGM+ZltkKzFdKSYmKGM9bCl9MD5oP2g9MDpoPm8mJihoPW8pLHQuY3gocixlLnRpbWVUb1BpeGVsLmludmVydChjKSksdC5jeShyLGUudmFsdWVUb1BpeGVsLmludmVydChoKSl9fV0pLHR9KHVbXCJkZWZhdWx0XCJdKTtyW1wiZGVmYXVsdFwiXT1jLHQuZXhwb3J0cz1yW1wiZGVmYXVsdFwiXX0se1wiLi9iYXNlLWJlaGF2aW9yXCI6NTUsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiOjg5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiOjkwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiOjkxLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6OTIsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIjo5M31dLDU3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIilbXCJkZWZhdWx0XCJdLGk9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXtpKHRoaXMsZSl9cmV0dXJuIG4oZSxbe2tleTpcImVkaXRcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXt2YXIgaT1lLnRpbWVDb250ZXh0O24uY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGFuZGxlclwiKSYmbi5jbGFzc0xpc3QuY29udGFpbnMoXCJsZWZ0XCIpP3RoaXMuX2VkaXRMZWZ0KGksdCk6bi5jbGFzc0xpc3QuY29udGFpbnMoXCJoYW5kbGVyXCIpJiZuLmNsYXNzTGlzdC5jb250YWlucyhcInJpZ2h0XCIpP3RoaXMuX2VkaXRSaWdodChpLHQpOm4uY2xhc3NMaXN0LmNvbnRhaW5zKFwic2VnbWVudFwiKSYmdGhpcy5fbW92ZShpLHQpfX0se2tleTpcIl9lZGl0TGVmdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXJlbnQudGltZVRvUGl4ZWwoZS5zdGFydCksbj1lLnRpbWVUb1BpeGVsKGUub2Zmc2V0KSxpPWUudGltZVRvUGl4ZWwoZS5kdXJhdGlvbikscz1yK3QsYT1uLXQsbz1NYXRoLm1heChpLXQsMSk7ZS5zdGFydD1lLnBhcmVudC50aW1lVG9QaXhlbC5pbnZlcnQocyksZS5vZmZzZXQ9ZS50aW1lVG9QaXhlbC5pbnZlcnQoYSksZS5kdXJhdGlvbj1lLnRpbWVUb1BpeGVsLmludmVydChvKX19LHtrZXk6XCJfZWRpdFJpZ2h0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnRpbWVUb1BpeGVsKGUuZHVyYXRpb24pLG49TWF0aC5tYXgocit0LDEpO2UuZHVyYXRpb249ZS50aW1lVG9QaXhlbC5pbnZlcnQobil9fSx7a2V5OlwiX21vdmVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPWUucGFyZW50LnRpbWVUb1BpeGVsKGUuc3RhcnQpLG49TWF0aC5tYXgocit0LDApO2Uuc3RhcnQ9ZS5wYXJlbnQudGltZVRvUGl4ZWwuaW52ZXJ0KG4pfX0se2tleTpcInN0cmV0Y2hcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXt2YXIgaT1lLnRpbWVDb250ZXh0LHM9aS5kdXJhdGlvbixhPWkub2Zmc2V0O3RoaXMuZWRpdChlLHQscixuKTt2YXIgbz1pLmR1cmF0aW9uLGw9by9zO2kuc3RyZXRjaFJhdGlvKj1sLGkub2Zmc2V0PWEsaS5kdXJhdGlvbj1zfX1dKSxlfSgpO3JbXCJkZWZhdWx0XCJdPXMsdC5leHBvcnRzPXJbXCJkZWZhdWx0XCJdfSx7XCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiOjg5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiOjkwfV0sNTg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIilbXCJkZWZhdWx0XCJdLHM9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdFwiKVtcImRlZmF1bHRcIl07T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9ZShcIi4uL3V0aWxzL3NjYWxlc1wiKSxvPXMoYSksbD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7aWYoaSh0aGlzLGUpLCF0KXRocm93IG5ldyBFcnJvcihcIkxheWVyVGltZUNvbnRleHQgbXVzdCBoYXZlIGEgcGFyZW50XCIpO3RoaXMucGFyZW50PXQsdGhpcy5fdGltZVRvUGl4ZWw9bnVsbCx0aGlzLl9zdGFydD0wLHRoaXMuX2R1cmF0aW9uPXQudmlzaWJsZUR1cmF0aW9uLHRoaXMuX29mZnNldD0wLHRoaXMuX3N0cmV0Y2hSYXRpbz0xLHRoaXMucGFyZW50Ll9jaGlsZHJlbi5wdXNoKHRoaXMpfXJldHVybiBuKGUsW3trZXk6XCJjbG9uZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9bmV3IHRoaXM7cmV0dXJuIGUucGFyZW50PXRoaXMucGFyZW50LGUuc3RhcnQ9dGhpcy5zdGFydCxlLmR1cmF0aW9uPXRoaXMuZHVyYXRpb24sZS5vZmZzZXQ9dGhpcy5vZmZzZXQsZS5zdHJldGNoUmF0aW89dGhpcy5zdHJldGNoUmF0aW8sZX19LHtrZXk6XCJzdGFydFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGFydH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3N0YXJ0PWV9fSx7a2V5OlwiZHVyYXRpb25cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZHVyYXRpb259LHNldDpmdW5jdGlvbihlKXt0aGlzLl9kdXJhdGlvbj1lfX0se2tleTpcIm9mZnNldFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vZmZzZXR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9vZmZzZXQ9ZX19LHtrZXk6XCJzdHJldGNoUmF0aW9cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RyZXRjaFJhdGlvfSxzZXQ6ZnVuY3Rpb24oZSl7aWYoMT09PWUpcmV0dXJuIHZvaWQodGhpcy5fdGltZVRvUGl4ZWw9bnVsbCk7dmFyIHQ9dGhpcy5fdGltZVRvUGl4ZWw/dGhpcy5fdGltZVRvUGl4ZWw6b1tcImRlZmF1bHRcIl0ubGluZWFyKCkuZG9tYWluKFswLDFdKTt0LnJhbmdlKFswLHRoaXMucGFyZW50LmNvbXB1dGVkUGl4ZWxzUGVyU2Vjb25kKmVdKSx0aGlzLl90aW1lVG9QaXhlbD10LHRoaXMuX3N0cmV0Y2hSYXRpbz1lfX0se2tleTpcInRpbWVUb1BpeGVsXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RpbWVUb1BpeGVsP3RoaXMuX3RpbWVUb1BpeGVsOnRoaXMucGFyZW50LnRpbWVUb1BpeGVsfX1dKSxlfSgpO3JbXCJkZWZhdWx0XCJdPWwsdC5leHBvcnRzPXJbXCJkZWZhdWx0XCJdfSx7XCIuLi91dGlscy9zY2FsZXNcIjo3NCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6ODksXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6OTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIjo5M31dLDU5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXRcIilbXCJkZWZhdWx0XCJdLGk9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKVtcImRlZmF1bHRcIl0scz1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiKVtcImRlZmF1bHRcIl0sYT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIilbXCJkZWZhdWx0XCJdLG89ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9zbGljZWQtdG8tYXJyYXlcIilbXCJkZWZhdWx0XCJdLGw9ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduXCIpW1wiZGVmYXVsdFwiXSx1PWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvbWFwXCIpW1wiZGVmYXVsdFwiXSxjPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvZ2V0LWl0ZXJhdG9yXCIpW1wiZGVmYXVsdFwiXSxoPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIilbXCJkZWZhdWx0XCJdO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBmPWUoXCIuLi91dGlscy9zY2FsZXNcIiksZD1oKGYpLHA9ZShcImV2ZW50c1wiKSxtPWgocCksYj1lKFwiLi9uYW1lc3BhY2VcIiksZz1oKGIpLHY9ZShcIi4uL3NoYXBlcy9zZWdtZW50XCIpLHk9aCh2KSwkPWUoXCIuLi9iZWhhdmlvcnMvdGltZS1jb250ZXh0LWJlaGF2aW9yXCIpLHg9aCgkKSxfPW51bGwsdz14W1wiZGVmYXVsdFwiXSxrPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyKXt2YXIgaT1hcmd1bWVudHMubGVuZ3RoPD0yfHx2b2lkIDA9PT1hcmd1bWVudHNbMl0/e306YXJndW1lbnRzWzJdO2EodGhpcyx0KSxuKE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJjb25zdHJ1Y3RvclwiLHRoaXMpLmNhbGwodGhpcyksdGhpcy5kYXRhVHlwZT1lLHRoaXMuZGF0YT1yO3ZhciBzPXtoZWlnaHQ6MTAwLHRvcDowLGlkOlwiXCIseURvbWFpbjpbMCwxXSxvcGFjaXR5OjEsY29udGV4dEhhbmRsZXJXaWR0aDoyLGNsYXNzTmFtZTpudWxsfTt0aGlzLnBhcmFtcz1sKHt9LHMsaSksdGhpcy50aW1lQ29udGV4dD1udWxsLHRoaXMuJGVsPW51bGwsdGhpcy4kYm91bmRpbmdCb3g9bnVsbCx0aGlzLiRvZmZzZXQ9bnVsbCx0aGlzLiRpbnRlcmFjdGlvbnM9bnVsbCx0aGlzLl9zaGFwZUNvbmZpZ3VyYXRpb249bnVsbCx0aGlzLl9jb21tb25TaGFwZUNvbmZpZ3VyYXRpb249bnVsbCx0aGlzLl8kaXRlbVNoYXBlTWFwPW5ldyB1LHRoaXMuXyRpdGVtRGF0YU1hcD1uZXcgdSx0aGlzLl8kaXRlbUNvbW1vblNoYXBlTWFwPW5ldyB1LHRoaXMuX2lzQ29udGV4dEVkaXRhYmxlPSExLHRoaXMuX2JlaGF2aW9yPW51bGwsdGhpcy5fdmFsdWVUb1BpeGVsPWRbXCJkZWZhdWx0XCJdLmxpbmVhcigpLmRvbWFpbih0aGlzLnBhcmFtcy55RG9tYWluKS5yYW5nZShbMCx0aGlzLnBhcmFtcy5oZWlnaHRdKSx0aGlzLmNvbnRleHRCZWhhdmlvcj1cIlwiLHRoaXMuX3JlbmRlckNvbnRhaW5lcigpLG51bGw9PT1fJiYoXz1uZXcgdyl9cmV0dXJuIGkodCxlKSxzKHQsW3trZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnRpbWVDb250ZXh0PW51bGwsdGhpcy5kYXRhPW51bGwsdGhpcy5wYXJhbXM9bnVsbCx0aGlzLl9iZWhhdmlvcj1udWxsLHRoaXMuXyRpdGVtU2hhcGVNYXAuY2xlYXIoKSx0aGlzLl8kaXRlbURhdGFNYXAuY2xlYXIoKSx0aGlzLl8kaXRlbUNvbW1vblNoYXBlTWFwLmNsZWFyKCksdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKX19LHtrZXk6XCJzZXRUaW1lQ29udGV4dFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMudGltZUNvbnRleHQ9ZSx0aGlzLl9yZW5kZXJpbmdDb250ZXh0PXt9LHRoaXMuX3VwZGF0ZVJlbmRlcmluZ0NvbnRleHQoKX19LHtrZXk6XCJfcmVuZGVyQ29udGFpbmVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJGVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhnW1wiZGVmYXVsdFwiXSxcImdcIiksbnVsbCE9PXRoaXMucGFyYW1zLmNsYXNzTmFtZSYmdGhpcy4kZWwuY2xhc3NMaXN0LmFkZChcImxheWVyXCIsdGhpcy5wYXJhbXMuY2xhc3NOYW1lKSx0aGlzLiRib3VuZGluZ0JveD1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZ1tcImRlZmF1bHRcIl0sXCJzdmdcIiksdGhpcy4kYm91bmRpbmdCb3guY2xhc3NMaXN0LmFkZChcImJvdW5kaW5nLWJveFwiKSx0aGlzLiRvZmZzZXQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGdbXCJkZWZhdWx0XCJdLFwiZ1wiKSx0aGlzLiRvZmZzZXQuY2xhc3NMaXN0LmFkZChcIm9mZnNldFwiLFwiaXRlbXNcIiksdGhpcy4kYmFja2dyb3VuZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZ1tcImRlZmF1bHRcIl0sXCJyZWN0XCIpLHRoaXMuJGJhY2tncm91bmQuc2V0QXR0cmlidXRlTlMobnVsbCxcImhlaWdodFwiLFwiMTAwJVwiKSx0aGlzLiRiYWNrZ3JvdW5kLnNldEF0dHJpYnV0ZU5TKG51bGwsXCJ3aWR0aFwiLFwiMTAwJVwiKSx0aGlzLiRiYWNrZ3JvdW5kLmNsYXNzTGlzdC5hZGQoXCJiYWNrZ3JvdW5kXCIpLHRoaXMuJGJhY2tncm91bmQuc3R5bGUuZmlsbE9wYWNpdHk9MCx0aGlzLiRiYWNrZ3JvdW5kLnN0eWxlLnBvaW50ZXJFdmVudHM9XCJub25lXCIsdGhpcy4kaW50ZXJhY3Rpb25zPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhnW1wiZGVmYXVsdFwiXSxcImdcIiksdGhpcy4kaW50ZXJhY3Rpb25zLmNsYXNzTGlzdC5hZGQoXCJpbnRlcmFjdGlvbnNcIiksdGhpcy4kaW50ZXJhY3Rpb25zLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsdGhpcy5jb250ZXh0U2hhcGU9bmV3IHlbXCJkZWZhdWx0XCJdLHRoaXMuY29udGV4dFNoYXBlLmluc3RhbGwoe29wYWNpdHk6ZnVuY3Rpb24oKXtyZXR1cm4uMX0sY29sb3I6ZnVuY3Rpb24oKXtyZXR1cm5cIiM3ODc4NzhcIn0sd2lkdGg6ZnVuY3Rpb24oKXtyZXR1cm4gZS50aW1lQ29udGV4dC5kdXJhdGlvbn0saGVpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuX3JlbmRlcmluZ0NvbnRleHQudmFsdWVUb1BpeGVsLmRvbWFpbigpWzFdfSx5OmZ1bmN0aW9uKCl7cmV0dXJuIGUuX3JlbmRlcmluZ0NvbnRleHQudmFsdWVUb1BpeGVsLmRvbWFpbigpWzBdfX0pLHRoaXMuJGludGVyYWN0aW9ucy5hcHBlbmRDaGlsZCh0aGlzLmNvbnRleHRTaGFwZS5yZW5kZXIoKSksdGhpcy4kZWwuYXBwZW5kQ2hpbGQodGhpcy4kYm91bmRpbmdCb3gpLHRoaXMuJGJvdW5kaW5nQm94LmFwcGVuZENoaWxkKHRoaXMuJG9mZnNldCksdGhpcy4kb2Zmc2V0LmFwcGVuZENoaWxkKHRoaXMuJGJhY2tncm91bmQpLHRoaXMuJGJvdW5kaW5nQm94LmFwcGVuZENoaWxkKHRoaXMuJGludGVyYWN0aW9ucyl9fSx7a2V5OlwiY29uZmlndXJlU2hhcGVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV0/e306YXJndW1lbnRzWzFdLHI9YXJndW1lbnRzLmxlbmd0aDw9Mnx8dm9pZCAwPT09YXJndW1lbnRzWzJdP3t9OmFyZ3VtZW50c1syXTt0aGlzLl9zaGFwZUNvbmZpZ3VyYXRpb249e2N0b3I6ZSxhY2Nlc3NvcnM6dCxvcHRpb25zOnJ9fX0se2tleTpcImNvbmZpZ3VyZUNvbW1vblNoYXBlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aDw9MXx8dm9pZCAwPT09YXJndW1lbnRzWzFdP3t9OmFyZ3VtZW50c1sxXSxyPWFyZ3VtZW50cy5sZW5ndGg8PTJ8fHZvaWQgMD09PWFyZ3VtZW50c1syXT97fTphcmd1bWVudHNbMl07dGhpcy5fY29tbW9uU2hhcGVDb25maWd1cmF0aW9uPXtjdG9yOmUsYWNjZXNzb3JzOnQsb3B0aW9uczpyfX19LHtrZXk6XCJzZXRCZWhhdmlvclwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UuaW5pdGlhbGl6ZSh0aGlzKSx0aGlzLl9iZWhhdmlvcj1lfX0se2tleTpcIl91cGRhdGVSZW5kZXJpbmdDb250ZXh0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9yZW5kZXJpbmdDb250ZXh0LnRpbWVUb1BpeGVsPXRoaXMudGltZUNvbnRleHQudGltZVRvUGl4ZWwsdGhpcy5fcmVuZGVyaW5nQ29udGV4dC52YWx1ZVRvUGl4ZWw9dGhpcy5fdmFsdWVUb1BpeGVsLHRoaXMuX3JlbmRlcmluZ0NvbnRleHQuaGVpZ2h0PXRoaXMucGFyYW1zLmhlaWdodCx0aGlzLl9yZW5kZXJpbmdDb250ZXh0LndpZHRoPXRoaXMudGltZUNvbnRleHQudGltZVRvUGl4ZWwodGhpcy50aW1lQ29udGV4dC5kdXJhdGlvbiksdGhpcy5fcmVuZGVyaW5nQ29udGV4dC5vZmZzZXRYPXRoaXMudGltZUNvbnRleHQudGltZVRvUGl4ZWwodGhpcy50aW1lQ29udGV4dC5vZmZzZXQpLHRoaXMuX3JlbmRlcmluZ0NvbnRleHQudHJhY2tPZmZzZXRYPXRoaXMudGltZUNvbnRleHQucGFyZW50LnRpbWVUb1BpeGVsKHRoaXMudGltZUNvbnRleHQucGFyZW50Lm9mZnNldCksdGhpcy5fcmVuZGVyaW5nQ29udGV4dC52aXNpYmxlV2lkdGg9dGhpcy50aW1lQ29udGV4dC5wYXJlbnQudmlzaWJsZVdpZHRofX0se2tleTpcInNlbGVjdFwiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShlKSxyPTA7ZT5yO3IrKyl0W3JdPWFyZ3VtZW50c1tyXTtpZih0aGlzLl9iZWhhdmlvcil7dC5sZW5ndGh8fCh0PXRoaXMuXyRpdGVtRGF0YU1hcC5rZXlzKCkpLEFycmF5LmlzQXJyYXkodFswXSkmJih0PXRbMF0pO3ZhciBuPSEwLGk9ITEscz12b2lkIDA7dHJ5e2Zvcih2YXIgYSxvPWModCk7IShuPShhPW8ubmV4dCgpKS5kb25lKTtuPSEwKXt2YXIgbD1hLnZhbHVlLHU9dGhpcy5fJGl0ZW1EYXRhTWFwLmdldChsKTt0aGlzLl9iZWhhdmlvci5zZWxlY3QobCx1KSx0aGlzLl90b0Zyb250KGwpfX1jYXRjaChoKXtpPSEwLHM9aH1maW5hbGx5e3RyeXshbiYmb1tcInJldHVyblwiXSYmb1tcInJldHVyblwiXSgpfWZpbmFsbHl7aWYoaSl0aHJvdyBzfX19fX0se2tleTpcInVuc2VsZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PUFycmF5KGUpLHI9MDtlPnI7cisrKXRbcl09YXJndW1lbnRzW3JdO2lmKHRoaXMuX2JlaGF2aW9yKXt0Lmxlbmd0aHx8KHQ9dGhpcy5fJGl0ZW1EYXRhTWFwLmtleXMoKSksQXJyYXkuaXNBcnJheSh0WzBdKSYmKHQ9dFswXSk7dmFyIG49ITAsaT0hMSxzPXZvaWQgMDt0cnl7Zm9yKHZhciBhLG89Yyh0KTshKG49KGE9by5uZXh0KCkpLmRvbmUpO249ITApe3ZhciBsPWEudmFsdWUsdT10aGlzLl8kaXRlbURhdGFNYXAuZ2V0KGwpO3RoaXMuX2JlaGF2aW9yLnVuc2VsZWN0KGwsdSl9fWNhdGNoKGgpe2k9ITAscz1ofWZpbmFsbHl7dHJ5eyFuJiZvW1wicmV0dXJuXCJdJiZvW1wicmV0dXJuXCJdKCl9ZmluYWxseXtpZihpKXRocm93IHN9fX19fSx7a2V5OlwidG9nZ2xlU2VsZWN0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PUFycmF5KGUpLHI9MDtlPnI7cisrKXRbcl09YXJndW1lbnRzW3JdO2lmKHRoaXMuX2JlaGF2aW9yKXt0Lmxlbmd0aHx8KHQ9dGhpcy5fJGl0ZW1EYXRhTWFwLmtleXMoKSksQXJyYXkuaXNBcnJheSh0WzBdKSYmKHQ9dFswXSk7dmFyIG49ITAsaT0hMSxzPXZvaWQgMDt0cnl7Zm9yKHZhciBhLG89Yyh0KTshKG49KGE9by5uZXh0KCkpLmRvbmUpO249ITApe3ZhciBsPWEudmFsdWUsdT10aGlzLl8kaXRlbURhdGFNYXAuZ2V0KGwpO3RoaXMuX2JlaGF2aW9yLnRvZ2dsZVNlbGVjdGlvbihsLHUpfX1jYXRjaChoKXtpPSEwLHM9aH1maW5hbGx5e3RyeXshbiYmb1tcInJldHVyblwiXSYmb1tcInJldHVyblwiXSgpfWZpbmFsbHl7aWYoaSl0aHJvdyBzfX19fX0se2tleTpcImVkaXRcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZih0aGlzLl9iZWhhdmlvcil7ZT1BcnJheS5pc0FycmF5KGUpP2U6W2VdO3ZhciBpPSEwLHM9ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgbyxsPWMoZSk7IShpPShvPWwubmV4dCgpKS5kb25lKTtpPSEwKXt2YXIgdT1vLnZhbHVlLGg9dGhpcy5fJGl0ZW1TaGFwZU1hcC5nZXQodSksZj10aGlzLl8kaXRlbURhdGFNYXAuZ2V0KHUpO3RoaXMuX2JlaGF2aW9yLmVkaXQodGhpcy5fcmVuZGVyaW5nQ29udGV4dCxoLGYsdCxyLG4pLHRoaXMuZW1pdChcImVkaXRcIixoLGYpfX1jYXRjaChkKXtzPSEwLGE9ZH1maW5hbGx5e3RyeXshaSYmbFtcInJldHVyblwiXSYmbFtcInJldHVyblwiXSgpfWZpbmFsbHl7aWYocyl0aHJvdyBhfX19fX0se2tleTpcInNldENvbnRleHRFZGl0YWJsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aDw9MHx8dm9pZCAwPT09YXJndW1lbnRzWzBdPyEwOmFyZ3VtZW50c1swXSx0PWU/XCJibG9ja1wiOlwibm9uZVwiO3RoaXMuJGludGVyYWN0aW9ucy5zdHlsZS5kaXNwbGF5PXQsdGhpcy5faXNDb250ZXh0RWRpdGFibGU9ZX19LHtrZXk6XCJlZGl0Q29udGV4dFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtfLmVkaXQodGhpcyxlLHQscil9fSx7a2V5Olwic3RyZXRjaENvbnRleHRcIix2YWx1ZTpmdW5jdGlvbihlLHQscil7Xy5zdHJldGNoKHRoaXMsZSx0LHIpfX0se2tleTpcIl90b0Zyb250XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy4kb2Zmc2V0LmFwcGVuZENoaWxkKGUpfX0se2tleTpcImdldEl0ZW1Gcm9tRE9NRWxlbWVudFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXZvaWQgMDtkb3tpZihlLmNsYXNzTGlzdCYmZS5jbGFzc0xpc3QuY29udGFpbnMoXCJpdGVtXCIpKXt0PWU7YnJlYWt9ZT1lLnBhcmVudE5vZGV9d2hpbGUobnVsbCE9PWUpO3JldHVybiB0aGlzLmhhc0l0ZW0odCk/dDpudWxsfX0se2tleTpcImdldERhdHVtRnJvbUl0ZW1cIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fJGl0ZW1EYXRhTWFwLmdldChlKX19LHtrZXk6XCJnZXREYXR1bUZyb21ET01FbGVtZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5nZXRJdGVtRnJvbURPTUVsZW1lbnQoZSk7cmV0dXJuIG51bGw9PT10P251bGw6dGhpcy5nZXREYXR1bUZyb21JdGVtKHQpfX0se2tleTpcImhhc0l0ZW1cIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fJGl0ZW1EYXRhTWFwLmhhcyhlKX19LHtrZXk6XCJoYXNFbGVtZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZG97aWYoZT09PXRoaXMuJGVsKXJldHVybiEwO2U9ZS5wYXJlbnROb2RlfXdoaWxlKG51bGwhPT1lKTtyZXR1cm4hMX19LHtrZXk6XCJnZXRJdGVtc0luQXJlYVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMudGltZUNvbnRleHQudGltZVRvUGl4ZWwodGhpcy50aW1lQ29udGV4dC5zdGFydCkscj10aGlzLnRpbWVDb250ZXh0LnRpbWVUb1BpeGVsKHRoaXMudGltZUNvbnRleHQuZHVyYXRpb24pLG49dGhpcy50aW1lQ29udGV4dC50aW1lVG9QaXhlbCh0aGlzLnRpbWVDb250ZXh0Lm9mZnNldCksaT0odGhpcy5wYXJhbXMudG9wLE1hdGgubWF4KGUubGVmdCx0KSkscz1NYXRoLm1pbihlLmxlZnQrZS53aWR0aCx0K3IpO2ktPXQrbixzLT10K247dmFyIGE9dGhpcy5wYXJhbXMuaGVpZ2h0LShlLnRvcCtlLmhlaWdodCksbD10aGlzLnBhcmFtcy5oZWlnaHQtZS50b3A7YSs9dGhpcy5wYXJhbXMudG9wLGwrPXRoaXMucGFyYW1zLnRvcDt2YXIgdT1bXSxoPSEwLGY9ITEsZD12b2lkIDA7dHJ5e2Zvcih2YXIgcCxtPWModGhpcy5fJGl0ZW1EYXRhTWFwLmVudHJpZXMoKSk7IShoPShwPW0ubmV4dCgpKS5kb25lKTtoPSEwKXt2YXIgYj1vKHAudmFsdWUsMiksZz1iWzBdLHY9YlsxXSx5PXRoaXMuXyRpdGVtU2hhcGVNYXAuZ2V0KGcpLCQ9eS5pbkFyZWEodGhpcy5fcmVuZGVyaW5nQ29udGV4dCx2LGksYSxzLGwpOyQmJnUucHVzaChnKX19Y2F0Y2goeCl7Zj0hMCxkPXh9ZmluYWxseXt0cnl7IWgmJm1bXCJyZXR1cm5cIl0mJm1bXCJyZXR1cm5cIl0oKX1maW5hbGx5e2lmKGYpdGhyb3cgZH19cmV0dXJuIHV9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKG51bGwhPT10aGlzLl9jb21tb25TaGFwZUNvbmZpZ3VyYXRpb24mJjA9PT10aGlzLl8kaXRlbUNvbW1vblNoYXBlTWFwLnNpemUpe3ZhciB0PXRoaXMuX2NvbW1vblNoYXBlQ29uZmlndXJhdGlvbixyPXQuY3RvcixuPXQuYWNjZXNzb3JzLGk9dC5vcHRpb25zLHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGdbXCJkZWZhdWx0XCJdLFwiZ1wiKSxhPW5ldyByKGkpO2EuaW5zdGFsbChuKSxzLmFwcGVuZENoaWxkKGEucmVuZGVyKCkpLHMuY2xhc3NMaXN0LmFkZChcIml0ZW1cIixcImNvbW1vblwiLGEuZ2V0Q2xhc3NOYW1lKCkpLHRoaXMuXyRpdGVtQ29tbW9uU2hhcGVNYXAuc2V0KHMsYSksdGhpcy4kb2Zmc2V0LmFwcGVuZENoaWxkKHMpfXZhciBsPWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSx1PXRoaXMuXyRpdGVtRGF0YU1hcC52YWx1ZXMoKTt0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgcj0hMCxuPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIHMsYT1jKHUpOyEocj0ocz1hLm5leHQoKSkuZG9uZSk7cj0hMCl7dmFyIG89cy52YWx1ZTtpZihvPT09dClyZXR1cm59fWNhdGNoKGgpe249ITAsaT1ofWZpbmFsbHl7dHJ5eyFyJiZhW1wicmV0dXJuXCJdJiZhW1wicmV0dXJuXCJdKCl9ZmluYWxseXtpZihuKXRocm93IGl9fXZhciBmPWUuX3NoYXBlQ29uZmlndXJhdGlvbixkPWYuY3RvcixwPWYuYWNjZXNzb3JzLG09Zi5vcHRpb25zLGI9bmV3IGQobSk7Yi5pbnN0YWxsKHApO3ZhciBnPWIucmVuZGVyKGUuX3JlbmRlcmluZ0NvbnRleHQpO2cuY2xhc3NMaXN0LmFkZChcIml0ZW1cIixiLmdldENsYXNzTmFtZSgpKSxlLl8kaXRlbVNoYXBlTWFwLnNldChnLGIpLGUuXyRpdGVtRGF0YU1hcC5zZXQoZyx0KSxsLmFwcGVuZENoaWxkKGcpfSksdGhpcy4kb2Zmc2V0LmFwcGVuZENoaWxkKGwpO3ZhciBoPSEwLGY9ITEsZD12b2lkIDA7dHJ5e2Zvcih2YXIgcCxtPWModGhpcy5fJGl0ZW1EYXRhTWFwLmVudHJpZXMoKSk7IShoPShwPW0ubmV4dCgpKS5kb25lKTtoPSEwKXt2YXIgYj1vKHAudmFsdWUsMiksdj1iWzBdLHk9YlsxXTtpZigtMT09PXRoaXMuZGF0YS5pbmRleE9mKHkpKXt0aGlzLiRvZmZzZXQucmVtb3ZlQ2hpbGQodik7dmFyIGE9dGhpcy5fJGl0ZW1TaGFwZU1hcC5nZXQodik7YS5kZXN0cm95KCksdGhpcy5fYmVoYXZpb3IudW5zZWxlY3Qodix5KSx0aGlzLl8kaXRlbURhdGFNYXBbXCJkZWxldGVcIl0odiksdGhpcy5fJGl0ZW1TaGFwZU1hcFtcImRlbGV0ZVwiXSh2KX19fWNhdGNoKCQpe2Y9ITAsZD0kfWZpbmFsbHl7dHJ5eyFoJiZtW1wicmV0dXJuXCJdJiZtW1wicmV0dXJuXCJdKCl9ZmluYWxseXtpZihmKXRocm93IGR9fX19LHtrZXk6XCJ1cGRhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMudXBkYXRlQ29udGFpbmVyKCksdGhpcy51cGRhdGVTaGFwZXMoKX19LHtrZXk6XCJ1cGRhdGVDb250YWluZXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX3VwZGF0ZVJlbmRlcmluZ0NvbnRleHQoKTt2YXIgZT10aGlzLnRpbWVDb250ZXh0LHQ9ZS50aW1lVG9QaXhlbChlLmR1cmF0aW9uKSxyPWUucGFyZW50LnRpbWVUb1BpeGVsKGUuc3RhcnQpLG49ZS50aW1lVG9QaXhlbChlLm9mZnNldCksaT10aGlzLnBhcmFtcy50b3Ascz10aGlzLnBhcmFtcy5oZWlnaHQsYT1cIm1hdHJpeCgxLCAwLCAwLCAtMSwgXCIrcitcIiwgXCIrKGkrcykrXCIpXCI7dGhpcy4kZWwuc2V0QXR0cmlidXRlTlMobnVsbCxcInRyYW5zZm9ybVwiLGEpLHRoaXMuJGJvdW5kaW5nQm94LnNldEF0dHJpYnV0ZU5TKG51bGwsXCJ3aWR0aFwiLHQpLHRoaXMuJGJvdW5kaW5nQm94LnNldEF0dHJpYnV0ZU5TKG51bGwsXCJoZWlnaHRcIixzKSx0aGlzLiRib3VuZGluZ0JveC5zdHlsZS5vcGFjaXR5PXRoaXMucGFyYW1zLm9wYWNpdHksdGhpcy4kb2Zmc2V0LnNldEF0dHJpYnV0ZU5TKG51bGwsXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIituK1wiLCAwKVwiKSx0aGlzLmNvbnRleHRTaGFwZS51cGRhdGUodGhpcy5fcmVuZGVyaW5nQ29udGV4dCx0aGlzLnRpbWVDb250ZXh0LDApfX0se2tleTpcInVwZGF0ZVNoYXBlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczthcmd1bWVudHMubGVuZ3RoPD0wfHx2b2lkIDA9PT1hcmd1bWVudHNbMF0/bnVsbDphcmd1bWVudHNbMF07dGhpcy5fdXBkYXRlUmVuZGVyaW5nQ29udGV4dCgpLHRoaXMuXyRpdGVtQ29tbW9uU2hhcGVNYXAuZm9yRWFjaChmdW5jdGlvbih0LHIpe3QudXBkYXRlKGUuX3JlbmRlcmluZ0NvbnRleHQsZS5kYXRhKX0pO3ZhciB0PSEwLHI9ITEsbj12b2lkIDA7dHJ5e2Zvcih2YXIgaSxzPWModGhpcy5fJGl0ZW1EYXRhTWFwLmVudHJpZXMoKSk7ISh0PShpPXMubmV4dCgpKS5kb25lKTt0PSEwKXt2YXIgYT1vKGkudmFsdWUsMiksbD1hWzBdLHU9YVsxXSxoPXRoaXMuXyRpdGVtU2hhcGVNYXAuZ2V0KGwpO2gudXBkYXRlKHRoaXMuX3JlbmRlcmluZ0NvbnRleHQsdSl9fWNhdGNoKGYpe3I9ITAsbj1mfWZpbmFsbHl7dHJ5eyF0JiZzW1wicmV0dXJuXCJdJiZzW1wicmV0dXJuXCJdKCl9ZmluYWxseXtpZihyKXRocm93IG59fX19LHtrZXk6XCJzdGFydFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRpbWVDb250ZXh0LnN0YXJ0fSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy50aW1lQ29udGV4dC5zdGFydD1lfX0se2tleTpcIm9mZnNldFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRpbWVDb250ZXh0Lm9mZnNldH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMudGltZUNvbnRleHQub2Zmc2V0PWV9fSx7a2V5OlwiZHVyYXRpb25cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aW1lQ29udGV4dC5kdXJhdGlvbn0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMudGltZUNvbnRleHQuZHVyYXRpb249ZX19LHtrZXk6XCJzdHJldGNoUmF0aW9cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aW1lQ29udGV4dC5zdHJldGNoUmF0aW99LHNldDpmdW5jdGlvbihlKXt0aGlzLnRpbWVDb250ZXh0LnN0cmV0Y2hSYXRpbz1lfX0se2tleTpcInlEb21haW5cIixzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5wYXJhbXMueURvbWFpbj1lLHRoaXMuX3ZhbHVlVG9QaXhlbC5kb21haW4oZSl9LGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmFtcy55RG9tYWlufX0se2tleTpcIm9wYWNpdHlcIixzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5wYXJhbXMub3BhY2l0eT1lfSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJhbXMub3BhY2l0eX19LHtrZXk6XCJpdGVtc1wiLGdldDpmdW5jdGlvbigpe3ZhciBlPVtdLHQ9ITAscj0hMSxuPXZvaWQgMDt0cnl7Zm9yKHZhciBpLHM9Yyh0aGlzLl8kaXRlbURhdGFNYXAua2V5cygpKTshKHQ9KGk9cy5uZXh0KCkpLmRvbmUpO3Q9ITApe3ZhciBhPWkudmFsdWU7ZS5wdXNoKGEpfX1jYXRjaChvKXtyPSEwLG49b31maW5hbGx5e3RyeXshdCYmc1tcInJldHVyblwiXSYmc1tcInJldHVyblwiXSgpfWZpbmFsbHl7aWYocil0aHJvdyBufX1yZXR1cm4gZX19LHtrZXk6XCJkYXRhXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGF9LHNldDpmdW5jdGlvbihlKXtzd2l0Y2godGhpcy5kYXRhVHlwZSl7Y2FzZVwiZW50aXR5XCI6dGhpcy5fZGF0YT90aGlzLl9kYXRhWzBdPWU6dGhpcy5fZGF0YT1bZV07YnJlYWs7Y2FzZVwiY29sbGVjdGlvblwiOnRoaXMuX2RhdGE9ZX19fSx7a2V5Olwic2VsZWN0ZWRJdGVtc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9iZWhhdmlvcj90aGlzLl9iZWhhdmlvci5zZWxlY3RlZEl0ZW1zOltdfX1dLFt7a2V5OlwiY29uZmlndXJlVGltZUNvbnRleHRCZWhhdmlvclwiLHZhbHVlOmZ1bmN0aW9uKGUpe3c9ZX19XSksdH0obVtcImRlZmF1bHRcIl0uRXZlbnRFbWl0dGVyKTtyW1wiZGVmYXVsdFwiXT1rLHQuZXhwb3J0cz1yW1wiZGVmYXVsdFwiXX0se1wiLi4vYmVoYXZpb3JzL3RpbWUtY29udGV4dC1iZWhhdmlvclwiOjU3LFwiLi4vc2hhcGVzL3NlZ21lbnRcIjo3MixcIi4uL3V0aWxzL3NjYWxlc1wiOjc0LFwiLi9uYW1lc3BhY2VcIjo2MCxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3JcIjo3NixcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9tYXBcIjo3OCxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduXCI6NzksXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiOjg5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiOjkwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiOjkxLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6OTIsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIjo5MyxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9zbGljZWQtdG8tYXJyYXlcIjo5NCxldmVudHM6MTU5fV0sNjA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyW1wiZGVmYXVsdFwiXT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsdC5leHBvcnRzPXJbXCJkZWZhdWx0XCJdfSx7fV0sNjE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIilbXCJkZWZhdWx0XCJdLHM9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdFwiKVtcImRlZmF1bHRcIl07T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9ZShcIi4uL3V0aWxzL3NjYWxlc1wiKSxvPXMoYSksbD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxyKXtpKHRoaXMsZSksdGhpcy5fY2hpbGRyZW49W10sdGhpcy5fdGltZVRvUGl4ZWw9bnVsbCx0aGlzLl9vZmZzZXQ9MCx0aGlzLl96b29tPTEsdGhpcy5fY29tcHV0ZWRQaXhlbHNQZXJTZWNvbmQ9dCx0aGlzLl92aXNpYmxlV2lkdGg9cix0aGlzLl92aXNpYmxlRHVyYXRpb249dGhpcy52aXNpYmxlV2lkdGgvdGhpcy5fY29tcHV0ZWRQaXhlbHNQZXJTZWNvbmQsdGhpcy5fbWFpbnRhaW5WaXNpYmxlRHVyYXRpb249ITE7dmFyIG49b1tcImRlZmF1bHRcIl0ubGluZWFyKCkuZG9tYWluKFswLDFdKS5yYW5nZShbMCx0XSk7dGhpcy50aW1lVG9QaXhlbD1uLHRoaXMuX29yaWdpbmFsUGl4ZWxzUGVyU2Vjb25kPXRoaXMuX2NvbXB1dGVkUGl4ZWxzUGVyU2Vjb25kfXJldHVybiBuKGUsW3trZXk6XCJfdXBkYXRlVGltZVRvUGl4ZWxSYW5nZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fdmlzaWJsZUR1cmF0aW9uPXRoaXMudmlzaWJsZVdpZHRoL3RoaXMuX2NvbXB1dGVkUGl4ZWxzUGVyU2Vjb25kLHRoaXMudGltZVRvUGl4ZWwucmFuZ2UoWzAsdGhpcy5fY29tcHV0ZWRQaXhlbHNQZXJTZWNvbmRdKX19LHtrZXk6XCJwaXhlbHNQZXJTZWNvbmRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb3JpZ2luYWxQaXhlbHNQZXJTZWNvbmR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9jb21wdXRlZFBpeGVsc1BlclNlY29uZD1lKnRoaXMuem9vbSx0aGlzLl9vcmlnaW5hbFBpeGVsc1BlclNlY29uZD1lLHRoaXMuX3VwZGF0ZVRpbWVUb1BpeGVsUmFuZ2UoKSx0aGlzLl9jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuX3RpbWVUb1BpeGVsJiYoZS5zdHJldGNoUmF0aW89ZS5zdHJldGNoUmF0aW8pfSl9fSx7a2V5OlwiY29tcHV0ZWRQaXhlbHNQZXJTZWNvbmRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29tcHV0ZWRQaXhlbHNQZXJTZWNvbmR9fSx7a2V5Olwib2Zmc2V0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29mZnNldH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX29mZnNldD1lfX0se2tleTpcInpvb21cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fem9vbX0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUvdGhpcy5fem9vbTt0aGlzLl96b29tPWUsdGhpcy5fY29tcHV0ZWRQaXhlbHNQZXJTZWNvbmQ9dGhpcy5fb3JpZ2luYWxQaXhlbHNQZXJTZWNvbmQqZSx0aGlzLl91cGRhdGVUaW1lVG9QaXhlbFJhbmdlKCksdGhpcy5fY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihlKXtlLl90aW1lVG9QaXhlbCYmKGUuc3RyZXRjaFJhdGlvPWUuc3RyZXRjaFJhdGlvKnQpfSl9fSx7a2V5OlwidmlzaWJsZVdpZHRoXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Zpc2libGVXaWR0aH0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUvdGhpcy52aXNpYmxlV2lkdGg7dGhpcy5fdmlzaWJsZVdpZHRoPWUsdGhpcy5fdmlzaWJsZUR1cmF0aW9uPXRoaXMudmlzaWJsZVdpZHRoL3RoaXMuX2NvbXB1dGVkUGl4ZWxzUGVyU2Vjb25kLHRoaXMubWFpbnRhaW5WaXNpYmxlRHVyYXRpb24mJih0aGlzLnBpeGVsc1BlclNlY29uZD10aGlzLl9jb21wdXRlZFBpeGVsc1BlclNlY29uZCp0KX19LHtrZXk6XCJ2aXNpYmxlRHVyYXRpb25cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdmlzaWJsZUR1cmF0aW9ufX0se2tleTpcIm1haW50YWluVmlzaWJsZUR1cmF0aW9uXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21haW50YWluVmlzaWJsZUR1cmF0aW9ufSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fbWFpbnRhaW5WaXNpYmxlRHVyYXRpb249ZX19LHtrZXk6XCJ0aW1lVG9QaXhlbFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90aW1lVG9QaXhlbH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3RpbWVUb1BpeGVsPWV9fV0pLGV9KCk7cltcImRlZmF1bHRcIl09bCx0LmV4cG9ydHM9cltcImRlZmF1bHRcIl19LHtcIi4uL3V0aWxzL3NjYWxlc1wiOjc0LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIjo4OSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIjo5MCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdFwiOjkzfV0sNjI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCIpW1wiZGVmYXVsdFwiXSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKVtcImRlZmF1bHRcIl0sbD1lKFwiYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvclwiKVtcImRlZmF1bHRcIl0sdT1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2dldC1pdGVyYXRvclwiKVtcImRlZmF1bHRcIl0sYz1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaD1lKFwiZXZlbnRzXCIpLGY9YyhoKSxkPWUoXCIuLi9pbnRlcmFjdGlvbnMva2V5Ym9hcmRcIikscD1jKGQpLG09ZShcIi4vbGF5ZXItdGltZS1jb250ZXh0XCIpLGI9YyhtKSxnPWUoXCIuLi9pbnRlcmFjdGlvbnMvc3VyZmFjZVwiKSx2PWMoZykseT1lKFwiLi90aW1lbGluZS10aW1lLWNvbnRleHRcIiksJD1jKHkpLHg9ZShcIi4vdHJhY2tcIiksXz1jKHgpLHc9ZShcIi4vdHJhY2stY29sbGVjdGlvblwiKSxrPWModyksaj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aDw9MHx8dm9pZCAwPT09YXJndW1lbnRzWzBdPzEwMDphcmd1bWVudHNbMF0scj1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV0/MWUzOmFyZ3VtZW50c1sxXSxpPWFyZ3VtZW50cy5sZW5ndGg8PTJ8fHZvaWQgMD09PWFyZ3VtZW50c1syXT97fTphcmd1bWVudHNbMl0scz1pLnJlZ2lzdGVyS2V5Ym9hcmQsbz12b2lkIDA9PT1zPyEwOnM7YSh0aGlzLHQpLG4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImNvbnN0cnVjdG9yXCIsdGhpcykuY2FsbCh0aGlzKSx0aGlzLl90cmFja3M9bmV3IGtbXCJkZWZhdWx0XCJdKHRoaXMpLHRoaXMuX3N0YXRlPW51bGwsdGhpcy5fc3VyZmFjZUN0b3I9dltcImRlZmF1bHRcIl0sbyYmdGhpcy5jcmVhdGVJbnRlcmFjdGlvbihwW1wiZGVmYXVsdFwiXSxkb2N1bWVudCksdGhpcy5fdHJhY2tCeUlkPXt9LHRoaXMuX2dyb3VwZWRMYXllcnM9e30sdGhpcy50aW1lQ29udGV4dD1uZXcgJFtcImRlZmF1bHRcIl0oZSxyKX1yZXR1cm4gaSh0LGUpLHModCxbe2tleTpcImNvbmZpZ3VyZVN1cmZhY2VcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9zdXJmYWNlQ3Rvcj1lfX0se2tleTpcImNyZWF0ZUludGVyYWN0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49YXJndW1lbnRzLmxlbmd0aDw9Mnx8dm9pZCAwPT09YXJndW1lbnRzWzJdP3t9OmFyZ3VtZW50c1syXSxpPW5ldyBlKHQsbik7aS5vbihcImV2ZW50XCIsZnVuY3Rpb24oZSl7cmV0dXJuIHIuX2hhbmRsZUV2ZW50KGUpfSl9fSx7a2V5OlwiX2hhbmRsZUV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5lbWl0KFwiZXZlbnRcIixlKSx0aGlzLl9zdGF0ZSYmdGhpcy5fc3RhdGUuaGFuZGxlRXZlbnQoZSl9fSx7a2V5OlwiYWRkXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoLTEhPT10aGlzLnRyYWNrcy5pbmRleE9mKGUpKXRocm93IG5ldyBFcnJvcihcInRyYWNrIGFscmVhZHkgYWRkZWQgdG8gdGhlIHRpbWVsaW5lXCIpO2UuY29uZmlndXJlKHRoaXMudGltZUNvbnRleHQpLHRoaXMudHJhY2tzLnB1c2goZSksdGhpcy5jcmVhdGVJbnRlcmFjdGlvbih0aGlzLl9zdXJmYWNlQ3RvcixlLiRlbCl9fSx7a2V5OlwicmVtb3ZlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7fX0se2tleTpcImNyZWF0ZVRyYWNrXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aDw9MXx8dm9pZCAwPT09YXJndW1lbnRzWzFdPzEwMDphcmd1bWVudHNbMV0scj1hcmd1bWVudHMubGVuZ3RoPD0yfHx2b2lkIDA9PT1hcmd1bWVudHNbMl0/bnVsbDphcmd1bWVudHNbMl0sbj1uZXcgX1tcImRlZmF1bHRcIl0oZSx0KTtpZihudWxsIT09cil7aWYodm9pZCAwIT09dGhpcy5fdHJhY2tCeUlkW3JdKXRocm93IG5ldyBFcnJvcigndHJhY2tJZDogXCInK3IrJ1wiIGlzIGFscmVhZHkgdXNlZCcpO3RoaXMuX3RyYWNrQnlJZFtyXT1ufXJldHVybiB0aGlzLmFkZChuKSxuLnJlbmRlcigpLG4udXBkYXRlKCksbn19LHtrZXk6XCJhZGRMYXllclwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDw9Mnx8dm9pZCAwPT09YXJndW1lbnRzWzJdP1wiZGVmYXVsdFwiOmFyZ3VtZW50c1syXSxuPWFyZ3VtZW50cy5sZW5ndGg8PTN8fHZvaWQgMD09PWFyZ3VtZW50c1szXT8hMTphcmd1bWVudHNbM10saT10O2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYoaT10aGlzLmdldFRyYWNrQnlJZCh0KSksIWUudGltZUNvbnRleHQpe3ZhciBzPW4/dGhpcy50aW1lQ29udGV4dDpuZXcgYltcImRlZmF1bHRcIl0odGhpcy50aW1lQ29udGV4dCk7ZS5zZXRUaW1lQ29udGV4dChzKX1pLmFkZChlKSx0aGlzLl9ncm91cGVkTGF5ZXJzW3JdfHwodGhpcy5fZ3JvdXBlZExheWVyc1tyXT1bXSksdGhpcy5fZ3JvdXBlZExheWVyc1tyXS5wdXNoKGUpLGUucmVuZGVyKCksZS51cGRhdGUoKX19LHtrZXk6XCJyZW1vdmVMYXllclwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMudHJhY2tzLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIHI9dC5sYXllcnMuaW5kZXhPZihlKTstMSE9PXImJnQucmVtb3ZlKGUpfSk7Zm9yKHZhciB0IGluIHRoaXMuX2dyb3VwZWRMYXllcnMpe3ZhciByPXRoaXMuX2dyb3VwZWRMYXllcnNbdF0sbj1yLmluZGV4T2YoZSk7LTEhPT1uJiZyLnNwbGljZShlLDEpLHIubGVuZ3RofHxkZWxldGUgdGhpcy5fZ3JvdXBlZExheWVyc1t0XX19fSx7a2V5OlwiZ2V0VHJhY2tCeUlkXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX3RyYWNrQnlJZFtlXX19LHtrZXk6XCJnZXRUcmFja0Zyb21ET01FbGVtZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9bnVsbCxyPW51bGw7ZG8gZS5jbGFzc0xpc3QuY29udGFpbnMoXCJ0cmFja1wiKSYmKHQ9ZSksZT1lLnBhcmVudE5vZGU7d2hpbGUobnVsbD09PXQpO3JldHVybiB0aGlzLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuJHN2Zz09PXQmJihyPWUpfSkscn19LHtrZXk6XCJnZXRMYXllcnNCeUdyb3VwXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2dyb3VwZWRMYXllcnNbZV19fSx7a2V5Om8sdmFsdWU6bC5tYXJrKGZ1bmN0aW9uIHIoKXtyZXR1cm4gbC53cmFwKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnJldHVybiBlLmRlbGVnYXRlWWllbGQodSh0aGlzLnRyYWNrcyksXCJ0MFwiLDEpO2Nhc2UgMTpjYXNlXCJlbmRcIjpyZXR1cm4gZS5zdG9wKCl9fSxyLHRoaXMpfSl9LHtrZXk6XCJvZmZzZXRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aW1lQ29udGV4dC5vZmZzZXR9LHNldDpmdW5jdGlvbihlKXt0aGlzLnRpbWVDb250ZXh0Lm9mZnNldD1lfX0se2tleTpcInpvb21cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aW1lQ29udGV4dC56b29tfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy50aW1lQ29udGV4dC56b29tPWV9fSx7a2V5OlwicGl4ZWxzUGVyU2Vjb25kXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGltZUNvbnRleHQucGl4ZWxzUGVyU2Vjb25kfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy50aW1lQ29udGV4dC5waXhlbHNQZXJTZWNvbmQ9ZX19LHtrZXk6XCJ2aXNpYmxlV2lkdGhcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aW1lQ29udGV4dC52aXNpYmxlV2lkdGh9LHNldDpmdW5jdGlvbihlKXt0aGlzLnRpbWVDb250ZXh0LnZpc2libGVXaWR0aD1lfX0se2tleTpcInRpbWVUb1BpeGVsXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGltZUNvbnRleHQudGltZVRvUGl4ZWx9fSx7a2V5OlwidmlzaWJsZUR1cmF0aW9uXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGltZUNvbnRleHQudmlzaWJsZUR1cmF0aW9ufX0se2tleTpcIm1haW50YWluVmlzaWJsZUR1cmF0aW9uXCIsc2V0OmZ1bmN0aW9uKGUpe3RoaXMudGltZUNvbnRleHQubWFpbnRhaW5WaXNpYmxlRHVyYXRpb249ZX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGltZUNvbnRleHQubWFpbnRhaW5WaXNpYmxlRHVyYXRpb259fSx7a2V5OlwiZ3JvdXBlZExheWVyc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9ncm91cGVkTGF5ZXJzfX0se2tleTpcInN0YXRlXCIsc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3N0YXRlJiZ0aGlzLl9zdGF0ZS5leGl0KCksdGhpcy5fc3RhdGU9ZSx0aGlzLl9zdGF0ZSYmdGhpcy5fc3RhdGUuZW50ZXIoKX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0YXRlfX0se2tleTpcInRyYWNrc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90cmFja3N9fSx7a2V5OlwibGF5ZXJzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RyYWNrcy5sYXllcnN9fV0pLHR9KGZbXCJkZWZhdWx0XCJdLkV2ZW50RW1pdHRlcik7cltcImRlZmF1bHRcIl09aix0LmV4cG9ydHM9cltcImRlZmF1bHRcIl19LHtcIi4uL2ludGVyYWN0aW9ucy9rZXlib2FyZFwiOjY2LFwiLi4vaW50ZXJhY3Rpb25zL3N1cmZhY2VcIjo2NyxcIi4vbGF5ZXItdGltZS1jb250ZXh0XCI6NTgsXCIuL3RpbWVsaW5lLXRpbWUtY29udGV4dFwiOjYxLFwiLi90cmFja1wiOjY0LFwiLi90cmFjay1jb2xsZWN0aW9uXCI6NjMsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvZ2V0LWl0ZXJhdG9yXCI6NzYsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCI6ODgsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiOjg5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiOjkwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiOjkxLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6OTIsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIjo5MyxcImJhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3JcIjoxNTYsZXZlbnRzOjE1OX1dLDYzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXRcIilbXCJkZWZhdWx0XCJdLGk9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKVtcImRlZmF1bHRcIl0scz1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiKVtcImRlZmF1bHRcIl0sYT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIilbXCJkZWZhdWx0XCJdLG89ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdFwiKVtcImRlZmF1bHRcIl07T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGw9ZShcIi4vbGF5ZXJcIiksdT1vKGwpLGM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXthKHRoaXMsdCksbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiY29uc3RydWN0b3JcIix0aGlzKS5jYWxsKHRoaXMpLHRoaXMuX3RpbWVsaW5lPWV9cmV0dXJuIGkodCxlKSxzKHQsW3trZXk6XCJfZ2V0TGF5ZXJzT3JHcm91cHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg8PTB8fHZvaWQgMD09PWFyZ3VtZW50c1swXT9udWxsOmFyZ3VtZW50c1swXSx0PW51bGw7cmV0dXJuIHQ9XCJzdHJpbmdcIj09dHlwZW9mIGU/dGhpcy5fdGltZWxpbmUuZ3JvdXBlZExheWVyc1tlXTplIGluc3RhbmNlb2YgdVtcImRlZmF1bHRcIl0/W2VdOnRoaXMubGF5ZXJzfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJlbmRlcigpfSksdGhpcy5fdGltZWxpbmUuZW1pdChcInJlbmRlclwiKX19LHtrZXk6XCJ1cGRhdGVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9nZXRMYXllcnNPckdyb3VwcyhlKTt0aGlzLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUudXBkYXRlKHQpfSksdGhpcy5fdGltZWxpbmUuZW1pdChcInVwZGF0ZVwiLHQpfX0se2tleTpcInVwZGF0ZUNvbnRhaW5lclwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZS51cGRhdGVDb250YWluZXIoKX0pLHRoaXMuX3RpbWVsaW5lLmVtaXQoXCJ1cGRhdGU6Y29udGFpbmVyc1wiKX19LHtrZXk6XCJ1cGRhdGVMYXllcnNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9nZXRMYXllcnNPckdyb3VwcyhlKTt0aGlzLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUudXBkYXRlTGF5ZXJzKHQpfSksdGhpcy5fdGltZWxpbmUuZW1pdChcInVwZGF0ZTpsYXllcnNcIix0KX19LHtrZXk6XCJoZWlnaHRcIixzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmhlaWdodD1lfSl9fSx7a2V5OlwibGF5ZXJzXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9W107cmV0dXJuIHRoaXMuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZT1lLmNvbmNhdCh0LmxheWVycyl9KSxlfX1dKSx0fShBcnJheSk7cltcImRlZmF1bHRcIl09Yyx0LmV4cG9ydHM9cltcImRlZmF1bHRcIl19LHtcIi4vbGF5ZXJcIjo1OSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6ODksXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6OTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCI6OTEsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjo5MixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdFwiOjkzfV0sNjQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIilbXCJkZWZhdWx0XCJdLHM9ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3JcIilbXCJkZWZhdWx0XCJdLGE9ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIilbXCJkZWZhdWx0XCJdLG89ZShcImJhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3JcIilbXCJkZWZhdWx0XCJdLGw9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdFwiKVtcImRlZmF1bHRcIl07T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHU9ZShcIi4vbmFtZXNwYWNlXCIpLGM9bCh1KSxoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV0/MTAwOmFyZ3VtZW50c1sxXTtpKHRoaXMsZSksdGhpcy4kZWw9dCx0aGlzLmxheWVycz1bXSx0aGlzLl9oZWlnaHQ9cix0aGlzLnJlbmRlcmluZ0NvbnRleHQ9bnVsbCx0aGlzLl9jcmVhdGVDb250YWluZXIoKX1yZXR1cm4gbihlLFt7a2V5OlwiY29uZmlndXJlXCIsXG52YWx1ZTpmdW5jdGlvbihlKXt0aGlzLnJlbmRlcmluZ0NvbnRleHQ9ZX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuJGVsLnJlbW92ZUNoaWxkKHRoaXMuJHN2ZyksdGhpcy5sYXllcnMuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZS4kbGF5b3V0LnJlbW92ZUNoaWxkKHQuJGVsKX0pLHRoaXMuJGVsPW51bGwsdGhpcy5yZW5kZXJpbmdDb250ZXh0PW51bGwsdGhpcy5sYXllcnMubGVuZ3RoPTB9fSx7a2V5OlwiX2NyZWF0ZUNvbnRhaW5lclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGNbXCJkZWZhdWx0XCJdLFwic3ZnXCIpO2Uuc2V0QXR0cmlidXRlTlMobnVsbCxcInNoYXBlLXJlbmRlcmluZ1wiLFwib3B0aW1pemVTcGVlZFwiKSxlLnNldEF0dHJpYnV0ZU5TKG51bGwsXCJoZWlnaHRcIix0aGlzLmhlaWdodCksZS5zZXRBdHRyaWJ1dGUoXCJ4bWxuczp4aHRtbFwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKSxlLmNsYXNzTGlzdC5hZGQoXCJ0cmFja1wiKTt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoY1tcImRlZmF1bHRcIl0sXCJyZWN0XCIpO3Quc2V0QXR0cmlidXRlTlMobnVsbCxcImhlaWdodFwiLFwiMTAwJVwiKSx0LnNldEF0dHJpYnV0ZU5TKG51bGwsXCJ3aWR0aFwiLFwiMTAwJVwiKSx0LnNldEF0dHJpYnV0ZU5TKG51bGwsXCJzdHlsZVwiLFwiZmlsbC1vcGFjaXR5OjBcIik7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGNbXCJkZWZhdWx0XCJdLFwiZGVmc1wiKSxuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhjW1wiZGVmYXVsdFwiXSxcImdcIik7bi5jbGFzc0xpc3QuYWRkKFwib2Zmc2V0XCIpO3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhjW1wiZGVmYXVsdFwiXSxcImdcIik7aS5jbGFzc0xpc3QuYWRkKFwibGF5b3V0XCIpO3ZhciBzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhjW1wiZGVmYXVsdFwiXSxcImdcIik7cy5jbGFzc0xpc3QuYWRkKFwiaW50ZXJhY3Rpb25zXCIpLGUuYXBwZW5kQ2hpbGQociksZS5hcHBlbmRDaGlsZCh0KSxuLmFwcGVuZENoaWxkKGkpLGUuYXBwZW5kQ2hpbGQobiksZS5hcHBlbmRDaGlsZChzKSx0aGlzLiRlbC5hcHBlbmRDaGlsZChlKSx0aGlzLiRlbC5zdHlsZS5mb250U2l6ZT0wLHRoaXMuJGVsLnN0eWxlLnRyYW5zZm9ybT1cInRyYW5zbGF0ZVooMClcIix0aGlzLiRsYXlvdXQ9aSx0aGlzLiRvZmZzZXQ9bix0aGlzLiRpbnRlcmFjdGlvbnM9cyx0aGlzLiRzdmc9ZSx0aGlzLiRiYWNrZ3JvdW5kPXR9fSx7a2V5OlwiYWRkXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5sYXllcnMucHVzaChlKSx0aGlzLiRsYXlvdXQuYXBwZW5kQ2hpbGQoZS4kZWwpfX0se2tleTpcInJlbW92ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMubGF5ZXJzLnNwbGljZSh0aGlzLmxheWVycy5pbmRleE9mKGUpLDEpLHRoaXMuJGxheW91dC5yZW1vdmVDaGlsZChlLiRlbCl9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0hMCx0PSExLHI9dm9pZCAwO3RyeXtmb3IodmFyIG4saT1zKHRoaXMpOyEoZT0obj1pLm5leHQoKSkuZG9uZSk7ZT0hMCl7dmFyIGE9bi52YWx1ZTthLnJlbmRlcigpfX1jYXRjaChvKXt0PSEwLHI9b31maW5hbGx5e3RyeXshZSYmaVtcInJldHVyblwiXSYmaVtcInJldHVyblwiXSgpfWZpbmFsbHl7aWYodCl0aHJvdyByfX19fSx7a2V5OlwidXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPD0wfHx2b2lkIDA9PT1hcmd1bWVudHNbMF0/bnVsbDphcmd1bWVudHNbMF07dGhpcy51cGRhdGVDb250YWluZXIoKSx0aGlzLnVwZGF0ZUxheWVycyhlKX19LHtrZXk6XCJ1cGRhdGVDb250YWluZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuJHN2Zyx0PXRoaXMuJG9mZnNldCxyPXRoaXMucmVuZGVyaW5nQ29udGV4dCxuPXRoaXMuaGVpZ2h0LGk9ci52aXNpYmxlV2lkdGgscz1yLnRpbWVUb1BpeGVsKHIub2Zmc2V0KSxhPVwidHJhbnNsYXRlKFwiK3MrXCIsIDApXCI7ZS5zZXRBdHRyaWJ1dGVOUyhudWxsLFwiaGVpZ2h0XCIsbiksZS5zZXRBdHRyaWJ1dGVOUyhudWxsLFwid2lkdGhcIixpKSxlLnNldEF0dHJpYnV0ZU5TKG51bGwsXCJ2aWV3Ym94XCIsXCIwIDAgXCIraStcIiBcIituKSx0LnNldEF0dHJpYnV0ZU5TKG51bGwsXCJ0cmFuc2Zvcm1cIixhKX19LHtrZXk6XCJ1cGRhdGVMYXllcnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPD0wfHx2b2lkIDA9PT1hcmd1bWVudHNbMF0/bnVsbDphcmd1bWVudHNbMF07dD1udWxsPT09dD90aGlzLmxheWVyczp0LHQuZm9yRWFjaChmdW5jdGlvbih0KXstMSE9PWUubGF5ZXJzLmluZGV4T2YodCkmJnQudXBkYXRlKCl9KX19LHtrZXk6YSx2YWx1ZTpvLm1hcmsoZnVuY3Rpb24gdCgpe3JldHVybiBvLndyYXAoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cmV0dXJuIGUuZGVsZWdhdGVZaWVsZChzKHRoaXMubGF5ZXJzKSxcInQwXCIsMSk7Y2FzZSAxOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19LHQsdGhpcyl9KX0se2tleTpcImhlaWdodFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9oZWlnaHR9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9oZWlnaHQ9ZX19XSksZX0oKTtyW1wiZGVmYXVsdFwiXT1oLHQuZXhwb3J0cz1yW1wiZGVmYXVsdFwiXX0se1wiLi9uYW1lc3BhY2VcIjo2MCxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3JcIjo3NixcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIjo4OCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6ODksXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6OTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIjo5MyxcImJhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3JcIjoxNTZ9XSw2NTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCIpW1wiZGVmYXVsdFwiXSxpPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIilbXCJkZWZhdWx0XCJdLHM9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIilbXCJkZWZhdWx0XCJdLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXSxvPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIilbXCJkZWZhdWx0XCJdO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBsPWUoXCJldmVudHNcIiksdT1vKGwpLGM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXthKHRoaXMsdCksbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiY29uc3RydWN0b3JcIix0aGlzKS5jYWxsKHRoaXMpLHRoaXMuZWw9ZSx0aGlzLl9iaW5kRXZlbnRzKCl9cmV0dXJuIGkodCxlKSxzKHQsW3trZXk6XCJfY3JlYXRlRXZlbnRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe319LHtrZXk6XCJfYmluZEV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7fX1dKSx0fSh1W1wiZGVmYXVsdFwiXS5FdmVudEVtaXR0ZXIpO3JbXCJkZWZhdWx0XCJdPWMsdC5leHBvcnRzPXJbXCJkZWZhdWx0XCJdfSx7XCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiOjg5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiOjkwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiOjkxLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6OTIsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIjo5MyxldmVudHM6MTU5fV0sNjY6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCIpW1wiZGVmYXVsdFwiXSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbD1lKFwiLi9ldmVudC1zb3VyY2VcIiksdT1vKGwpLGM9ZShcIi4vd2F2ZS1ldmVudFwiKSxoPW8oYyksZj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3JldHVybiBhKHRoaXMsdCksdC5faW5zdGFuY2U/dC5faW5zdGFuY2U6KG4oT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSxcImNvbnN0cnVjdG9yXCIsdGhpcykuY2FsbCh0aGlzLGUpLHRoaXMuc291cmNlTmFtZT1cImtleWJvYXJkXCIsdm9pZCh0Ll9pbnN0YW5jZT10aGlzKSl9cmV0dXJuIGkodCxlKSxzKHQsW3trZXk6XCJfY3JlYXRlRXZlbnRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPW5ldyBoW1wiZGVmYXVsdFwiXSh0aGlzLnNvdXJjZU5hbWUsZSx0KTtyZXR1cm4gci5zaGlmdEtleT10LnNoaWZ0S2V5LHIuY3RybEtleT10LmN0cmxLZXksci5hbHRLZXk9dC5hbHRLZXksci5tZXRhS2V5PXQubWV0YUtleSxyW1wiY2hhclwiXT1TdHJpbmcuZnJvbUNoYXJDb2RlKHQua2V5Q29kZSkscn19LHtrZXk6XCJfYmluZEV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWZ1bmN0aW9uKHQpe3ZhciByPWUuX2NyZWF0ZUV2ZW50KFwia2V5ZG93blwiLHQpO2UuZW1pdChcImV2ZW50XCIscil9LHI9ZnVuY3Rpb24odCl7dmFyIHI9ZS5fY3JlYXRlRXZlbnQoXCJrZXl1cFwiLHQpO2UuZW1pdChcImV2ZW50XCIscil9O3RoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0LCExKSx0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLHIsITEpfX1dKSx0fSh1W1wiZGVmYXVsdFwiXSk7cltcImRlZmF1bHRcIl09Zix0LmV4cG9ydHM9cltcImRlZmF1bHRcIl19LHtcIi4vZXZlbnQtc291cmNlXCI6NjUsXCIuL3dhdmUtZXZlbnRcIjo2OCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6ODksXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6OTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCI6OTEsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjo5MixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdFwiOjkzfV0sNjc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCIpW1wiZGVmYXVsdFwiXSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbD1lKFwiLi9ldmVudC1zb3VyY2VcIiksdT1vKGwpLGM9ZShcIi4vd2F2ZS1ldmVudFwiKSxoPW8oYyksZj0od2luZG93LmRvY3VtZW50LmJvZHksZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlKXthKHRoaXMsdCksbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiY29uc3RydWN0b3JcIix0aGlzKS5jYWxsKHRoaXMsZSksdGhpcy5zb3VyY2VOYW1lPVwic3VyZmFjZVwiLHRoaXMubW91c2VEb3duRXZlbnQ9bnVsbCx0aGlzLmxhc3RFdmVudD1udWxsfXJldHVybiBpKHQsZSkscyh0LFt7a2V5OlwiX2NyZWF0ZUV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgaFtcImRlZmF1bHRcIl0odGhpcy5zb3VyY2VOYW1lLGUsdCksbj10aGlzLl9nZXRSZWxhdGl2ZVBvc2l0aW9uKHQpO3JldHVybiByLng9bi54LHIueT1uLnksdGhpcy5keD1udWxsLHRoaXMuZHk9bnVsbCx0aGlzLmFyZWE9bnVsbCxyfX0se2tleTpcIl9nZXRSZWxhdGl2ZVBvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9MCxyPTAsbj10aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGk9ZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0K2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LHM9ZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ArZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtyZXR1cm4gZS5wYWdlWHx8ZS5wYWdlWT8odD1lLnBhZ2VYLHI9ZS5wYWdlWSk6KGUuY2xpZW50WHx8ZS5jbGllbnRZKSYmKHQ9ZS5jbGllbnRYK2kscj1lLmNsaWVudFkrcyksdC09bi5sZWZ0K2ksci09bi50b3Arcyx7eDp0LHk6cn19fSx7a2V5OlwiX2RlZmluZUFyZWFcIix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYodCYmcil7ZS5keD1lLngtci54LGUuZHk9ZS55LXIueTt2YXIgbj10Lng8ZS54P3QueDplLngsaT10Lnk8ZS55P3QueTplLnkscz1NYXRoLmFicyhNYXRoLnJvdW5kKGUueC10LngpKSxhPU1hdGguYWJzKE1hdGgucm91bmQoZS55LXQueSkpO2UuYXJlYT17bGVmdDpuLHRvcDppLHdpZHRoOnMsaGVpZ2h0OmF9fX19LHtrZXk6XCJfYmluZEV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWZ1bmN0aW9uKHQpe3dpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTt2YXIgaT1lLl9jcmVhdGVFdmVudChcIm1vdXNlZG93blwiLHQpO2UuaXNNb3VzZURvd249ITAsZS5tb3VzZURvd25FdmVudD1pLGUubGFzdEV2ZW50PWksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixyLCExKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixuLCExKSxlLmVtaXQoXCJldmVudFwiLGkpfSxyPWZ1bmN0aW9uKHQpe3ZhciByPWUuX2NyZWF0ZUV2ZW50KFwibW91c2Vtb3ZlXCIsdCk7ZS5fZGVmaW5lQXJlYShyLGUubW91c2VEb3duRXZlbnQsZS5sYXN0RXZlbnQpLGUubGFzdEV2ZW50PXIsZS5lbWl0KFwiZXZlbnRcIixyKX0sbj1mdW5jdGlvbiBsKHQpe3ZhciBuPWUuX2NyZWF0ZUV2ZW50KFwibW91c2V1cFwiLHQpO2UuX2RlZmluZUFyZWEobixlLm1vdXNlRG93bkV2ZW50LGUubGFzdEV2ZW50KSxlLmlzTW91c2VEb3duPSExLGUubW91c2VEb3duRXZlbnQ9bnVsbCxlLmxhc3RFdmVudD1udWxsLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsciksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsbCksZS5lbWl0KFwiZXZlbnRcIixuKX0saT1mdW5jdGlvbih0KXt2YXIgcj1lLl9jcmVhdGVFdmVudChcImNsaWNrXCIsdCk7ZS5lbWl0KFwiZXZlbnRcIixyKX0scz1mdW5jdGlvbih0KXt2YXIgcj1lLl9jcmVhdGVFdmVudChcImRibGNsaWNrXCIsdCk7ZS5lbWl0KFwiZXZlbnRcIixyKX0sYT1mdW5jdGlvbih0KXt2YXIgcj1lLl9jcmVhdGVFdmVudChcIm1vdXNlb3ZlclwiLHQpO2UuZW1pdChcImV2ZW50XCIscil9LG89ZnVuY3Rpb24odCl7dmFyIHI9ZS5fY3JlYXRlRXZlbnQoXCJtb3VzZW91dFwiLHQpO2UuZW1pdChcImV2ZW50XCIscil9O3RoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLHQsITEpLHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsaSwhMSksdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIixzLCExKSx0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIixhLCExKSx0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLG8sITEpfX1dKSx0fSh1W1wiZGVmYXVsdFwiXSkpO3JbXCJkZWZhdWx0XCJdPWYsdC5leHBvcnRzPXJbXCJkZWZhdWx0XCJdfSx7XCIuL2V2ZW50LXNvdXJjZVwiOjY1LFwiLi93YXZlLWV2ZW50XCI6NjgsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiOjg5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiOjkwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiOjkxLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6OTIsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIjo5M31dLDY4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1mdW5jdGlvbiBzKGUsdCxyKXtuKHRoaXMscyksdGhpcy5zb3VyY2U9ZSx0aGlzLnR5cGU9dCx0aGlzLm9yaWdpbmFsRXZlbnQ9cix0aGlzLnRhcmdldD1yLnRhcmdldCx0aGlzLmN1cnJlbnRUYXJnZXQ9ci5jdXJyZW50VGFyZ2V0fTtyW1wiZGVmYXVsdFwiXT1pLHQuZXhwb3J0cz1yW1wiZGVmYXVsdFwiXX0se1wiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIjo4OX1dLDY5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIilbXCJkZWZhdWx0XCJdLGk9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnblwiKVtcImRlZmF1bHRcIl0sYT1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzXCIpW1wiZGVmYXVsdFwiXSxvPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKVtcImRlZmF1bHRcIl0sbD1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgdT1lKFwiLi4vY29yZS9uYW1lc3BhY2VcIiksYz1sKHUpLGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aDw9MHx8dm9pZCAwPT09YXJndW1lbnRzWzBdP3t9OmFyZ3VtZW50c1swXTtpKHRoaXMsZSksdGhpcy4kZWw9bnVsbCx0aGlzLm5zPWNbXCJkZWZhdWx0XCJdLHRoaXMucGFyYW1zPXMoe30sdGhpcy5fZ2V0RGVmYXVsdHMoKSx0KTt2YXIgcj10aGlzLl9nZXRBY2Nlc3Nvckxpc3QoKTt0aGlzLl9jcmVhdGVBY2Nlc3NvcnMociksdGhpcy5fc2V0RGVmYXVsdEFjY2Vzc29ycyhyKX1yZXR1cm4gbihlLFt7a2V5OlwiX2dldERlZmF1bHRzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm57fX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLiRlbD1udWxsfX0se2tleTpcImdldENsYXNzTmFtZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJzaGFwZVwifX0se2tleTpcIl9nZXRBY2Nlc3Nvckxpc3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybnt9fX0se2tleTpcImluc3RhbGxcIix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gZSl0aGlzW3RdPWVbdF19fSx7a2V5OlwiX2NyZWF0ZUFjY2Vzc29yc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX2FjY2Vzc29ycz17fTt2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyk7YShlKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuaGFzT3duUHJvcGVydHkoZSl8fG8odCxlLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYWNjZXNzb3JzW2VdfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fYWNjZXNzb3JzW2VdPXR9fSl9KX19LHtrZXk6XCJfc2V0RGVmYXVsdEFjY2Vzc29yc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7YShlKS5mb3JFYWNoKGZ1bmN0aW9uKHIpe3ZhciBuPWVbcl0saT1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV0/bnVsbDphcmd1bWVudHNbMV07cmV0dXJuIG51bGw9PT10P2Vbcl18fG46dm9pZChlW3JdPXQpfTt0W3JdPWl9KX19LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbihlKXt9fSx7a2V5OlwidXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt9fSx7a2V5OlwiaW5BcmVhXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbixpLHMpe319XSksZX0oKTtyW1wiZGVmYXVsdFwiXT1oLHQuZXhwb3J0cz1yW1wiZGVmYXVsdFwiXX0se1wiLi4vY29yZS9uYW1lc3BhY2VcIjo2MCxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduXCI6NzksXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiOjgxLFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzXCI6ODMsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiOjg5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZS1jbGFzc1wiOjkwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0XCI6OTN9XSw3MDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCIpW1wiZGVmYXVsdFwiXSxpPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIilbXCJkZWZhdWx0XCJdLHM9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIilbXCJkZWZhdWx0XCJdLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCIpW1wiZGVmYXVsdFwiXSxvPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW50ZXJvcC1yZXF1aXJlLWRlZmF1bHRcIilbXCJkZWZhdWx0XCJdO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBsPWUoXCIuL2Jhc2Utc2hhcGVcIiksdT1vKGwpLGM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe2EodGhpcyx0KSxuKE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksXCJjb25zdHJ1Y3RvclwiLHRoaXMpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gaSh0LGUpLHModCxbe2tleTpcImdldENsYXNzTmFtZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJkb3RcIn19LHtrZXk6XCJfZ2V0QWNjZXNzb3JMaXN0XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm57Y3g6MCxjeTowLHI6Myxjb2xvcjpcIiMwMDAwMDBcIn19fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWw/dGhpcy4kZWw6KHRoaXMuJGVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh0aGlzLm5zLFwiY2lyY2xlXCIpLHRoaXMuJGVsKX19LHtrZXk6XCJ1cGRhdGVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPWUudGltZVRvUGl4ZWwodGhpcy5jeCh0KSksbj1lLnZhbHVlVG9QaXhlbCh0aGlzLmN5KHQpKSxpPXRoaXMucih0KSxzPXRoaXMuY29sb3IodCk7dGhpcy4kZWwuc2V0QXR0cmlidXRlTlMobnVsbCxcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK3IrXCIsIFwiK24rXCIpXCIpLHRoaXMuJGVsLnNldEF0dHJpYnV0ZU5TKG51bGwsXCJyXCIsaSksdGhpcy4kZWwuc3R5bGUuZmlsbD1zfX0se2tleTpcImluQXJlYVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4saSxzKXt2YXIgYT1lLnRpbWVUb1BpeGVsKHRoaXMuY3godCkpLG89ZS52YWx1ZVRvUGl4ZWwodGhpcy5jeSh0KSk7cmV0dXJuIGE+ciYmaT5hJiZvPm4mJnM+bz8hMDohMX19XSksdH0odVtcImRlZmF1bHRcIl0pO3JbXCJkZWZhdWx0XCJdPWMsdC5leHBvcnRzPXJbXCJkZWZhdWx0XCJdfSx7XCIuL2Jhc2Utc2hhcGVcIjo2OSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6ODksXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6OTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCI6OTEsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjo5MixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdFwiOjkzfV0sNzE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCIpW1wiZGVmYXVsdFwiXSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbD1lKFwiLi9iYXNlLXNoYXBlXCIpLHU9byhsKSxjPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXthKHRoaXMsdCksbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiY29uc3RydWN0b3JcIix0aGlzKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGkodCxlKSxzKHQsW3trZXk6XCJnZXRDbGFzc05hbWVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwibGluZVwifX0se2tleTpcIl9nZXRBY2Nlc3Nvckxpc3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybntjeDowLGN5OjB9fX0se2tleTpcIl9nZXREZWZhdWx0c1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJue2NvbG9yOlwiIzAwMDAwMFwifX19LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kZWw/dGhpcy4kZWw6KHRoaXMuJGVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh0aGlzLm5zLFwicGF0aFwiKSx0aGlzLiRlbCl9fSx7a2V5OlwidXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3Q9dC5zbGljZSgwKSx0LnNvcnQoZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5jeChlKTxyLmN4KHQpPy0xOjF9KSx0aGlzLiRlbC5zZXRBdHRyaWJ1dGVOUyhudWxsLFwiZFwiLHRoaXMuX2J1aWxkTGluZShlLHQpKSx0aGlzLiRlbC5zdHlsZS5zdHJva2U9dGhpcy5wYXJhbXMuY29sb3IsdGhpcy4kZWwuc3R5bGUuZmlsbD1cIm5vbmVcIix0PW51bGx9fSx7a2V5OlwiX2J1aWxkTGluZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztpZighdC5sZW5ndGgpcmV0dXJuXCJcIjt2YXIgbj10Lm1hcChmdW5jdGlvbih0LG4pe3ZhciBpPWUudGltZVRvUGl4ZWwoci5jeCh0KSkscz1lLnZhbHVlVG9QaXhlbChyLmN5KHQpKTtyZXR1cm4gaStcIixcIitzfSk7cmV0dXJuXCJNXCIrbi5qb2luKFwiTFwiKX19XSksdH0odVtcImRlZmF1bHRcIl0pO3JbXCJkZWZhdWx0XCJdPWMsdC5leHBvcnRzPXJbXCJkZWZhdWx0XCJdfSx7XCIuL2Jhc2Utc2hhcGVcIjo2OSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6ODksXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6OTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0XCI6OTEsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjo5MixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbnRlcm9wLXJlcXVpcmUtZGVmYXVsdFwiOjkzfV0sNzI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldFwiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCIpW1wiZGVmYXVsdFwiXSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0XCIpW1wiZGVmYXVsdFwiXTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbD1lKFwiLi9iYXNlLXNoYXBlXCIpLHU9byhsKSxjPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXthKHRoaXMsdCksbihPYmplY3QuZ2V0UHJvdG90eXBlT2YodC5wcm90b3R5cGUpLFwiY29uc3RydWN0b3JcIix0aGlzKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGkodCxlKSxzKHQsW3trZXk6XCJnZXRDbGFzc05hbWVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwic2VnbWVudFwifX0se2tleTpcIl9nZXRBY2Nlc3Nvckxpc3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybnt4OjAseTowLHdpZHRoOjAsaGVpZ2h0OjEsY29sb3I6XCIjMDAwMDAwXCIsb3BhY2l0eToxfX19LHtrZXk6XCJfZ2V0RGVmYXVsdHNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybntkaXNwbGF5SGFuZGxlcnM6ITAsaGFuZGxlcldpZHRoOjIsaGFuZGxlck9wYWNpdHk6Ljgsb3BhY2l0eTouNn19fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuJGVsP3RoaXMuJGVsOih0aGlzLiRlbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlModGhpcy5ucyxcImdcIiksdGhpcy4kc2VnbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlModGhpcy5ucyxcInJlY3RcIiksdGhpcy4kc2VnbWVudC5jbGFzc0xpc3QuYWRkKFwic2VnbWVudFwiKSx0aGlzLiRzZWdtZW50LnN0eWxlLm9wYWNpdHk9dGhpcy5wYXJhbXMub3BhY2l0eSx0aGlzLiRzZWdtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsXCJzaGFwZS1yZW5kZXJpbmdcIixcImNyaXNwRWRnZXNcIiksdGhpcy4kZWwuYXBwZW5kQ2hpbGQodGhpcy4kc2VnbWVudCksdGhpcy5wYXJhbXMuZGlzcGxheUhhbmRsZXJzJiYodGhpcy4kbGVmdEhhbmRsZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHRoaXMubnMsXCJyZWN0XCIpLHRoaXMuJGxlZnRIYW5kbGVyLmNsYXNzTGlzdC5hZGQoXCJsZWZ0XCIsXCJoYW5kbGVyXCIpLHRoaXMuJGxlZnRIYW5kbGVyLnNldEF0dHJpYnV0ZU5TKG51bGwsXCJ3aWR0aFwiLHRoaXMucGFyYW1zLmhhbmRsZXJXaWR0aCksdGhpcy4kbGVmdEhhbmRsZXIuc2V0QXR0cmlidXRlTlMobnVsbCxcInNoYXBlLXJlbmRlcmluZ1wiLFwiY3Jpc3BFZGdlc1wiKSx0aGlzLiRsZWZ0SGFuZGxlci5zdHlsZS5vcGFjaXR5PXRoaXMucGFyYW1zLmhhbmRsZXJPcGFjaXR5LHRoaXMuJGxlZnRIYW5kbGVyLnN0eWxlLmN1cnNvcj1cImV3LXJlc2l6ZVwiLHRoaXMuJHJpZ2h0SGFuZGxlcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlModGhpcy5ucyxcInJlY3RcIiksdGhpcy4kcmlnaHRIYW5kbGVyLmNsYXNzTGlzdC5hZGQoXCJyaWdodFwiLFwiaGFuZGxlclwiKSx0aGlzLiRyaWdodEhhbmRsZXIuc2V0QXR0cmlidXRlTlMobnVsbCxcIndpZHRoXCIsdGhpcy5wYXJhbXMuaGFuZGxlcldpZHRoKSx0aGlzLiRyaWdodEhhbmRsZXIuc2V0QXR0cmlidXRlTlMobnVsbCxcInNoYXBlLXJlbmRlcmluZ1wiLFwiY3Jpc3BFZGdlc1wiKSx0aGlzLiRyaWdodEhhbmRsZXIuc3R5bGUub3BhY2l0eT10aGlzLnBhcmFtcy5oYW5kbGVyT3BhY2l0eSx0aGlzLiRyaWdodEhhbmRsZXIuc3R5bGUuY3Vyc29yPVwiZXctcmVzaXplXCIsdGhpcy4kZWwuYXBwZW5kQ2hpbGQodGhpcy4kbGVmdEhhbmRsZXIpLHRoaXMuJGVsLmFwcGVuZENoaWxkKHRoaXMuJHJpZ2h0SGFuZGxlcikpLHRoaXMuJGVsKX19LHtrZXk6XCJ1cGRhdGVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPWUudGltZVRvUGl4ZWwodGhpcy54KHQpKSxuPWUudmFsdWVUb1BpeGVsKHRoaXMueSh0KSksaT1lLnRpbWVUb1BpeGVsKHRoaXMud2lkdGgodCkpLHM9ZS52YWx1ZVRvUGl4ZWwodGhpcy5oZWlnaHQodCkpLGE9dGhpcy5jb2xvcih0KSxvPXRoaXMub3BhY2l0eSh0KTtpZih0aGlzLiRlbC5zZXRBdHRyaWJ1dGVOUyhudWxsLFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrcitcIiwgXCIrbitcIilcIiksdGhpcy4kZWwuc3R5bGUub3BhY2l0eT1vLHRoaXMuJHNlZ21lbnQuc2V0QXR0cmlidXRlTlMobnVsbCxcIndpZHRoXCIsTWF0aC5tYXgoaSwwKSksdGhpcy4kc2VnbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLFwiaGVpZ2h0XCIscyksdGhpcy4kc2VnbWVudC5zdHlsZS5maWxsPWEsdGhpcy5wYXJhbXMuZGlzcGxheUhhbmRsZXJzKXt0aGlzLiRsZWZ0SGFuZGxlci5zZXRBdHRyaWJ1dGVOUyhudWxsLFwiaGVpZ2h0XCIscyksdGhpcy4kbGVmdEhhbmRsZXIuc2V0QXR0cmlidXRlTlMobnVsbCxcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDAsIDApXCIpLHRoaXMuJGxlZnRIYW5kbGVyLnN0eWxlLmZpbGw9YTt2YXIgbD1cInRyYW5zbGF0ZShcIisoaS10aGlzLnBhcmFtcy5oYW5kbGVyV2lkdGgpK1wiLCAwKVwiO3RoaXMuJHJpZ2h0SGFuZGxlci5zZXRBdHRyaWJ1dGVOUyhudWxsLFwiaGVpZ2h0XCIscyksdGhpcy4kcmlnaHRIYW5kbGVyLnNldEF0dHJpYnV0ZU5TKG51bGwsXCJ0cmFuc2Zvcm1cIixsKSx0aGlzLiRyaWdodEhhbmRsZXIuc3R5bGUuZmlsbD1hfX19LHtrZXk6XCJpbkFyZWFcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuLGkscyl7dmFyIGE9ZS50aW1lVG9QaXhlbCh0aGlzLngodCkpLG89ZS50aW1lVG9QaXhlbCh0aGlzLngodCkrdGhpcy53aWR0aCh0KSksbD1lLnZhbHVlVG9QaXhlbCh0aGlzLnkodCkpLHU9ZS52YWx1ZVRvUGl4ZWwodGhpcy55KHQpK3RoaXMuaGVpZ2h0KHQpKSxjPU1hdGgubWF4KDAsTWF0aC5taW4oaSxvKS1NYXRoLm1heChyLGEpKSxoPU1hdGgubWF4KDAsTWF0aC5taW4ocyx1KS1NYXRoLm1heChuLGwpKSxmPWMqaDtyZXR1cm4gZj4wfX1dKSx0fSh1W1wiZGVmYXVsdFwiXSk7cltcImRlZmF1bHRcIl09Yyx0LmV4cG9ydHM9cltcImRlZmF1bHRcIl19LHtcIi4vYmFzZS1zaGFwZVwiOjY5LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2tcIjo4OSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGUtY2xhc3NcIjo5MCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXRcIjo5MSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjkyLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2ludGVyb3AtcmVxdWlyZS1kZWZhdWx0XCI6OTN9XSw3MzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCIpW1wiZGVmYXVsdFwiXSxpPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3MtY2FsbC1jaGVja1wiKVtcImRlZmF1bHRcIl07T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe2FyZ3VtZW50cy5sZW5ndGg8PTF8fHZvaWQgMD09PWFyZ3VtZW50c1sxXT97fTphcmd1bWVudHNbMV07aSh0aGlzLGUpLHRoaXMudGltZWxpbmU9dH1yZXR1cm4gbihlLFt7a2V5OlwiZW50ZXJcIix2YWx1ZTpmdW5jdGlvbigpe319LHtrZXk6XCJleGl0XCIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5OlwiaGFuZGxlRXZlbnRcIix2YWx1ZTpmdW5jdGlvbihlKXt9fSx7a2V5OlwidHJhY2tzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGltZWxpbmUudHJhY2tzfX0se2tleTpcImxheWVyc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRpbWVsaW5lLnRyYWNrcy5sYXllcnN9fV0pLGV9KCk7cltcImRlZmF1bHRcIl09cyx0LmV4cG9ydHM9cltcImRlZmF1bHRcIl19LHtcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzcy1jYWxsLWNoZWNrXCI6ODksXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlLWNsYXNzXCI6OTB9XSw3NDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHJbXCJkZWZhdWx0XCJdPXtsaW5lYXI6ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7aT0oblsxXS1uWzBdKS8oclsxXS1yWzBdKSxzPW5bMF0taSpyWzBdfWZ1bmN0aW9uIHQoZSl7cmV0dXJuIGkqZStzfXZhciByPVswLDFdLG49WzAsMV0saT0xLHM9MDtyZXR1cm4gdC5pbnZlcnQ9ZnVuY3Rpb24oZSl7cmV0dXJuKGUtcykvaX0sdC5kb21haW49ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPD0wfHx2b2lkIDA9PT1hcmd1bWVudHNbMF0/bnVsbDphcmd1bWVudHNbMF07cmV0dXJuIG51bGw9PT1uP3I6KHI9bixlKCksdCl9LHQucmFuZ2U9ZnVuY3Rpb24oKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPD0wfHx2b2lkIDA9PT1hcmd1bWVudHNbMF0/bnVsbDphcmd1bWVudHNbMF07cmV0dXJuIG51bGw9PT1yP246KG49cixlKCksdCl9LHR9fSx0LmV4cG9ydHM9cltcImRlZmF1bHRcIl19LHt9XSw3NTpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVsxMF1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiOjk2LGR1cDoxMH1dLDc2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvclwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvclwiOjk3fV0sNzc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vaXMtaXRlcmFibGVcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9pcy1pdGVyYWJsZVwiOjk4fV0sNzg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vbWFwXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vbWFwXCI6OTl9XSw3OTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiOjEwMH1dLDgwOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzExXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCI6MTAxLGR1cDoxMX1dLDgxOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzEyXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCI6MTAyLGR1cDoxMn1dLDgyOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzEzXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCI6MTAzLGR1cDoxM31dLDgzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIjoxMDR9XSw4NDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCI6MTA1fV0sODU6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2VcIjoxMDZ9XSw4NjpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVsxNF1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vc2V0XCI6MTA3LGR1cDoxNH1dLDg3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiOjEwOH1dLDg4OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiOjEwOX1dLDg5OltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzE1XVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtkdXA6MTV9XSw5MDpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVsxNl1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiOjgxLGR1cDoxNn1dLDkxOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzE3XVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCI6ODIsZHVwOjE3fV0sOTI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGVcIilbXCJkZWZhdWx0XCJdLGk9ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKVtcImRlZmF1bHRcIl07cltcImRlZmF1bHRcIl09ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9bih0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKGk/aShlLHQpOmUuX19wcm90b19fPXQpfSxyLl9fZXNNb2R1bGU9ITB9LHtcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlXCI6ODAsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIjo4NH1dLDkzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7cltcImRlZmF1bHRcIl09ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX0sci5fX2VzTW9kdWxlPSEwfSx7fV0sOTQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2dldC1pdGVyYXRvclwiKVtcImRlZmF1bHRcIl0saT1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2lzLWl0ZXJhYmxlXCIpW1wiZGVmYXVsdFwiXTtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgcj1bXSxpPSEwLHM9ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgbyxsPW4oZSk7IShpPShvPWwubmV4dCgpKS5kb25lKSYmKHIucHVzaChvLnZhbHVlKSwhdHx8ci5sZW5ndGghPT10KTtpPSEwKTt9Y2F0Y2godSl7cz0hMCxhPXV9ZmluYWxseXt0cnl7IWkmJmxbXCJyZXR1cm5cIl0mJmxbXCJyZXR1cm5cIl0oKX1maW5hbGx5e2lmKHMpdGhyb3cgYX19cmV0dXJuIHJ9cmV0dXJuIGZ1bmN0aW9uKHQscil7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gdDtpZihpKE9iamVjdCh0KSkpcmV0dXJuIGUodCxyKTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKX19KCksci5fX2VzTW9kdWxlPSEwfSx7XCJiYWJlbC1ydW50aW1lL2NvcmUtanMvZ2V0LWl0ZXJhdG9yXCI6NzYsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvaXMtaXRlcmFibGVcIjo3N31dLDk1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tXCIpW1wiZGVmYXVsdFwiXTtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHQ9MCxyPUFycmF5KGUubGVuZ3RoKTt0PGUubGVuZ3RoO3QrKylyW3RdPWVbdF07cmV0dXJuIHJ9cmV0dXJuIG4oZSl9LHIuX19lc01vZHVsZT0hMH0se1wiYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zyb21cIjo3NX1dLDk2OltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzE5XVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4uLy4uL21vZHVsZXMvJFwiOjEyOCxcIi4uLy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb21cIjoxNDIsXCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3JcIjoxNTEsZHVwOjE5fV0sOTc6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpLGUoXCIuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3JcIiksZShcIi4uL21vZHVsZXMvY29yZS5pdGVyLWhlbHBlcnNcIiksdC5leHBvcnRzPWUoXCIuLi9tb2R1bGVzLyRcIikuY29yZS5nZXRJdGVyYXRvcn0se1wiLi4vbW9kdWxlcy8kXCI6MTI4LFwiLi4vbW9kdWxlcy9jb3JlLml0ZXItaGVscGVyc1wiOjE0MSxcIi4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiOjE1MSxcIi4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZVwiOjE1NX1dLDk4OltmdW5jdGlvbihlLHQscil7ZShcIi4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZVwiKSxlKFwiLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCIpLGUoXCIuLi9tb2R1bGVzL2NvcmUuaXRlci1oZWxwZXJzXCIpLHQuZXhwb3J0cz1lKFwiLi4vbW9kdWxlcy8kXCIpLmNvcmUuaXNJdGVyYWJsZX0se1wiLi4vbW9kdWxlcy8kXCI6MTI4LFwiLi4vbW9kdWxlcy9jb3JlLml0ZXItaGVscGVyc1wiOjE0MSxcIi4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiOjE1MSxcIi4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZVwiOjE1NX1dLDk5OltmdW5jdGlvbihlLHQscil7ZShcIi4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmdcIiksZShcIi4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiKSxlKFwiLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpLGUoXCIuLi9tb2R1bGVzL2VzNi5tYXBcIiksZShcIi4uL21vZHVsZXMvZXM3Lm1hcC50by1qc29uXCIpLHQuZXhwb3J0cz1lKFwiLi4vbW9kdWxlcy8kXCIpLmNvcmUuTWFwfSx7XCIuLi9tb2R1bGVzLyRcIjoxMjgsXCIuLi9tb2R1bGVzL2VzNi5tYXBcIjoxNDQsXCIuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nXCI6MTQ4LFwiLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCI6MTUxLFwiLi4vbW9kdWxlcy9lczcubWFwLnRvLWpzb25cIjoxNTMsXCIuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGVcIjoxNTV9XSwxMDA6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnblwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvJFwiKS5jb3JlLk9iamVjdC5hc3NpZ259LHtcIi4uLy4uL21vZHVsZXMvJFwiOjEyOCxcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ25cIjoxNDV9XSwxMDE6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bMjBdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi4vLi4vbW9kdWxlcy8kXCI6MTI4LGR1cDoyMH1dLDEwMjpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVsyMV1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCIuLi8uLi9tb2R1bGVzLyRcIjoxMjgsZHVwOjIxfV0sMTAzOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzIyXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4uLy4uL21vZHVsZXMvJFwiOjEyOCxcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zdGF0aWNzLWFjY2VwdC1wcmltaXRpdmVzXCI6MTQ3LGR1cDoyMn1dLDEwNDpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc3RhdGljcy1hY2NlcHQtcHJpbWl0aXZlc1wiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvJFwiKS5jb3JlLk9iamVjdC5rZXlzfSx7XCIuLi8uLi9tb2R1bGVzLyRcIjoxMjgsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc3RhdGljcy1hY2NlcHQtcHJpbWl0aXZlc1wiOjE0N31dLDEwNTpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZlwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvJFwiKS5jb3JlLk9iamVjdC5zZXRQcm90b3R5cGVPZn0se1wiLi4vLi4vbW9kdWxlcy8kXCI6MTI4LFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2ZcIjoxNDZ9XSwxMDY6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZ1wiKSxlKFwiLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCIpLGUoXCIuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGVcIiksZShcIi4uL21vZHVsZXMvZXM2LnByb21pc2VcIiksdC5leHBvcnRzPWUoXCIuLi9tb2R1bGVzLyRcIikuY29yZS5Qcm9taXNlfSx7XCIuLi9tb2R1bGVzLyRcIjoxMjgsXCIuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nXCI6MTQ4LFwiLi4vbW9kdWxlcy9lczYucHJvbWlzZVwiOjE0OSxcIi4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiOjE1MSxcIi4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZVwiOjE1NX1dLDEwNzpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVsyM11bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCIuLi9tb2R1bGVzLyRcIjoxMjgsXCIuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nXCI6MTQ4LFwiLi4vbW9kdWxlcy9lczYuc2V0XCI6MTUwLFwiLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCI6MTUxLFwiLi4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb25cIjoxNTQsXCIuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGVcIjoxNTUsZHVwOjIzfV0sMTA4OltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbFwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvJFwiKS5jb3JlLlN5bWJvbH0se1wiLi4vLi4vbW9kdWxlcy8kXCI6MTI4LFwiLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sXCI6MTUyfV0sMTA5OltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiKSxlKFwiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpLHQuZXhwb3J0cz1lKFwiLi4vLi4vbW9kdWxlcy8kLndrc1wiKShcIml0ZXJhdG9yXCIpfSx7XCIuLi8uLi9tb2R1bGVzLyQud2tzXCI6MTQwLFwiLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yXCI6MTUxLFwiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCI6MTU1fV0sMTEwOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzI0XVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJFwiOjEyOCxkdXA6MjR9XSwxMTE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kXCIpLGk9ZShcIi4vJC5lbnVtLWtleXNcIik7dC5leHBvcnRzPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPU9iamVjdChuLmFzc2VydERlZmluZWQoZSkpLHM9YXJndW1lbnRzLmxlbmd0aCxhPTE7cz5hOylmb3IodmFyIG8sbD1uLkVTNU9iamVjdChhcmd1bWVudHNbYSsrXSksdT1pKGwpLGM9dS5sZW5ndGgsaD0wO2M+aDspcltvPXVbaCsrXV09bFtvXTtyZXR1cm4gcn19LHtcIi4vJFwiOjEyOCxcIi4vJC5lbnVtLWtleXNcIjoxMTl9XSwxMTI6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bMjVdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kXCI6MTI4LFwiLi8kLndrc1wiOjE0MCxkdXA6MjV9XSwxMTM6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bMjZdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kXCI6MTI4LFwiLi8kLmFzc2VydFwiOjExMCxcIi4vJC5jdHhcIjoxMTYsXCIuLyQuZm9yLW9mXCI6MTIwLFwiLi8kLml0ZXJcIjoxMjcsXCIuLyQuaXRlci1kZWZpbmVcIjoxMjUsXCIuLyQubWl4XCI6MTMwLFwiLi8kLnVpZFwiOjEzOCxkdXA6MjZ9XSwxMTQ6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bMjddWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kLmRlZlwiOjExNyxcIi4vJC5mb3Itb2ZcIjoxMjAsZHVwOjI3fV0sMTE1OltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzI4XVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJFwiOjEyOCxcIi4vJC5hc3NlcnRcIjoxMTAsXCIuLyQuY29mXCI6MTEyLFwiLi8kLmRlZlwiOjExNyxcIi4vJC5mb3Itb2ZcIjoxMjAsXCIuLyQuaXRlclwiOjEyNyxcIi4vJC5taXhcIjoxMzAsXCIuLyQuc3BlY2llc1wiOjEzNSxcIi4vJC51aWRcIjoxMzgsZHVwOjI4fV0sMTE2OltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzI5XVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJC5hc3NlcnRcIjoxMTAsZHVwOjI5fV0sMTE3OltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzMwXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJFwiOjEyOCxkdXA6MzB9XSwxMTg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kXCIpLGk9bi5nLmRvY3VtZW50LHM9bi5pc09iamVjdCxhPXMoaSkmJnMoaS5jcmVhdGVFbGVtZW50KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGE/aS5jcmVhdGVFbGVtZW50KGUpOnt9fX0se1wiLi8kXCI6MTI4fV0sMTE5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vJFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bi5nZXRLZXlzKGUpLHI9bi5nZXREZXNjLGk9bi5nZXRTeW1ib2xzO3JldHVybiBpJiZuLmVhY2guY2FsbChpKGUpLGZ1bmN0aW9uKG4pe3IoZSxuKS5lbnVtZXJhYmxlJiZ0LnB1c2gobil9KSx0fX0se1wiLi8kXCI6MTI4fV0sMTIwOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzMxXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJC5jdHhcIjoxMTYsXCIuLyQuaXRlclwiOjEyNyxcIi4vJC5pdGVyLWNhbGxcIjoxMjQsZHVwOjMxfV0sMTIxOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzMyXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtkdXA6MzJ9XSwxMjI6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bMzNdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kXCI6MTI4LGR1cDozM31dLDEyMzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7dmFyIG49dm9pZCAwPT09cjtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbj9lKCk6ZS5jYWxsKHIpO2Nhc2UgMTpyZXR1cm4gbj9lKHRbMF0pOmUuY2FsbChyLHRbMF0pO2Nhc2UgMjpyZXR1cm4gbj9lKHRbMF0sdFsxXSk6ZS5jYWxsKHIsdFswXSx0WzFdKTtjYXNlIDM6cmV0dXJuIG4/ZSh0WzBdLHRbMV0sdFsyXSk6ZS5jYWxsKHIsdFswXSx0WzFdLHRbMl0pO2Nhc2UgNDpyZXR1cm4gbj9lKHRbMF0sdFsxXSx0WzJdLHRbM10pOmUuY2FsbChyLHRbMF0sdFsxXSx0WzJdLHRbM10pO2Nhc2UgNTpyZXR1cm4gbj9lKHRbMF0sdFsxXSx0WzJdLHRbM10sdFs0XSk6ZS5jYWxsKHIsdFswXSx0WzFdLHRbMl0sdFszXSx0WzRdKX1yZXR1cm4gZS5hcHBseShyLHQpfX0se31dLDEyNDpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVszNF1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCIuLyQuYXNzZXJ0XCI6MTEwLGR1cDozNH1dLDEyNTpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVszNV1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCIuLyRcIjoxMjgsXCIuLyQuY29mXCI6MTEyLFwiLi8kLmRlZlwiOjExNyxcIi4vJC5pdGVyXCI6MTI3LFwiLi8kLnJlZGVmXCI6MTMxLFwiLi8kLndrc1wiOjE0MCxkdXA6MzV9XSwxMjY6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bMzZdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kLndrc1wiOjE0MCxkdXA6MzZ9XSwxMjc6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bMzddWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kXCI6MTI4LFwiLi8kLmFzc2VydFwiOjExMCxcIi4vJC5jb2ZcIjoxMTIsXCIuLyQuc2hhcmVkXCI6MTM0LFwiLi8kLndrc1wiOjE0MCxkdXA6Mzd9XSwxMjg6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bMzhdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kLmZ3XCI6MTIxLGR1cDozOH1dLDEyOTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLyRcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLGk9bi50b09iamVjdChlKSxzPW4uZ2V0S2V5cyhpKSxhPXMubGVuZ3RoLG89MDthPm87KWlmKGlbcj1zW28rK11dPT09dClyZXR1cm4gcn19LHtcIi4vJFwiOjEyOH1dLDEzMDpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVszOV1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCIuLyQucmVkZWZcIjoxMzEsZHVwOjM5fV0sMTMxOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzQwXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJFwiOjEyOCxkdXA6NDB9XSwxMzI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9T2JqZWN0LmlzfHxmdW5jdGlvbihlLHQpe3JldHVybiBlPT09dD8wIT09ZXx8MS9lPT09MS90OmUhPWUmJnQhPXR9fSx7fV0sMTMzOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbihlLHQpe3Mub2JqKGUpLHMobnVsbD09PXR8fGkuaXNPYmplY3QodCksdCxcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIil9dmFyIGk9ZShcIi4vJFwiKSxzPWUoXCIuLyQuYXNzZXJ0XCIpO3QuZXhwb3J0cz17c2V0Ok9iamVjdC5zZXRQcm90b3R5cGVPZnx8KFwiX19wcm90b19fXCJpbnt9P2Z1bmN0aW9uKHQscil7dHJ5e3I9ZShcIi4vJC5jdHhcIikoRnVuY3Rpb24uY2FsbCxpLmdldERlc2MoT2JqZWN0LnByb3RvdHlwZSxcIl9fcHJvdG9fX1wiKS5zZXQsMikscih7fSxbXSl9Y2F0Y2gocyl7dD0hMH1yZXR1cm4gZnVuY3Rpb24oZSxpKXtyZXR1cm4gbihlLGkpLHQ/ZS5fX3Byb3RvX189aTpyKGUsaSksZX19KCk6dm9pZCAwKSxjaGVjazpufX0se1wiLi8kXCI6MTI4LFwiLi8kLmFzc2VydFwiOjExMCxcIi4vJC5jdHhcIjoxMTZ9XSwxMzQ6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bNDFdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kXCI6MTI4LGR1cDo0MX1dLDEzNTpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVs0Ml1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCIuLyRcIjoxMjgsXCIuLyQud2tzXCI6MTQwLGR1cDo0Mn1dLDEzNjpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVs0M11bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCIuLyRcIjoxMjgsZHVwOjQzfV0sMTM3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbigpe3ZhciBlPSt0aGlzO2lmKGwuaGFzKHgsZSkpe3ZhciB0PXhbZV07ZGVsZXRlIHhbZV0sdCgpfX1mdW5jdGlvbiBpKGUpe24uY2FsbChlLmRhdGEpfXZhciBzLGEsbyxsPWUoXCIuLyRcIiksdT1lKFwiLi8kLmN0eFwiKSxjPWUoXCIuLyQuY29mXCIpLGg9ZShcIi4vJC5pbnZva2VcIiksZj1lKFwiLi8kLmRvbS1jcmVhdGVcIiksZD1sLmcscD1sLmlzRnVuY3Rpb24sbT1sLmh0bWwsYj1kLnByb2Nlc3MsZz1kLnNldEltbWVkaWF0ZSx2PWQuY2xlYXJJbW1lZGlhdGUseT1kLk1lc3NhZ2VDaGFubmVsLCQ9MCx4PXt9LF89XCJvbnJlYWR5c3RhdGVjaGFuZ2VcIjtwKGcpJiZwKHYpfHwoZz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0xO2FyZ3VtZW50cy5sZW5ndGg+cjspdC5wdXNoKGFyZ3VtZW50c1tyKytdKTtyZXR1cm4geFsrKyRdPWZ1bmN0aW9uKCl7aChwKGUpP2U6RnVuY3Rpb24oZSksdCl9LHMoJCksJH0sdj1mdW5jdGlvbihlKXtkZWxldGUgeFtlXX0sXCJwcm9jZXNzXCI9PWMoYik/cz1mdW5jdGlvbihlKXtiLm5leHRUaWNrKHUobixlLDEpKX06ZC5hZGRFdmVudExpc3RlbmVyJiZwKGQucG9zdE1lc3NhZ2UpJiYhZC5pbXBvcnRTY3JpcHRzPyhzPWZ1bmN0aW9uKGUpe2QucG9zdE1lc3NhZ2UoZSxcIipcIil9LGQuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixpLCExKSk6cCh5KT8oYT1uZXcgeSxvPWEucG9ydDIsYS5wb3J0MS5vbm1lc3NhZ2U9aSxzPXUoby5wb3N0TWVzc2FnZSxvLDEpKTpzPV8gaW4gZihcInNjcmlwdFwiKT9mdW5jdGlvbihlKXttLmFwcGVuZENoaWxkKGYoXCJzY3JpcHRcIikpW19dPWZ1bmN0aW9uKCl7bS5yZW1vdmVDaGlsZCh0aGlzKSxuLmNhbGwoZSl9fTpmdW5jdGlvbihlKXtzZXRUaW1lb3V0KHUobixlLDEpLDApfSksdC5leHBvcnRzPXtzZXQ6ZyxjbGVhcjp2fX0se1wiLi8kXCI6MTI4LFwiLi8kLmNvZlwiOjExMixcIi4vJC5jdHhcIjoxMTYsXCIuLyQuZG9tLWNyZWF0ZVwiOjExOCxcIi4vJC5pbnZva2VcIjoxMjN9XSwxMzg6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bNDRdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kXCI6MTI4LGR1cDo0NH1dLDEzOTpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVs0NV1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7ZHVwOjQ1fV0sMTQwOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzQ2XVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJFwiOjEyOCxcIi4vJC5zaGFyZWRcIjoxMzQsXCIuLyQudWlkXCI6MTM4LGR1cDo0Nn1dLDE0MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLyRcIikuY29yZSxpPWUoXCIuLyQuaXRlclwiKTtuLmlzSXRlcmFibGU9aS5pcyxuLmdldEl0ZXJhdG9yPWkuZ2V0fSx7XCIuLyRcIjoxMjgsXCIuLyQuaXRlclwiOjEyN31dLDE0MjpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVs0N11bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCIuLyRcIjoxMjgsXCIuLyQuY3R4XCI6MTE2LFwiLi8kLmRlZlwiOjExNyxcIi4vJC5pdGVyXCI6MTI3LFwiLi8kLml0ZXItY2FsbFwiOjEyNCxcIi4vJC5pdGVyLWRldGVjdFwiOjEyNixkdXA6NDd9XSwxNDM6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bNDhdWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kXCI6MTI4LFwiLi8kLml0ZXJcIjoxMjcsXCIuLyQuaXRlci1kZWZpbmVcIjoxMjUsXCIuLyQudWlkXCI6MTM4LFwiLi8kLnVuc2NvcGVcIjoxMzksZHVwOjQ4fV0sMTQ0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vJC5jb2xsZWN0aW9uLXN0cm9uZ1wiKTtlKFwiLi8kLmNvbGxlY3Rpb25cIikoXCJNYXBcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzLGFyZ3VtZW50c1swXSl9fSx7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PW4uZ2V0RW50cnkodGhpcyxlKTtyZXR1cm4gdCYmdC52fSxzZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5kZWYodGhpcywwPT09ZT8wOmUsdCl9fSxuLCEwKX0se1wiLi8kLmNvbGxlY3Rpb25cIjoxMTUsXCIuLyQuY29sbGVjdGlvbi1zdHJvbmdcIjoxMTN9XSwxNDU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kLmRlZlwiKTtuKG4uUyxcIk9iamVjdFwiLHthc3NpZ246ZShcIi4vJC5hc3NpZ25cIil9KX0se1wiLi8kLmFzc2lnblwiOjExMSxcIi4vJC5kZWZcIjoxMTd9XSwxNDY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi8kLmRlZlwiKTtuKG4uUyxcIk9iamVjdFwiLHtzZXRQcm90b3R5cGVPZjplKFwiLi8kLnNldC1wcm90b1wiKS5zZXR9KX0se1wiLi8kLmRlZlwiOjExNyxcIi4vJC5zZXQtcHJvdG9cIjoxMzN9XSwxNDc6W2Z1bmN0aW9uKGUsdCxyKXthcmd1bWVudHNbNF1bNDldWzBdLmFwcGx5KHIsYXJndW1lbnRzKX0se1wiLi8kXCI6MTI4LFwiLi8kLmRlZlwiOjExNyxcIi4vJC5nZXQtbmFtZXNcIjoxMjIsZHVwOjQ5fV0sMTQ4OltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzUwXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJFwiOjEyOCxcIi4vJC5jb2ZcIjoxMTIsXCIuLyQucmVkZWZcIjoxMzEsXCIuLyQud2tzXCI6MTQwLGR1cDo1MH1dLDE0OTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7dmFyIHQ9bmV3IFMoZnVuY3Rpb24oKXt9KTtyZXR1cm4gZSYmKHQuY29uc3RydWN0b3I9T2JqZWN0KSxTLnJlc29sdmUodCk9PT10fWZ1bmN0aW9uIGkoZSl7cmV0dXJuIEwoZSkmJihEP1wiUHJvbWlzZVwiPT1tLmNsYXNzb2YoZSk6dyBpbiBlKX1mdW5jdGlvbiBzKGUsdCl7cmV0dXJuIGQuRld8fGUhPT1TfHx0IT09Zj8kKGUsdCk6ITB9ZnVuY3Rpb24gYShlKXt2YXIgdD1UKGUpW19dO3JldHVybiB2b2lkIDAhPXQ/dDplfWZ1bmN0aW9uIG8oZSl7dmFyIHQ7cmV0dXJuIEwoZSkmJih0PWUudGhlbiksQyh0KT90OiExfWZ1bmN0aW9uIGwoZSl7dmFyIHQ9ZS5jO3QubGVuZ3RoJiZPLmNhbGwoaixmdW5jdGlvbigpe2Z1bmN0aW9uIHIodCl7dmFyIHIscyxhPWk/dC5vazp0LmZhaWw7dHJ5e2E/KGl8fChlLmg9ITApLHI9YT09PSEwP246YShuKSxyPT09dC5QP3QucmVqKFR5cGVFcnJvcihcIlByb21pc2UtY2hhaW4gY3ljbGVcIikpOihzPW8ocikpP3MuY2FsbChyLHQucmVzLHQucmVqKTp0LnJlcyhyKSk6dC5yZWoobil9Y2F0Y2gobCl7dC5yZWoobCl9fWZvcih2YXIgbj1lLnYsaT0xPT1lLnMscz0wO3QubGVuZ3RoPnM7KXIodFtzKytdKTt0Lmxlbmd0aD0wfSl9ZnVuY3Rpb24gdShlKXt2YXIgdCxyPWVbd10sbj1yLmF8fHIuYyxpPTA7aWYoci5oKXJldHVybiExO2Zvcig7bi5sZW5ndGg+aTspaWYodD1uW2krK10sdC5mYWlsfHwhdSh0LlApKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGMoZSl7dmFyIHQscj10aGlzO3IuZHx8KHIuZD0hMCxyPXIucnx8cixyLnY9ZSxyLnM9MixyLmE9ci5jLnNsaWNlKCksc2V0VGltZW91dChmdW5jdGlvbigpe08uY2FsbChqLGZ1bmN0aW9uKCl7dSh0PXIucCkmJihQP0UuZW1pdChcInVuaGFuZGxlZFJlamVjdGlvblwiLGUsdCk6ai5jb25zb2xlJiZjb25zb2xlLmVycm9yJiZjb25zb2xlLmVycm9yKFwiVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uXCIsZSkpLFxuci5hPXZvaWQgMH0pfSwxKSxsKHIpKX1mdW5jdGlvbiBoKGUpe3ZhciB0LHI9dGhpcztpZighci5kKXtyLmQ9ITAscj1yLnJ8fHI7dHJ5eyh0PW8oZSkpP08uY2FsbChqLGZ1bmN0aW9uKCl7dmFyIG49e3I6cixkOiExfTt0cnl7dC5jYWxsKGUscChoLG4sMSkscChjLG4sMSkpfWNhdGNoKGkpe2MuY2FsbChuLGkpfX0pOihyLnY9ZSxyLnM9MSxsKHIpKX1jYXRjaChuKXtjLmNhbGwoe3I6cixkOiExfSxuKX19fXZhciBmLGQ9ZShcIi4vJFwiKSxwPWUoXCIuLyQuY3R4XCIpLG09ZShcIi4vJC5jb2ZcIiksYj1lKFwiLi8kLmRlZlwiKSxnPWUoXCIuLyQuYXNzZXJ0XCIpLHY9ZShcIi4vJC5mb3Itb2ZcIikseT1lKFwiLi8kLnNldC1wcm90b1wiKS5zZXQsJD1lKFwiLi8kLnNhbWVcIikseD1lKFwiLi8kLnNwZWNpZXNcIiksXz1lKFwiLi8kLndrc1wiKShcInNwZWNpZXNcIiksdz1lKFwiLi8kLnVpZFwiKS5zYWZlKFwicmVjb3JkXCIpLGs9XCJQcm9taXNlXCIsaj1kLmcsRT1qLnByb2Nlc3MsUD1cInByb2Nlc3NcIj09bShFKSxPPUUmJkUubmV4dFRpY2t8fGUoXCIuLyQudGFza1wiKS5zZXQsUz1qW2tdLEM9ZC5pc0Z1bmN0aW9uLEw9ZC5pc09iamVjdCxNPWcuZm4sVD1nLm9iaixEPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgcj1uZXcgUyh0KTtyZXR1cm4geShyLGUucHJvdG90eXBlKSxyfXZhciB0PSExO3RyeXtpZih0PUMoUykmJkMoUy5yZXNvbHZlKSYmbigpLHkoZSxTKSxlLnByb3RvdHlwZT1kLmNyZWF0ZShTLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmV9fSksZS5yZXNvbHZlKDUpLnRoZW4oZnVuY3Rpb24oKXt9KWluc3RhbmNlb2YgZXx8KHQ9ITEpLHQmJmQuREVTQyl7dmFyIHI9ITE7Uy5yZXNvbHZlKGQuc2V0RGVzYyh7fSxcInRoZW5cIix7Z2V0OmZ1bmN0aW9uKCl7cj0hMH19KSksdD1yfX1jYXRjaChpKXt0PSExfXJldHVybiB0fSgpO0R8fChTPWZ1bmN0aW9uKGUpe00oZSk7dmFyIHQ9e3A6Zy5pbnN0KHRoaXMsUyxrKSxjOltdLGE6dm9pZCAwLHM6MCxkOiExLHY6dm9pZCAwLGg6ITF9O2QuaGlkZSh0aGlzLHcsdCk7dHJ5e2UocChoLHQsMSkscChjLHQsMSkpfWNhdGNoKHIpe2MuY2FsbCh0LHIpfX0sZShcIi4vJC5taXhcIikoUy5wcm90b3R5cGUse3RoZW46ZnVuY3Rpb24oZSx0KXt2YXIgcj1UKFQodGhpcykuY29uc3RydWN0b3IpW19dLG49e29rOkMoZSk/ZTohMCxmYWlsOkModCk/dDohMX0saT1uLlA9bmV3KHZvaWQgMCE9cj9yOlMpKGZ1bmN0aW9uKGUsdCl7bi5yZXM9TShlKSxuLnJlaj1NKHQpfSkscz10aGlzW3ddO3JldHVybiBzLmMucHVzaChuKSxzLmEmJnMuYS5wdXNoKG4pLHMucyYmbChzKSxpfSxcImNhdGNoXCI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudGhlbih2b2lkIDAsZSl9fSkpLGIoYi5HK2IuVytiLkYqIUQse1Byb21pc2U6U30pLG0uc2V0KFMsaykseChTKSx4KGY9ZC5jb3JlW2tdKSxiKGIuUytiLkYqIUQsayx7cmVqZWN0OmZ1bmN0aW9uKGUpe3JldHVybiBuZXcoYSh0aGlzKSkoZnVuY3Rpb24odCxyKXtyKGUpfSl9fSksYihiLlMrYi5GKighRHx8bighMCkpLGsse3Jlc29sdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIGkoZSkmJnMoZS5jb25zdHJ1Y3Rvcix0aGlzKT9lOm5ldyB0aGlzKGZ1bmN0aW9uKHQpe3QoZSl9KX19KSxiKGIuUytiLkYqIShEJiZlKFwiLi8kLml0ZXItZGV0ZWN0XCIpKGZ1bmN0aW9uKGUpe1MuYWxsKGUpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oKXt9KX0pKSxrLHthbGw6ZnVuY3Rpb24oZSl7dmFyIHQ9YSh0aGlzKSxyPVtdO3JldHVybiBuZXcgdChmdW5jdGlvbihuLGkpe3YoZSwhMSxyLnB1c2gscik7dmFyIHM9ci5sZW5ndGgsYT1BcnJheShzKTtzP2QuZWFjaC5jYWxsKHIsZnVuY3Rpb24oZSxyKXt0LnJlc29sdmUoZSkudGhlbihmdW5jdGlvbihlKXthW3JdPWUsLS1zfHxuKGEpfSxpKX0pOm4oYSl9KX0scmFjZTpmdW5jdGlvbihlKXt2YXIgdD1hKHRoaXMpO3JldHVybiBuZXcgdChmdW5jdGlvbihyLG4pe3YoZSwhMSxmdW5jdGlvbihlKXt0LnJlc29sdmUoZSkudGhlbihyLG4pfSl9KX19KX0se1wiLi8kXCI6MTI4LFwiLi8kLmFzc2VydFwiOjExMCxcIi4vJC5jb2ZcIjoxMTIsXCIuLyQuY3R4XCI6MTE2LFwiLi8kLmRlZlwiOjExNyxcIi4vJC5mb3Itb2ZcIjoxMjAsXCIuLyQuaXRlci1kZXRlY3RcIjoxMjYsXCIuLyQubWl4XCI6MTMwLFwiLi8kLnNhbWVcIjoxMzIsXCIuLyQuc2V0LXByb3RvXCI6MTMzLFwiLi8kLnNwZWNpZXNcIjoxMzUsXCIuLyQudGFza1wiOjEzNyxcIi4vJC51aWRcIjoxMzgsXCIuLyQud2tzXCI6MTQwfV0sMTUwOltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzUxXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJC5jb2xsZWN0aW9uXCI6MTE1LFwiLi8kLmNvbGxlY3Rpb24tc3Ryb25nXCI6MTEzLGR1cDo1MX1dLDE1MTpbZnVuY3Rpb24oZSx0LHIpe2FyZ3VtZW50c1s0XVs1Ml1bMF0uYXBwbHkocixhcmd1bWVudHMpfSx7XCIuLyRcIjoxMjgsXCIuLyQuaXRlclwiOjEyNyxcIi4vJC5pdGVyLWRlZmluZVwiOjEyNSxcIi4vJC5zdHJpbmctYXRcIjoxMzYsXCIuLyQudWlkXCI6MTM4LGR1cDo1Mn1dLDE1MjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7dmFyIHQ9TltlXT1oLnNldCh3KEMucHJvdG90eXBlKSxNLGUpO3JldHVybiB4JiZMJiZJKCQsZSx7Y29uZmlndXJhYmxlOiEwLHNldDpmdW5jdGlvbih0KXtfKHRoaXMsVCkmJl8odGhpc1tUXSxlKSYmKHRoaXNbVF1bZV09ITEpLEkodGhpcyxlLEUoMSx0KSl9fSksdH1mdW5jdGlvbiBpKGUsdCxyKXtyZXR1cm4gciYmXyhOLHQpPyhyLmVudW1lcmFibGU/KF8oZSxUKSYmZVtUXVt0XSYmKGVbVF1bdF09ITEpLHI9dyhyLHtlbnVtZXJhYmxlOkUoMCwhMSl9KSk6KF8oZSxUKXx8aihlLFQsRSgxLHt9KSksZVtUXVt0XT0hMCksSShlLHQscikpOmooZSx0LHIpfWZ1bmN0aW9uIHMoZSx0KXt5KGUpO2Zvcih2YXIgcixuPXYodD1TKHQpKSxzPTAsYT1uLmxlbmd0aDthPnM7KWkoZSxyPW5bcysrXSx0W3JdKTtyZXR1cm4gZX1mdW5jdGlvbiBhKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/dyhlKTpzKHcoZSksdCl9ZnVuY3Rpb24gbyhlKXt2YXIgdD1ELmNhbGwodGhpcyxlKTtyZXR1cm4gdHx8IV8odGhpcyxlKXx8IV8oTixlKXx8Xyh0aGlzLFQpJiZ0aGlzW1RdW2VdP3Q6ITB9ZnVuY3Rpb24gbChlLHQpe3ZhciByPWsoZT1TKGUpLHQpO3JldHVybiFyfHwhXyhOLHQpfHxfKGUsVCkmJmVbVF1bdF18fChyLmVudW1lcmFibGU9ITApLHJ9ZnVuY3Rpb24gdShlKXtmb3IodmFyIHQscj1PKFMoZSkpLG49W10saT0wO3IubGVuZ3RoPmk7KV8oTix0PXJbaSsrXSl8fHQ9PVR8fG4ucHVzaCh0KTtyZXR1cm4gbn1mdW5jdGlvbiBjKGUpe2Zvcih2YXIgdCxyPU8oUyhlKSksbj1bXSxpPTA7ci5sZW5ndGg+aTspXyhOLHQ9cltpKytdKSYmbi5wdXNoKE5bdF0pO3JldHVybiBufXZhciBoPWUoXCIuLyRcIiksZj1lKFwiLi8kLmNvZlwiKS5zZXQsZD1lKFwiLi8kLnVpZFwiKSxwPWUoXCIuLyQuc2hhcmVkXCIpLG09ZShcIi4vJC5kZWZcIiksYj1lKFwiLi8kLnJlZGVmXCIpLGc9ZShcIi4vJC5rZXlvZlwiKSx2PWUoXCIuLyQuZW51bS1rZXlzXCIpLHk9ZShcIi4vJC5hc3NlcnRcIikub2JqLCQ9T2JqZWN0LnByb3RvdHlwZSx4PWguREVTQyxfPWguaGFzLHc9aC5jcmVhdGUsaz1oLmdldERlc2Msaj1oLnNldERlc2MsRT1oLmRlc2MsUD1lKFwiLi8kLmdldC1uYW1lc1wiKSxPPVAuZ2V0LFM9aC50b09iamVjdCxDPWguZy5TeW1ib2wsTD0hMSxNPWQoXCJ0YWdcIiksVD1kKFwiaGlkZGVuXCIpLEQ9e30ucHJvcGVydHlJc0VudW1lcmFibGUsQT1wKFwic3ltYm9sLXJlZ2lzdHJ5XCIpLE49cChcInN5bWJvbHNcIiksRj1oLmlzRnVuY3Rpb24oQyksST14P2Z1bmN0aW9uKCl7dHJ5e3JldHVybiB3KGooe30sVCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGoodGhpcyxULHt2YWx1ZTohMX0pW1RdfX0pKVtUXXx8an1jYXRjaChlKXtyZXR1cm4gZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWsoJCx0KTtuJiZkZWxldGUgJFt0XSxqKGUsdCxyKSxuJiZlIT09JCYmaigkLHQsbil9fX0oKTpqO0Z8fChDPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIEMpdGhyb3cgVHlwZUVycm9yKFwiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yXCIpO3JldHVybiBuKGQoYXJndW1lbnRzWzBdKSl9LGIoQy5wcm90b3R5cGUsXCJ0b1N0cmluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbTV19KSxoLmNyZWF0ZT1hLGguc2V0RGVzYz1pLGguZ2V0RGVzYz1sLGguc2V0RGVzY3M9cyxoLmdldE5hbWVzPVAuZ2V0PXUsaC5nZXRTeW1ib2xzPWMsaC5ERVNDJiZoLkZXJiZiKCQsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLG8sITApKTt2YXIgUj17XCJmb3JcIjpmdW5jdGlvbihlKXtyZXR1cm4gXyhBLGUrPVwiXCIpP0FbZV06QVtlXT1DKGUpfSxrZXlGb3I6ZnVuY3Rpb24oZSl7cmV0dXJuIGcoQSxlKX0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7TD0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7TD0hMX19O2guZWFjaC5jYWxsKFwiaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXNcIi5zcGxpdChcIixcIiksZnVuY3Rpb24odCl7dmFyIHI9ZShcIi4vJC53a3NcIikodCk7Ult0XT1GP3I6bihyKX0pLEw9ITAsbShtLkcrbS5XLHtTeW1ib2w6Q30pLG0obS5TLFwiU3ltYm9sXCIsUiksbShtLlMrbS5GKiFGLFwiT2JqZWN0XCIse2NyZWF0ZTphLGRlZmluZVByb3BlcnR5OmksZGVmaW5lUHJvcGVydGllczpzLGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpsLGdldE93blByb3BlcnR5TmFtZXM6dSxnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6Y30pLGYoQyxcIlN5bWJvbFwiKSxmKE1hdGgsXCJNYXRoXCIsITApLGYoaC5nLkpTT04sXCJKU09OXCIsITApfSx7XCIuLyRcIjoxMjgsXCIuLyQuYXNzZXJ0XCI6MTEwLFwiLi8kLmNvZlwiOjExMixcIi4vJC5kZWZcIjoxMTcsXCIuLyQuZW51bS1rZXlzXCI6MTE5LFwiLi8kLmdldC1uYW1lc1wiOjEyMixcIi4vJC5rZXlvZlwiOjEyOSxcIi4vJC5yZWRlZlwiOjEzMSxcIi4vJC5zaGFyZWRcIjoxMzQsXCIuLyQudWlkXCI6MTM4LFwiLi8kLndrc1wiOjE0MH1dLDE1MzpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLyQuY29sbGVjdGlvbi10by1qc29uXCIpKFwiTWFwXCIpfSx7XCIuLyQuY29sbGVjdGlvbi10by1qc29uXCI6MTE0fV0sMTU0OltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzUzXVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJC5jb2xsZWN0aW9uLXRvLWpzb25cIjoxMTQsZHVwOjUzfV0sMTU1OltmdW5jdGlvbihlLHQscil7YXJndW1lbnRzWzRdWzU0XVswXS5hcHBseShyLGFyZ3VtZW50cyl9LHtcIi4vJFwiOjEyOCxcIi4vJC5pdGVyXCI6MTI3LFwiLi8kLndrc1wiOjE0MCxcIi4vZXM2LmFycmF5Lml0ZXJhdG9yXCI6MTQzLGR1cDo1NH1dLDE1NjpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyKXt2YXIgbj1cIm9iamVjdFwiPT10eXBlb2Ygcj9yOlwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmP3NlbGY6dGhpcyxpPW4ucmVnZW5lcmF0b3JSdW50aW1lJiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpPj0wLHM9aSYmbi5yZWdlbmVyYXRvclJ1bnRpbWU7bi5yZWdlbmVyYXRvclJ1bnRpbWU9dm9pZCAwLHQuZXhwb3J0cz1lKFwiLi9ydW50aW1lXCIpLGk/bi5yZWdlbmVyYXRvclJ1bnRpbWU9czpkZWxldGUgbi5yZWdlbmVyYXRvclJ1bnRpbWUsdC5leHBvcnRzPXtcImRlZmF1bHRcIjp0LmV4cG9ydHMsX19lc01vZHVsZTohMH19KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4vcnVudGltZVwiOjE1N31dLDE1NzpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyLG4pe1widXNlIHN0cmljdFwiO3ZhciBpPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sXCIpW1wiZGVmYXVsdFwiXSxzPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpW1wiZGVmYXVsdFwiXSxhPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKVtcImRlZmF1bHRcIl0sbz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2VcIilbXCJkZWZhdWx0XCJdOyFmdW5jdGlvbihlKXtmdW5jdGlvbiBuKGUsdCxyLG4pe3ZhciBpPWEoKHR8fHUpLnByb3RvdHlwZSk7cmV0dXJuIGkuX2ludm9rZT1tKGUscnx8bnVsbCxuZXcgdihufHxbXSkpLGl9ZnVuY3Rpb24gbChlLHQscil7dHJ5e3JldHVybnt0eXBlOlwibm9ybWFsXCIsYXJnOmUuY2FsbCh0LHIpfX1jYXRjaChuKXtyZXR1cm57dHlwZTpcInRocm93XCIsYXJnOm59fX1mdW5jdGlvbiB1KCl7fWZ1bmN0aW9uIGMoKXt9ZnVuY3Rpb24gaCgpe31mdW5jdGlvbiBmKGUpe1tcIm5leHRcIixcInRocm93XCIsXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pbnZva2UodCxlKX19KX1mdW5jdGlvbiBkKGUpe3RoaXMuYXJnPWV9ZnVuY3Rpb24gcChlKXtmdW5jdGlvbiB0KHQscil7dmFyIG49ZVt0XShyKSxpPW4udmFsdWU7cmV0dXJuIGkgaW5zdGFuY2VvZiBkP28ucmVzb2x2ZShpLmFyZykudGhlbihzLGEpOm8ucmVzb2x2ZShpKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBuLnZhbHVlPWUsbn0pfWZ1bmN0aW9uIG4oZSxyKXt2YXIgbj1pP2kudGhlbihmdW5jdGlvbigpe3JldHVybiB0KGUscil9KTpuZXcgbyhmdW5jdGlvbihuKXtuKHQoZSxyKSl9KTtyZXR1cm4gaT1uW1wiY2F0Y2hcIl0oZnVuY3Rpb24oZSl7fSksbn1cIm9iamVjdFwiPT10eXBlb2YgciYmci5kb21haW4mJih0PXIuZG9tYWluLmJpbmQodCkpO3ZhciBpLHM9dC5iaW5kKGUsXCJuZXh0XCIpLGE9dC5iaW5kKGUsXCJ0aHJvd1wiKTt0LmJpbmQoZSxcInJldHVyblwiKTt0aGlzLl9pbnZva2U9bn1mdW5jdGlvbiBtKGUsdCxyKXt2YXIgbj1FO3JldHVybiBmdW5jdGlvbihpLHMpe2lmKG49PT1PKXRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7aWYobj09PVMpe2lmKFwidGhyb3dcIj09PWkpdGhyb3cgcztyZXR1cm4gJCgpfWZvcig7Oyl7dmFyIGE9ci5kZWxlZ2F0ZTtpZihhKXtpZihcInJldHVyblwiPT09aXx8XCJ0aHJvd1wiPT09aSYmYS5pdGVyYXRvcltpXT09PXgpe3IuZGVsZWdhdGU9bnVsbDt2YXIgbz1hLml0ZXJhdG9yW1wicmV0dXJuXCJdO2lmKG8pe3ZhciB1PWwobyxhLml0ZXJhdG9yLHMpO2lmKFwidGhyb3dcIj09PXUudHlwZSl7aT1cInRocm93XCIscz11LmFyZztjb250aW51ZX19aWYoXCJyZXR1cm5cIj09PWkpY29udGludWV9dmFyIHU9bChhLml0ZXJhdG9yW2ldLGEuaXRlcmF0b3Iscyk7aWYoXCJ0aHJvd1wiPT09dS50eXBlKXtyLmRlbGVnYXRlPW51bGwsaT1cInRocm93XCIscz11LmFyZztjb250aW51ZX1pPVwibmV4dFwiLHM9eDt2YXIgYz11LmFyZztpZighYy5kb25lKXJldHVybiBuPVAsYztyW2EucmVzdWx0TmFtZV09Yy52YWx1ZSxyLm5leHQ9YS5uZXh0TG9jLHIuZGVsZWdhdGU9bnVsbH1pZihcIm5leHRcIj09PWkpbj09PVA/ci5zZW50PXM6ci5zZW50PXg7ZWxzZSBpZihcInRocm93XCI9PT1pKXtpZihuPT09RSl0aHJvdyBuPVMscztyLmRpc3BhdGNoRXhjZXB0aW9uKHMpJiYoaT1cIm5leHRcIixzPXgpfWVsc2VcInJldHVyblwiPT09aSYmci5hYnJ1cHQoXCJyZXR1cm5cIixzKTtuPU87dmFyIHU9bChlLHQscik7aWYoXCJub3JtYWxcIj09PXUudHlwZSl7bj1yLmRvbmU/UzpQO3ZhciBjPXt2YWx1ZTp1LmFyZyxkb25lOnIuZG9uZX07aWYodS5hcmchPT1DKXJldHVybiBjO3IuZGVsZWdhdGUmJlwibmV4dFwiPT09aSYmKHM9eCl9ZWxzZVwidGhyb3dcIj09PXUudHlwZSYmKG49UyxpPVwidGhyb3dcIixzPXUuYXJnKX19fWZ1bmN0aW9uIGIoZSl7dmFyIHQ9e3RyeUxvYzplWzBdfTsxIGluIGUmJih0LmNhdGNoTG9jPWVbMV0pLDIgaW4gZSYmKHQuZmluYWxseUxvYz1lWzJdLHQuYWZ0ZXJMb2M9ZVszXSksdGhpcy50cnlFbnRyaWVzLnB1c2godCl9ZnVuY3Rpb24gZyhlKXt2YXIgdD1lLmNvbXBsZXRpb258fHt9O3QudHlwZT1cIm5vcm1hbFwiLGRlbGV0ZSB0LmFyZyxlLmNvbXBsZXRpb249dH1mdW5jdGlvbiB2KGUpe3RoaXMudHJ5RW50cmllcz1be3RyeUxvYzpcInJvb3RcIn1dLGUuZm9yRWFjaChiLHRoaXMpLHRoaXMucmVzZXQoITApfWZ1bmN0aW9uIHkoZSl7aWYoZSl7dmFyIHQ9ZVt3XTtpZih0KXJldHVybiB0LmNhbGwoZSk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5uZXh0KXJldHVybiBlO2lmKCFpc05hTihlLmxlbmd0aCkpe3ZhciByPS0xLG49ZnVuY3Rpb24gaSgpe2Zvcig7KytyPGUubGVuZ3RoOylpZihfLmNhbGwoZSxyKSlyZXR1cm4gaS52YWx1ZT1lW3JdLGkuZG9uZT0hMSxpO3JldHVybiBpLnZhbHVlPXgsaS5kb25lPSEwLGl9O3JldHVybiBuLm5leHQ9bn19cmV0dXJue25leHQ6JH19ZnVuY3Rpb24gJCgpe3JldHVybnt2YWx1ZTp4LGRvbmU6ITB9fXZhciB4LF89T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx3PVwiZnVuY3Rpb25cIj09dHlwZW9mIGkmJnN8fFwiQEBpdGVyYXRvclwiLGs9XCJvYmplY3RcIj09dHlwZW9mIHQsaj1lLnJlZ2VuZXJhdG9yUnVudGltZTtpZihqKXJldHVybiB2b2lkKGsmJih0LmV4cG9ydHM9aikpO2o9ZS5yZWdlbmVyYXRvclJ1bnRpbWU9az90LmV4cG9ydHM6e30sai53cmFwPW47dmFyIEU9XCJzdXNwZW5kZWRTdGFydFwiLFA9XCJzdXNwZW5kZWRZaWVsZFwiLE89XCJleGVjdXRpbmdcIixTPVwiY29tcGxldGVkXCIsQz17fSxMPWgucHJvdG90eXBlPXUucHJvdG90eXBlO2MucHJvdG90eXBlPUwuY29uc3RydWN0b3I9aCxoLmNvbnN0cnVjdG9yPWMsYy5kaXNwbGF5TmFtZT1cIkdlbmVyYXRvckZ1bmN0aW9uXCIsai5pc0dlbmVyYXRvckZ1bmN0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUuY29uc3RydWN0b3I7cmV0dXJuIHQ/dD09PWN8fFwiR2VuZXJhdG9yRnVuY3Rpb25cIj09PSh0LmRpc3BsYXlOYW1lfHx0Lm5hbWUpOiExfSxqLm1hcms9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19wcm90b19fPWgsZS5wcm90b3R5cGU9YShMKSxlfSxqLmF3cmFwPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgZChlKX0sZihwLnByb3RvdHlwZSksai5hc3luYz1mdW5jdGlvbihlLHQscixpKXt2YXIgcz1uZXcgcChuKGUsdCxyLGkpKTtyZXR1cm4gai5pc0dlbmVyYXRvckZ1bmN0aW9uKHQpP3M6cy5uZXh0KCkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gZS5kb25lP2UudmFsdWU6cy5uZXh0KCl9KX0sZihMKSxMW3ddPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LEwudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgR2VuZXJhdG9yXVwifSxqLmtleXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0LnJldmVyc2UoKSxmdW5jdGlvbiBuKCl7Zm9yKDt0Lmxlbmd0aDspe3ZhciByPXQucG9wKCk7aWYociBpbiBlKXJldHVybiBuLnZhbHVlPXIsbi5kb25lPSExLG59cmV0dXJuIG4uZG9uZT0hMCxufX0sai52YWx1ZXM9eSx2LnByb3RvdHlwZT17Y29uc3RydWN0b3I6dixyZXNldDpmdW5jdGlvbihlKXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCx0aGlzLnNlbnQ9eCx0aGlzLmRvbmU9ITEsdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKGcpLCFlKWZvcih2YXIgdCBpbiB0aGlzKVwidFwiPT09dC5jaGFyQXQoMCkmJl8uY2FsbCh0aGlzLHQpJiYhaXNOYU4oK3Quc2xpY2UoMSkpJiYodGhpc1t0XT14KX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgZT10aGlzLnRyeUVudHJpZXNbMF0sdD1lLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuKXtyZXR1cm4gcy50eXBlPVwidGhyb3dcIixzLmFyZz1lLHIubmV4dD10LCEhbn1pZih0aGlzLmRvbmUpdGhyb3cgZTtmb3IodmFyIHI9dGhpcyxuPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtuPj0wOy0tbil7dmFyIGk9dGhpcy50cnlFbnRyaWVzW25dLHM9aS5jb21wbGV0aW9uO2lmKFwicm9vdFwiPT09aS50cnlMb2MpcmV0dXJuIHQoXCJlbmRcIik7aWYoaS50cnlMb2M8PXRoaXMucHJldil7dmFyIGE9Xy5jYWxsKGksXCJjYXRjaExvY1wiKSxvPV8uY2FsbChpLFwiZmluYWxseUxvY1wiKTtpZihhJiZvKXtpZih0aGlzLnByZXY8aS5jYXRjaExvYylyZXR1cm4gdChpLmNhdGNoTG9jLCEwKTtpZih0aGlzLnByZXY8aS5maW5hbGx5TG9jKXJldHVybiB0KGkuZmluYWxseUxvYyl9ZWxzZSBpZihhKXtpZih0aGlzLnByZXY8aS5jYXRjaExvYylyZXR1cm4gdChpLmNhdGNoTG9jLCEwKX1lbHNle2lmKCFvKXRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO2lmKHRoaXMucHJldjxpLmZpbmFsbHlMb2MpcmV0dXJuIHQoaS5maW5hbGx5TG9jKX19fX0sYWJydXB0OmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtyPj0wOy0tcil7dmFyIG49dGhpcy50cnlFbnRyaWVzW3JdO2lmKG4udHJ5TG9jPD10aGlzLnByZXYmJl8uY2FsbChuLFwiZmluYWxseUxvY1wiKSYmdGhpcy5wcmV2PG4uZmluYWxseUxvYyl7dmFyIGk9bjticmVha319aSYmKFwiYnJlYWtcIj09PWV8fFwiY29udGludWVcIj09PWUpJiZpLnRyeUxvYzw9dCYmdDw9aS5maW5hbGx5TG9jJiYoaT1udWxsKTt2YXIgcz1pP2kuY29tcGxldGlvbjp7fTtyZXR1cm4gcy50eXBlPWUscy5hcmc9dCxpP3RoaXMubmV4dD1pLmZpbmFsbHlMb2M6dGhpcy5jb21wbGV0ZShzKSxDfSxjb21wbGV0ZTpmdW5jdGlvbihlLHQpe2lmKFwidGhyb3dcIj09PWUudHlwZSl0aHJvdyBlLmFyZztcImJyZWFrXCI9PT1lLnR5cGV8fFwiY29udGludWVcIj09PWUudHlwZT90aGlzLm5leHQ9ZS5hcmc6XCJyZXR1cm5cIj09PWUudHlwZT8odGhpcy5ydmFsPWUuYXJnLHRoaXMubmV4dD1cImVuZFwiKTpcIm5vcm1hbFwiPT09ZS50eXBlJiZ0JiYodGhpcy5uZXh0PXQpfSxmaW5pc2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIuZmluYWxseUxvYz09PWUpcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLHIuYWZ0ZXJMb2MpLGcociksQ319LFwiY2F0Y2hcIjpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3Q+PTA7LS10KXt2YXIgcj10aGlzLnRyeUVudHJpZXNbdF07aWYoci50cnlMb2M9PT1lKXt2YXIgbj1yLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09bi50eXBlKXt2YXIgaT1uLmFyZztnKHIpfXJldHVybiBpfX10aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIil9LGRlbGVnYXRlWWllbGQ6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLmRlbGVnYXRlPXtpdGVyYXRvcjp5KGUpLHJlc3VsdE5hbWU6dCxuZXh0TG9jOnJ9LEN9fX0oXCJvYmplY3RcIj09dHlwZW9mIG4/bjpcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZj9zZWxmOnZvaWQgMCl9KS5jYWxsKHRoaXMsZShcIl9wcm9jZXNzXCIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7X3Byb2Nlc3M6MTYwLFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGVcIjo4MCxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlXCI6ODUsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sXCI6ODcsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCI6ODh9XSwxNTg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e25hbWU6XCJ3YXZlcy1iYXNpYy1jb250cm9sbGVyc1wiLHZlcnNpb246XCIwLjQuMVwiLGRlc2NyaXB0aW9uOlwiYmFzaWMtY29udHJvbGxlcnMgZm9yIHJhcGlkIHByb3RvdHlwaW5nXCIsbWFpbjpcIndhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLmpzXCIsc3RhbmRhbG9uZTpcIndhdmVzQmFzaWNDb250cm9sbGVyc1wiLHNjcmlwdHM6e3RyYW5zcGlsZTpcIi4vYmluL3NjcmlwdHMgLS10cmFuc3BpbGVcIixwcmVidW5kbGU6XCJucG0gcnVuIGhpbnQgJiYgbnBtIHJ1biB0cmFuc3BpbGVcIixidW5kbGU6XCIuL2Jpbi9zY3JpcHRzIC0tYnVuZGxlXCIscG9zdGJ1bmRsZTpcIm5wbSBydW4gdWdsaWZ5XCIsdWdsaWZ5OlwiLi9iaW4vc2NyaXB0cyAtLXVnbGlmeVwiLHdhdGNoOlwiLi9iaW4vc2NyaXB0cyAtLXdhdGNoXCIsdGVzdDpcInRhYzZcIixwcmV0ZXN0OlwibnBtIHJ1biBoaW50XCIsaGludDpcImpzaGludCAuL2VzNjsgdHJ1ZVwiLHByZXRhZzpcImJyYW5jaD0kKGdpdCBzeW1ib2xpYy1yZWYgLXEgSEVBRCk7IGlmIFsgJGJyYW5jaCAhPSAncmVmcy9oZWFkcy9tYXN0ZXInIF07IHRoZW4gZWNobyAnPT4gWW91IG11c3QgYmUgaW4gbWFzdGVyIGJyYW5jaCB0byBydW4gdGhpcyBjb21tYW5kJzsgZXhpdCAxOyBmaSAmJiBucG0gcnVuIGJ1bmRsZSAmJiBnaXQgY29tbWl0IC1hbSAncmVidW5kbGVkJ1wiLHRhZzpcIm5wbSB2ZXJzaW9uICQxXCIscG9zdHRhZzpcImdpdCBwdXNoIG9yaWdpbiBtYXN0ZXIgJiYgZ2l0IHB1c2ggb3JpZ2luIC0tdGFnc1wifSxsaWNlbnNlOlwiQlNELTNcIixyZXBvc2l0b3J5Ont0eXBlOlwiZ2l0XCIsdXJsOlwiaHR0cHM6Ly9naXRodWIuY29tL3dhdmVzanMvYmFzaWMtY29udHJvbGxlcnMuZ2l0XCJ9LGpzaGludENvbmZpZzp7ZXNuZXh0OiEwLGJyb3dzZXI6ITAsbm9kZTohMCxkZXZlbDohMH0sZGVwZW5kZW5jaWVzOntcImJhYmVsLXJ1bnRpbWVcIjpcIl41LjQuNFwiLFwid2F2ZXMtdWlcIjpcImdpdDovL2dpdGh1Yi5jb20vd2F2ZXNqcy91aVwifSxkZXZEZXBlbmRlbmNpZXM6e1wiZnMtZXh0cmFcIjpcIl4wLjE2LjNcIixqc2hpbnQ6XCJeMi42LjBcIixcIm5vZGUtd2F0Y2hcIjpcIl4wLjMuNFwiLFwidWdsaWZ5LWpzXCI6XCJeMi40LjE2XCJ9fX0se31dLDE1OTpbZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIG4oKXt0aGlzLl9ldmVudHM9dGhpcy5fZXZlbnRzfHx7fSx0aGlzLl9tYXhMaXN0ZW5lcnM9dGhpcy5fbWF4TGlzdGVuZXJzfHx2b2lkIDB9ZnVuY3Rpb24gaShlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIHMoZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGV9ZnVuY3Rpb24gYShlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWV9ZnVuY3Rpb24gbyhlKXtyZXR1cm4gdm9pZCAwPT09ZX10LmV4cG9ydHM9bixuLkV2ZW50RW1pdHRlcj1uLG4ucHJvdG90eXBlLl9ldmVudHM9dm9pZCAwLG4ucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwLG4uZGVmYXVsdE1heExpc3RlbmVycz0xMCxuLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7aWYoIXMoZSl8fDA+ZXx8aXNOYU4oZSkpdGhyb3cgVHlwZUVycm9yKFwibiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyXCIpO3JldHVybiB0aGlzLl9tYXhMaXN0ZW5lcnM9ZSx0aGlzfSxuLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixzLGwsdTtpZih0aGlzLl9ldmVudHN8fCh0aGlzLl9ldmVudHM9e30pLFwiZXJyb3JcIj09PWUmJighdGhpcy5fZXZlbnRzLmVycm9yfHxhKHRoaXMuX2V2ZW50cy5lcnJvcikmJiF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSl7aWYodD1hcmd1bWVudHNbMV0sdCBpbnN0YW5jZW9mIEVycm9yKXRocm93IHQ7dGhyb3cgVHlwZUVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LicpfWlmKHI9dGhpcy5fZXZlbnRzW2VdLG8ocikpcmV0dXJuITE7aWYoaShyKSlzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7Y2FzZSAxOnIuY2FsbCh0aGlzKTticmVhaztjYXNlIDI6ci5jYWxsKHRoaXMsYXJndW1lbnRzWzFdKTticmVhaztjYXNlIDM6ci5jYWxsKHRoaXMsYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSk7YnJlYWs7ZGVmYXVsdDpmb3Iobj1hcmd1bWVudHMubGVuZ3RoLHM9bmV3IEFycmF5KG4tMSksbD0xO24+bDtsKyspc1tsLTFdPWFyZ3VtZW50c1tsXTtyLmFwcGx5KHRoaXMscyl9ZWxzZSBpZihhKHIpKXtmb3Iobj1hcmd1bWVudHMubGVuZ3RoLHM9bmV3IEFycmF5KG4tMSksbD0xO24+bDtsKyspc1tsLTFdPWFyZ3VtZW50c1tsXTtmb3IodT1yLnNsaWNlKCksbj11Lmxlbmd0aCxsPTA7bj5sO2wrKyl1W2xdLmFwcGx5KHRoaXMscyl9cmV0dXJuITB9LG4ucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7aWYoIWkodCkpdGhyb3cgVHlwZUVycm9yKFwibGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO2lmKHRoaXMuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz17fSksdGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyJiZ0aGlzLmVtaXQoXCJuZXdMaXN0ZW5lclwiLGUsaSh0Lmxpc3RlbmVyKT90Lmxpc3RlbmVyOnQpLHRoaXMuX2V2ZW50c1tlXT9hKHRoaXMuX2V2ZW50c1tlXSk/dGhpcy5fZXZlbnRzW2VdLnB1c2godCk6dGhpcy5fZXZlbnRzW2VdPVt0aGlzLl9ldmVudHNbZV0sdF06dGhpcy5fZXZlbnRzW2VdPXQsYSh0aGlzLl9ldmVudHNbZV0pJiYhdGhpcy5fZXZlbnRzW2VdLndhcm5lZCl7dmFyIHI7cj1vKHRoaXMuX21heExpc3RlbmVycyk/bi5kZWZhdWx0TWF4TGlzdGVuZXJzOnRoaXMuX21heExpc3RlbmVycyxyJiZyPjAmJnRoaXMuX2V2ZW50c1tlXS5sZW5ndGg+ciYmKHRoaXMuX2V2ZW50c1tlXS53YXJuZWQ9ITAsY29uc29sZS5lcnJvcihcIihub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuXCIsdGhpcy5fZXZlbnRzW2VdLmxlbmd0aCksXCJmdW5jdGlvblwiPT10eXBlb2YgY29uc29sZS50cmFjZSYmY29uc29sZS50cmFjZSgpKX1yZXR1cm4gdGhpc30sbi5wcm90b3R5cGUub249bi5wcm90b3R5cGUuYWRkTGlzdGVuZXIsbi5wcm90b3R5cGUub25jZT1mdW5jdGlvbihlLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLnJlbW92ZUxpc3RlbmVyKGUsciksbnx8KG49ITAsdC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfWlmKCFpKHQpKXRocm93IFR5cGVFcnJvcihcImxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvblwiKTt2YXIgbj0hMTtyZXR1cm4gci5saXN0ZW5lcj10LHRoaXMub24oZSxyKSx0aGlzfSxuLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciByLG4scyxvO2lmKCFpKHQpKXRocm93IFR5cGVFcnJvcihcImxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvblwiKTtpZighdGhpcy5fZXZlbnRzfHwhdGhpcy5fZXZlbnRzW2VdKXJldHVybiB0aGlzO2lmKHI9dGhpcy5fZXZlbnRzW2VdLHM9ci5sZW5ndGgsbj0tMSxyPT09dHx8aShyLmxpc3RlbmVyKSYmci5saXN0ZW5lcj09PXQpZGVsZXRlIHRoaXMuX2V2ZW50c1tlXSx0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsZSx0KTtlbHNlIGlmKGEocikpe2ZvcihvPXM7by0tPjA7KWlmKHJbb109PT10fHxyW29dLmxpc3RlbmVyJiZyW29dLmxpc3RlbmVyPT09dCl7bj1vO2JyZWFrfWlmKDA+bilyZXR1cm4gdGhpczsxPT09ci5sZW5ndGg/KHIubGVuZ3RoPTAsZGVsZXRlIHRoaXMuX2V2ZW50c1tlXSk6ci5zcGxpY2UobiwxKSx0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsZSx0KX1yZXR1cm4gdGhpc30sbi5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LHI7aWYoIXRoaXMuX2V2ZW50cylyZXR1cm4gdGhpcztpZighdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKXJldHVybiAwPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLl9ldmVudHM9e306dGhpcy5fZXZlbnRzW2VdJiZkZWxldGUgdGhpcy5fZXZlbnRzW2VdLHRoaXM7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcih0IGluIHRoaXMuX2V2ZW50cylcInJlbW92ZUxpc3RlbmVyXCIhPT10JiZ0aGlzLnJlbW92ZUFsbExpc3RlbmVycyh0KTtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9e30sdGhpc31pZihyPXRoaXMuX2V2ZW50c1tlXSxpKHIpKXRoaXMucmVtb3ZlTGlzdGVuZXIoZSxyKTtlbHNlIGZvcig7ci5sZW5ndGg7KXRoaXMucmVtb3ZlTGlzdGVuZXIoZSxyW3IubGVuZ3RoLTFdKTtyZXR1cm4gZGVsZXRlIHRoaXMuX2V2ZW50c1tlXSx0aGlzfSxuLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIHQ9dGhpcy5fZXZlbnRzJiZ0aGlzLl9ldmVudHNbZV0/aSh0aGlzLl9ldmVudHNbZV0pP1t0aGlzLl9ldmVudHNbZV1dOnRoaXMuX2V2ZW50c1tlXS5zbGljZSgpOltdfSxuLmxpc3RlbmVyQ291bnQ9ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gcj1lLl9ldmVudHMmJmUuX2V2ZW50c1t0XT9pKGUuX2V2ZW50c1t0XSk/MTplLl9ldmVudHNbdF0ubGVuZ3RoOjB9fSx7fV0sMTYwOltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbigpe2M9ITEsby5sZW5ndGg/dT1vLmNvbmNhdCh1KTpoPS0xLHUubGVuZ3RoJiZpKCl9ZnVuY3Rpb24gaSgpe2lmKCFjKXt2YXIgZT1zZXRUaW1lb3V0KG4pO2M9ITA7Zm9yKHZhciB0PXUubGVuZ3RoO3Q7KXtmb3Iobz11LHU9W107KytoPHQ7KW9baF0ucnVuKCk7aD0tMSx0PXUubGVuZ3RofW89bnVsbCxjPSExLGNsZWFyVGltZW91dChlKX19ZnVuY3Rpb24gcyhlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIGEoKXt9dmFyIG8sbD10LmV4cG9ydHM9e30sdT1bXSxjPSExLGg9LTE7bC5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0W3ItMV09YXJndW1lbnRzW3JdO3UucHVzaChuZXcgcyhlLHQpKSxjfHxzZXRUaW1lb3V0KGksMCl9LHMucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LGwudGl0bGU9XCJicm93c2VyXCIsbC5icm93c2VyPSEwLGwuZW52PXt9LGwuYXJndj1bXSxsLnZlcnNpb249XCJcIixsLnZlcnNpb25zPXt9LGwub249YSxsLmFkZExpc3RlbmVyPWEsbC5vbmNlPWEsbC5vZmY9YSxsLnJlbW92ZUxpc3RlbmVyPWEsbC5yZW1vdmVBbGxMaXN0ZW5lcnM9YSxsLmVtaXQ9YSxsLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9LGwuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9LGwuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfSxsLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSx7fV19LHt9LFsxXSkoMSl9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vd2F2ZXMtdWkvZXhhbXBsZXMvYXNzZXRzL3dhdmVzLWJhc2ljLWNvbnRyb2xsZXJzLm1pbi5qc1xuLy8gbW9kdWxlIGlkID0gNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webaudio_ircam_js__ = __webpack_require__(145);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__defs_js__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_wavesurfer_regions__ = __webpack_require__(140);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_wavesurfer_regions___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_wavesurfer_regions__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__wavesurfer_elan_json_js__ = __webpack_require__(142);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_wavesurfer_elan_wave_segment__ = __webpack_require__(143);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_wavesurfer_elan_wave_segment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_wavesurfer_elan_wave_segment__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__wavesurfer_inputstream_js__ = __webpack_require__(144);\n\n\n// Create an instance\n//FIXME: Works, but dont now if this is correct way to do it?!\n\n//import * as WaveSurfer from 'wavesurfer'; \n// _MD_ Don't now if this is correct way to do it?!\n\n\nvar WaveSurfer = __WEBPACK_IMPORTED_MODULE_0__webaudio_ircam_js__[\"a\" /* default */].WaveSurfer;\n\n\n\n\n\n\nvar selectedRegion = null;\n\nvar wavesurfer = Object.create(WaveSurfer);\n\n// Zoom slider\nvar slider;\n\nvar GLOBAL_ACTIONS = {\n    'play': function () {\n        wavesurfer.playPause();\n        if (selectedRegion != null) {\n            wavesurfer.backend.seekTo(selectedRegion.start, selectedRegion.end);\n        }\n    },\n\n    'back': function () {\n        wavesurfer.skipBackward();\n    },\n\n    'forth': function () {\n        wavesurfer.skipForward();\n    },\n\n    'toggle-mute': function () {\n        wavesurfer.toggleMute();\n    }\n};\n\n// Init & load audio file\ndocument.addEventListener('DOMContentLoaded', function () {\n    var options = {\n        container: '#waveform',\n        waveColor: 'navy',\n        progressColor: 'blue',\n        loaderColor: 'purple',\n        cursorColor: 'navy',\n        selectionColor: '#d0e9c6',\n        backend: 'WebAudio',\n        normalize: false,\n        //barWidth: 2,\n        loopSelection: false,\n        renderer: 'MultiCanvas',\n        waveSegmentRenderer: 'Canvas',\n        waveSegmentHeight: 50,\n        height: 100\n    };\n\n    if (location.search.match('scroll')) {\n        options.minPxPerSec = 100;\n        options.scrollParent = true;\n    }\n\n    // Init\n    wavesurfer.init(options);\n    // Load audio from URL\n    //wavesurfer.load('assets/demo.wav');\n});\n\n/* Progress bar */\ndocument.addEventListener('DOMContentLoaded', function () {\n    var progressDiv = document.querySelector('#progress-bar');\n    var progressBar = progressDiv.querySelector('.progress-bar');\n    var dropMessage = document.querySelector('#dropmessage');\n    var waveForm = document.querySelector('#waveform');\n\n    var showProgress = function (percent) {\n        waveForm.style.visibility = 'visible';\n        waveForm.style.display = 'block';\n\n        progressDiv.style.display = 'block';\n        progressDiv.style.visibility = 'visible';\n\n        progressBar.style.width = percent + '%';\n    };\n\n    var showMessage = function (percent) {\n        waveForm.style.visibility = 'hidden';\n        waveForm.style.display = 'none';\n\n        dropMessage.style.display = 'block';\n        dropMessage.style.visibility = 'visible';\n    };\n\n    var hideProgress = function () {\n        progressDiv.style.display = 'none';\n        progressDiv.style.visibility = 'hidden';\n    };\n\n    var hideMessage = function () {\n        dropMessage.style.display = 'none';\n        dropMessage.style.visibility = 'hidden';\n    };\n\n    wavesurfer.on('loading', showProgress);\n    wavesurfer.on('loading', hideMessage);\n    wavesurfer.on('ready', hideProgress);\n    wavesurfer.on('ready', hideMessage);\n    wavesurfer.on('destroy', hideProgress);\n    wavesurfer.on('destroy', showMessage);\n    wavesurfer.on('error', hideProgress);\n    wavesurfer.on('error', showMessage);\n\n    wavesurfer.on('region-dblclick', regionDblClicked);\n    wavesurfer.on('region-click', regionClicked);\n    wavesurfer.on('region-update-end', regionClicked);\n\n    // Report errors\n    wavesurfer.on('error', function (err) {\n        console.error(err);\n    });\n\n    // Do something when the clip is over\n    wavesurfer.on('finish', function () {\n        console.log('Finished playing');\n    });\n\n    // Add function to zoom into selection\n    wavesurfer.zoomTo = zoomTo;\n\n    //Slider\n    slider = document.querySelector('[data-action=\"zoom\"]');\n    slider.value = wavesurfer.params.minPxPerSec;\n    slider.min = 1;\n\n    slider.addEventListener('input', function () {\n        var zoomLevel = Number(slider.value);\n        wavesurfer.zoom(zoomLevel);\n    });\n\n    hideProgress();\n    showMessage();\n});\n\n// Drag'n'drop\ndocument.addEventListener('DOMContentLoaded', function () {\n    var toggleActive = function (e, toggle) {\n        e.stopPropagation();\n        e.preventDefault();\n        toggle ? e.target.classList.add('wavesurfer-dragover') : e.target.classList.remove('wavesurfer-dragover');\n    };\n\n    var handlers = {\n        // Drop event\n        drop: function (e) {\n            toggleActive(e, false);\n\n            // Load the file into wavesurfer\n            if (e.dataTransfer.files.length) {\n                wavesurfer.loadBlob(e.dataTransfer.files[0]);\n            } else {\n                wavesurfer.fireEvent('error', 'Not a file');\n            }\n        },\n\n        // Drag-over event\n        dragover: function (e) {\n            toggleActive(e, true);\n        },\n\n        // Drag-leave event\n        dragleave: function (e) {\n            toggleActive(e, false);\n        }\n    };\n\n    var dropTarget = document.querySelector('#drop');\n    Object.keys(handlers).forEach(function (event) {\n        dropTarget.addEventListener(event, handlers[event]);\n    });\n});\n\n// Zoom in to selection\nfunction zoomTo(start, end) {\n    var parentWidth = this.drawer.getWidth();\n\n    var pxPerSec = parentWidth / (end - start);\n\n    this.params.minPxPerSec = pxPerSec;\n\n    this.params.scrollParent = true;\n\n    this.drawBuffer();\n\n    this.seekAndCenter((end + start) / 2 / this.getDuration());\n\n    this.fireEvent('zoom', pxPerSec);\n}\n\nfunction unselectRegion(region) {\n    utilRemoveRegion(wavesurfer, region.id);\n    console.log(region);\n}\n\n//Unhighligt old selection\nfunction unhighlightRegion(region) {\n    region.update({\n        color: 'rgba(0, 255, 0, 0.1)'\n    });\n}\n\n/* _MD_\n// Override Wavesurfer click so when click on region, that region gets selected.\n// Note that the SeekTo function in my overridden backend sets up looping.\n// wavesurfer.backend.seekTo(selectedRegion.start, selectedRegion.end);\n*/\nfunction clickOverride(region) {\n    wavesurfer.drawer.on('click', function (e, progress) {\n        setTimeout(function () {\n\n            var seekpos = progress * wavesurfer.getDuration();\n\n            if (selectedRegion != null) {\n\n                //Check if clicked outside last selected region...\n                if (seekpos < selectedRegion.start || seekpos > selectedRegion.end) {\n                    unselectRegion(selectedRegion);\n                    selectedRegion = null;\n                    wavesurfer.backend.seekTo(seekpos);\n                } else {\n                    // end if seekpos...\n\n                    selectedRegion.update({\n                        color: 'rgba(255, 0, 0, 0.25)'\n                    });\n                    selectedRegion = region;\n\n                    wavesurfer.backend.seekTo(selectedRegion.start, selectedRegion.end);\n                }\n            } else {\n                // end if selectedRegion..\n                wavesurfer.backend.seekTo(seekpos);\n            }\n\n            wavesurfer.drawer.progress(wavesurfer.backend.getPlayedPercents());\n        }, 0);\n    });\n}\n\nfunction regionClicked(region) {\n    wavesurfer.drawer.un('click');\n\n    selectedRegion = region;\n\n    clickOverride(region);\n}\n\nfunction regionDblClicked(region) {\n    wavesurfer.drawer.un('click');\n\n    wavesurfer.drawer.on('click', function (e, progress) {\n        setTimeout(function () {\n            wavesurfer.seekTo(); //this will stop audio from looping\n        }, 0);\n    });\n    setTimeout(function () {\n        wavesurfer.zoomTo(selectedRegion.start, selectedRegion.end);\n        selectedRegion.updateRender();\n        slider.value = wavesurfer.params.minPxPerSec;\n    }, 0);\n}\n\nwavesurfer.on('region-update-end', function (region) {\n\n    if (selectedRegion == region) {\n        return;\n    }\n\n    if (selectedRegion != null) {\n        unselectRegion(selectedRegion);\n    }\n\n    selectedRegion = region;\n\n    clickOverride(region);\n});\n\n// Bind actions to buttons and keypresses\ndocument.addEventListener('DOMContentLoaded', function () {\n    document.addEventListener('keydown', function (e) {\n        var map = {\n            32: 'play', // space\n            37: 'back', // left\n            39: 'forth' // right\n        };\n        var action = map[e.keyCode];\n        if (action in GLOBAL_ACTIONS) {\n            if (document == e.target || document.body == e.target) {\n                e.preventDefault();\n            }\n            GLOBAL_ACTIONS[action](e);\n        }\n    });\n\n    [].forEach.call(document.querySelectorAll('[data-action]'), function (el) {\n        el.addEventListener('click', function (e) {\n            var action = e.currentTarget.dataset.action;\n            if (action in GLOBAL_ACTIONS) {\n                e.preventDefault();\n                GLOBAL_ACTIONS[action](e);\n            }\n        });\n    });\n});\n\nfunction utilRemoveRegion(ws, region_id) {\n    if (ws.regions.list == undefined) return;\n    Object.keys(ws.regions.list).forEach(function (item_id) {\n        var item = ws.regions.list[item_id];\n\n        if (region_id == item_id) {\n            item.remove();\n        }\n    }, ws.Region);\n}\n\n// Misc\ndocument.addEventListener('DOMContentLoaded', function () {\n    // Web Audio not supported\n    if (!window.AudioContext && !window.webkitAudioContext) {\n        var demo = document.querySelector('#demo');\n        if (demo) {\n            demo.innerHTML = '<img src=\"/example/screenshot.png\" />';\n        }\n    }\n\n    // Navbar links\n    var ul = document.querySelector('.nav-pills');\n    var pills = ul.querySelectorAll('li');\n    var active = pills[0];\n    if (location.search) {\n        var first = location.search.split('&')[0];\n        var link = ul.querySelector('a[href=\"' + first + '\"]');\n        if (link) {\n            active = link.parentNode;\n        }\n    }\n    active && active.classList.add('active');\n});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (wavesurfer);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(86), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3IuanM/MWIwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(87), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzP2FhNGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(88), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzPzVmNzAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(89), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzPzMyMjMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(91), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcz9iYjAwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(93), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanM/YTcwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(94), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanM/ZDE2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = { \"default\": __webpack_require__(95), __esModule: true };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy93ZWFrLW1hcC5qcz8xZWExIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi93ZWFrLW1hcFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvd2Vhay1tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(33);\n__webpack_require__(54);\nmodule.exports = __webpack_require__(118);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3IuanM/MmNmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9nZXQtaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(120);\nvar $Object = __webpack_require__(0).Object;\nmodule.exports = function create(P, D){\n  return $Object.create(P, D);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzPzczOGMiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCl7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(121);\nvar $Object = __webpack_require__(0).Object;\nmodule.exports = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzP2I3ZDgiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKXtcbiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(122);\nvar $Object = __webpack_require__(0).Object;\nmodule.exports = function getOwnPropertyDescriptor(it, key){\n  return $Object.getOwnPropertyDescriptor(it, key);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzPzc1MDQiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gIHJldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(123);\nmodule.exports = __webpack_require__(0).Object.getPrototypeOf;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcz81MTkzIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(124);\nmodule.exports = __webpack_require__(0).Object.setPrototypeOf;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcz9mOTA5Il0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(53);\n__webpack_require__(54);\n__webpack_require__(33);\n__webpack_require__(125);\n__webpack_require__(128);\nmodule.exports = __webpack_require__(0).Set;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zZXQuanM/MmM2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuU2V0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc2V0LmpzXG4vLyBtb2R1bGUgaWQgPSA5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(126);\n__webpack_require__(53);\n__webpack_require__(129);\n__webpack_require__(130);\nmodule.exports = __webpack_require__(0).Symbol;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanM/ZjA3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(54);\n__webpack_require__(33);\nmodule.exports = __webpack_require__(52).f('iterator');//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanM/MjM4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(53);\n__webpack_require__(33);\n__webpack_require__(127);\nmodule.exports = __webpack_require__(0).WeakMap;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9mbi93ZWFrLW1hcC5qcz9kMDJlIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLldlYWtNYXA7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9mbi93ZWFrLW1hcC5qc1xuLy8gbW9kdWxlIGlkID0gOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 96 */
/***/ (function(module, exports) {

eval("module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzP2Q1M2UiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 97 */
/***/ (function(module, exports) {

eval("module.exports = function(){ /* empty */ };//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanM/ZDVlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

eval("var forOf = __webpack_require__(26);\n\nmodule.exports = function(iter, ITERATOR){\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzP2VjMGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlciwgSVRFUkFUT1Ipe1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSA5OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

eval("// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(15)\n  , toLength  = __webpack_require__(49)\n  , toIndex   = __webpack_require__(117);\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcz82MTk5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpXG4gICAgICAsIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG4gICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(11)\n  , isArray  = __webpack_require__(66)\n  , SPECIES  = __webpack_require__(3)('species');\n\nmodule.exports = function(original){\n  var C;\n  if(isArray(original)){\n    C = original.constructor;\n    // cross-realm fallback\n    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;\n    if(isObject(C)){\n      C = C[SPECIES];\n      if(C === null)C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcz9kNmFhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaXNBcnJheSAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpXG4gICwgU1BFQ0lFUyAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsKXtcbiAgdmFyIEM7XG4gIGlmKGlzQXJyYXkob3JpZ2luYWwpKXtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZih0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpQyA9IHVuZGVmaW5lZDtcbiAgICBpZihpc09iamVjdChDKSl7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmKEMgPT09IG51bGwpQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = __webpack_require__(100);\n\nmodule.exports = function(original, length){\n  return new (speciesConstructor(original))(length);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanM/NTExNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsLCBsZW5ndGgpe1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar dP          = __webpack_require__(7).f\n  , create      = __webpack_require__(27)\n  , redefineAll = __webpack_require__(44)\n  , ctx         = __webpack_require__(19)\n  , anInstance  = __webpack_require__(35)\n  , defined     = __webpack_require__(25)\n  , forOf       = __webpack_require__(26)\n  , $iterDefine = __webpack_require__(40)\n  , step        = __webpack_require__(67)\n  , setSpecies  = __webpack_require__(115)\n  , DESCRIPTORS = __webpack_require__(5)\n  , fastKey     = __webpack_require__(21).fastKey\n  , SIZE        = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function(that, key){\n  // fast case\n  var index = fastKey(key), entry;\n  if(index !== 'F')return that._i[index];\n  // frozen object case\n  for(entry = that._f; entry; entry = entry.n){\n    if(entry.k == key)return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      anInstance(that, C, NAME, '_i');\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear(){\n        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){\n          entry.r = true;\n          if(entry.p)entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function(key){\n        var that  = this\n          , entry = getEntry(that, key);\n        if(entry){\n          var next = entry.n\n            , prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if(prev)prev.n = next;\n          if(next)next.p = prev;\n          if(that._f == entry)that._f = next;\n          if(that._l == entry)that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /*, that = undefined */){\n        anInstance(this, C, 'forEach');\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)\n          , entry;\n        while(entry = entry ? entry.n : this._f){\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while(entry && entry.r)entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key){\n        return !!getEntry(this, key);\n      }\n    });\n    if(DESCRIPTORS)dP(C.prototype, 'size', {\n      get: function(){\n        return defined(this[SIZE]);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var entry = getEntry(that, key)\n      , prev, index;\n    // change existing entry\n    if(entry){\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if(!that._f)that._f = entry;\n      if(prev)prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if(index !== 'F')that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function(C, NAME, IS_MAP){\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function(iterated, kind){\n      this._t = iterated;  // target\n      this._k = kind;      // kind\n      this._l = undefined; // previous\n    }, function(){\n      var that  = this\n        , kind  = that._k\n        , entry = that._l;\n      // revert to the last existing entry\n      while(entry && entry.r)entry = entry.p;\n      // get next entry\n      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if(kind == 'keys'  )return step(0, entry.k);\n      if(kind == 'values')return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanM/MWEzNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgY3JlYXRlICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKVxuICAsIHN0ZXAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBzZXRTcGVjaWVzICA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBmYXN0S2V5ICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5XG4gICwgU0laRSAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uKHRoYXQsIGtleSl7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5O1xuICBpZihpbmRleCAhPT0gJ0YnKXJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgIGlmKGVudHJ5LmsgPT0ga2V5KXJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpe1xuICAgICAgICBmb3IodmFyIHRoYXQgPSB0aGlzLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgICAsIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYoZW50cnkpe1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkublxuICAgICAgICAgICAgLCBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihwcmV2KXByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYobmV4dCluZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYodGhhdC5fbCA9PSBlbnRyeSl0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgJ2ZvckVhY2gnKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpXG4gICAgICAgICAgLCBlbnRyeTtcbiAgICAgICAgd2hpbGUoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKXtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKERFU0NSSVBUT1JTKWRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGRlZmluZWQodGhpc1tTSVpFXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KVxuICAgICAgLCBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZihlbnRyeSl7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZighdGhhdC5fZil0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZihwcmV2KXByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZihpbmRleCAhPT0gJ0YnKXRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgICAgIHRoaXMuX3QgPSBpdGVyYXRlZDsgIC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAsIGtpbmQgID0gdGhhdC5fa1xuICAgICAgICAsIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSl7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnICwgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qc1xuLy8gbW9kdWxlIGlkID0gMTAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

eval("// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = __webpack_require__(62)\n  , from    = __webpack_require__(98);\nmodule.exports = function(NAME){\n  return function toJSON(){\n    if(classof(this) != NAME)throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzPzk0YTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBmcm9tICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpe1xuICAgIGlmKGNsYXNzb2YodGhpcykgIT0gTkFNRSl0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar redefineAll       = __webpack_require__(44)\n  , getWeak           = __webpack_require__(21).getWeak\n  , anObject          = __webpack_require__(10)\n  , isObject          = __webpack_require__(11)\n  , anInstance        = __webpack_require__(35)\n  , forOf             = __webpack_require__(26)\n  , createArrayMethod = __webpack_require__(36)\n  , $has              = __webpack_require__(13)\n  , arrayFind         = createArrayMethod(5)\n  , arrayFindIndex    = createArrayMethod(6)\n  , id                = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function(that){\n  return that._l || (that._l = new UncaughtFrozenStore);\n};\nvar UncaughtFrozenStore = function(){\n  this.a = [];\n};\nvar findUncaughtFrozen = function(store, key){\n  return arrayFind(store.a, function(it){\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function(key){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)return entry[1];\n  },\n  has: function(key){\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function(key, value){\n    var entry = findUncaughtFrozen(this, key);\n    if(entry)entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function(key){\n    var index = arrayFindIndex(this.a, function(it){\n      return it[0] === key;\n    });\n    if(~index)this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      anInstance(that, C, NAME, '_i');\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this)['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key){\n        if(!isObject(key))return false;\n        var data = getWeak(key);\n        if(data === true)return uncaughtFrozenStore(this).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var data = getWeak(anObject(key), true);\n    if(data === true)uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzPzhjMzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBnZXRXZWFrICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrXG4gICwgYW5PYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbkluc3RhbmNlICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBmb3JPZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJylcbiAgLCAkaGFzICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgYXJyYXlGaW5kICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KVxuICAsIGFycmF5RmluZEluZGV4ICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNilcbiAgLCBpZCAgICAgICAgICAgICAgICA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbih0aGF0KXtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbigpe1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24oc3RvcmUsIGtleSl7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmKGVudHJ5KXJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmKGVudHJ5KWVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uKGl0KXtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmKH5pbmRleCl0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZihkYXRhID09PSB0cnVlKXVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

eval("// all enumerable object keys, includes symbols\nvar getKeys = __webpack_require__(22)\n  , gOPS    = __webpack_require__(43)\n  , pIE     = __webpack_require__(28);\nmodule.exports = function(it){\n  var result     = getKeys(it)\n    , getSymbols = gOPS.f;\n  if(getSymbols){\n    var symbols = getSymbols(it)\n      , isEnum  = pIE.f\n      , i       = 0\n      , key;\n    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n  } return result;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzPzcyN2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgcmVzdWx0ICAgICA9IGdldEtleXMoaXQpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZihnZXRTeW1ib2xzKXtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpXG4gICAgICAsIGlzRW51bSAgPSBwSUUuZlxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoc3ltYm9scy5sZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDEwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(6).document && document.documentElement;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcz9lNWFmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qc1xuLy8gbW9kdWxlIGlkID0gMTA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

eval("// check on default Array iterator\nvar Iterators  = __webpack_require__(20)\n  , ITERATOR   = __webpack_require__(3)('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcz9hNGIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCBJVEVSQVRPUiAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

eval("// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(10);\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzPzUxODkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2goZSl7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanNcbi8vIG1vZHVsZSBpZCA9IDEwOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar create         = __webpack_require__(27)\n  , descriptor     = __webpack_require__(29)\n  , setToStringTag = __webpack_require__(30)\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(14)(IteratorPrototype, __webpack_require__(3)('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanM/MDEyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getKeys   = __webpack_require__(22)\n  , toIObject = __webpack_require__(15);\nmodule.exports = function(object, el){\n  var O      = toIObject(object)\n    , keys   = getKeys(O)\n    , length = keys.length\n    , index  = 0\n    , key;\n  while(length > index)if(O[key = keys[index++]] === el)return key;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fa2V5b2YuanM/MGQzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGluZGV4ICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobGVuZ3RoID4gaW5kZXgpaWYoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpcmV0dXJuIGtleTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19rZXlvZi5qc1xuLy8gbW9kdWxlIGlkID0gMTEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys  = __webpack_require__(22)\n  , gOPS     = __webpack_require__(43)\n  , pIE      = __webpack_require__(28)\n  , toObject = __webpack_require__(31)\n  , IObject  = __webpack_require__(39)\n  , $assign  = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __webpack_require__(17)(function(){\n  var A = {}\n    , B = {}\n    , S = Symbol()\n    , K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function(k){ B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source){ // eslint-disable-line no-unused-vars\n  var T     = toObject(target)\n    , aLen  = arguments.length\n    , index = 1\n    , getSymbols = gOPS.f\n    , isEnum     = pIE.f;\n  while(aLen > index){\n    var S      = IObject(arguments[index++])\n      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)\n      , length = keys.length\n      , j      = 0\n      , key;\n    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];\n  } return T;\n} : $assign;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcz81YzBjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgdmFyIEEgPSB7fVxuICAgICwgQiA9IHt9XG4gICAgLCBTID0gU3ltYm9sKClcbiAgICAsIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpXG4gICAgLCBhTGVuICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ID0gMVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZlxuICAgICwgaXNFbnVtICAgICA9IHBJRS5mO1xuICB3aGlsZShhTGVuID4gaW5kZXgpe1xuICAgIHZhciBTICAgICAgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSlcbiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBqICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

eval("var dP       = __webpack_require__(7)\n  , anObject = __webpack_require__(10)\n  , getKeys  = __webpack_require__(22);\n\nmodule.exports = __webpack_require__(5) ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcz80N2ZkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpe1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpID0gMFxuICAgICwgUDtcbiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

eval("// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = __webpack_require__(15)\n  , gOPN      = __webpack_require__(68).f\n  , toString  = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function(it){\n  try {\n    return gOPN(it);\n  } catch(e){\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it){\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzP2QyMzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGdPUE4gICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpe1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

eval("// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = __webpack_require__(11)\n  , anObject = __webpack_require__(10);\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = __webpack_require__(19)(Function.call, __webpack_require__(42).f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzPzk2NjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pe1xuICBhbk9iamVjdChPKTtcbiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoKGUpeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYoYnVnZ3kpTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar global      = __webpack_require__(6)\n  , core        = __webpack_require__(0)\n  , dP          = __webpack_require__(7)\n  , DESCRIPTORS = __webpack_require__(5)\n  , SPECIES     = __webpack_require__(3)('species');\n\nmodule.exports = function(KEY){\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanM/MjdkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgQyA9IHR5cGVvZiBjb3JlW0tFWV0gPT0gJ2Z1bmN0aW9uJyA/IGNvcmVbS0VZXSA6IGdsb2JhbFtLRVldO1xuICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1zcGVjaWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

eval("var toInteger = __webpack_require__(48)\n  , defined   = __webpack_require__(25);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzPzQxM2EiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XG4gIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpe1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpXG4gICAgICAsIGkgPSB0b0ludGVnZXIocG9zKVxuICAgICAgLCBsID0gcy5sZW5ndGhcbiAgICAgICwgYSwgYjtcbiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanNcbi8vIG1vZHVsZSBpZCA9IDExNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

eval("var toInteger = __webpack_require__(48)\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanM/OWZkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWF4ICAgICAgID0gTWF0aC5tYXhcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDExN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

eval("var anObject = __webpack_require__(10)\n  , get      = __webpack_require__(72);\nmodule.exports = __webpack_require__(0).getIterator = function(it){\n  var iterFn = get(it);\n  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci5qcz9hY2E3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0ICAgICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3IgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBpdGVyRm4gPSBnZXQoaXQpO1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIHJldHVybiBhbk9iamVjdChpdGVyRm4uY2FsbChpdCkpO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDExOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar addToUnscopables = __webpack_require__(97)\n  , step             = __webpack_require__(67)\n  , Iterators        = __webpack_require__(20)\n  , toIObject        = __webpack_require__(15);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(40)(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanM/MWUwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpXG4gICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgSXRlcmF0b3JzICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwga2luZCAgPSB0aGlzLl9rXG4gICAgLCBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDExOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

eval("var $export = __webpack_require__(12)\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', {create: __webpack_require__(27)});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcz85MDM0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jylcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7Y3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyl9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

eval("var $export = __webpack_require__(12);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !__webpack_require__(5), 'Object', {defineProperty: __webpack_require__(7).f});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcz9jODJjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject                 = __webpack_require__(15)\n  , $getOwnPropertyDescriptor = __webpack_require__(42).f;\n\n__webpack_require__(71)('getOwnPropertyDescriptor', function(){\n  return function getOwnPropertyDescriptor(it, key){\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcz9mZTIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDEyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject        = __webpack_require__(31)\n  , $getPrototypeOf = __webpack_require__(69);\n\n__webpack_require__(71)('getPrototypeOf', function(){\n  return function getPrototypeOf(it){\n    return $getPrototypeOf(toObject(it));\n  };\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanM/ZWFhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMTIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

eval("// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = __webpack_require__(12);\n$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(114).set});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanM/YjE5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge3NldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXR9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar strong = __webpack_require__(102);\n\n// 23.2 Set Objects\nmodule.exports = __webpack_require__(63)('Set', function(get){\n  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value){\n    return strong.def(this, value = value === 0 ? 0 : value, value);\n  }\n}, strong);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc2V0LmpzP2RiYmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnNldC5qc1xuLy8gbW9kdWxlIGlkID0gMTI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// ECMAScript 6 symbols shim\nvar global         = __webpack_require__(6)\n  , has            = __webpack_require__(13)\n  , DESCRIPTORS    = __webpack_require__(5)\n  , $export        = __webpack_require__(12)\n  , redefine       = __webpack_require__(45)\n  , META           = __webpack_require__(21).KEY\n  , $fails         = __webpack_require__(17)\n  , shared         = __webpack_require__(47)\n  , setToStringTag = __webpack_require__(30)\n  , uid            = __webpack_require__(32)\n  , wks            = __webpack_require__(3)\n  , wksExt         = __webpack_require__(52)\n  , wksDefine      = __webpack_require__(51)\n  , keyOf          = __webpack_require__(110)\n  , enumKeys       = __webpack_require__(105)\n  , isArray        = __webpack_require__(66)\n  , anObject       = __webpack_require__(10)\n  , toIObject      = __webpack_require__(15)\n  , toPrimitive    = __webpack_require__(50)\n  , createDesc     = __webpack_require__(29)\n  , _create        = __webpack_require__(27)\n  , gOPNExt        = __webpack_require__(113)\n  , $GOPD          = __webpack_require__(42)\n  , $DP            = __webpack_require__(7)\n  , $keys          = __webpack_require__(22)\n  , gOPD           = $GOPD.f\n  , dP             = $DP.f\n  , gOPN           = gOPNExt.f\n  , $Symbol        = global.Symbol\n  , $JSON          = global.JSON\n  , _stringify     = $JSON && $JSON.stringify\n  , PROTOTYPE      = 'prototype'\n  , HIDDEN         = wks('_hidden')\n  , TO_PRIMITIVE   = wks('toPrimitive')\n  , isEnum         = {}.propertyIsEnumerable\n  , SymbolRegistry = shared('symbol-registry')\n  , AllSymbols     = shared('symbols')\n  , OPSymbols      = shared('op-symbols')\n  , ObjectProto    = Object[PROTOTYPE]\n  , USE_NATIVE     = typeof $Symbol == 'function'\n  , QObject        = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n  return _create(dP({}, 'a', {\n    get: function(){ return dP(this, 'a', {value: 7}).a; }\n  })).a != 7;\n}) ? function(it, key, D){\n  var protoDesc = gOPD(ObjectProto, key);\n  if(protoDesc)delete ObjectProto[key];\n  dP(it, key, D);\n  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function(tag){\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n  return typeof it == 'symbol';\n} : function(it){\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D){\n  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if(has(AllSymbols, key)){\n    if(!D.enumerable){\n      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n      D = _create(D, {enumerable: createDesc(0, false)});\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P){\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P))\n    , i    = 0\n    , l = keys.length\n    , key;\n  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P){\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n  it  = toIObject(it);\n  key = toPrimitive(key, true);\n  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;\n  var D = gOPD(it, key);\n  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n  var names  = gOPN(toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n  var IS_OP  = it === ObjectProto\n    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))\n    , result = []\n    , i      = 0\n    , key;\n  while(names.length > i){\n    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif(!USE_NATIVE){\n  $Symbol = function Symbol(){\n    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function(value){\n      if(this === ObjectProto)$set.call(OPSymbols, value);\n      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString(){\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f   = $defineProperty;\n  __webpack_require__(68).f = gOPNExt.f = $getOwnPropertyNames;\n  __webpack_require__(28).f  = $propertyIsEnumerable;\n  __webpack_require__(43).f = $getOwnPropertySymbols;\n\n  if(DESCRIPTORS && !__webpack_require__(41)){\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function(name){\n    return wrap(wks(name));\n  }\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});\n\nfor(var symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);\n\nfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function(key){\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(key){\n    if(isSymbol(key))return keyOf(SymbolRegistry, key);\n    throw TypeError(key + ' is not a symbol!');\n  },\n  useSetter: function(){ setter = true; },\n  useSimple: function(){ setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it){\n    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n    var args = [it]\n      , i    = 1\n      , replacer, $replacer;\n    while(arguments.length > i)args.push(arguments[i++]);\n    replacer = args[1];\n    if(typeof replacer == 'function')$replacer = replacer;\n    if($replacer || !isArray(replacer))replacer = function(key, value){\n      if($replacer)value = $replacer.call(this, key, value);\n      if(!isSymbol(value))return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(14)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar each         = __webpack_require__(36)(0)\n  , redefine     = __webpack_require__(45)\n  , meta         = __webpack_require__(21)\n  , assign       = __webpack_require__(111)\n  , weak         = __webpack_require__(104)\n  , isObject     = __webpack_require__(11)\n  , getWeak      = meta.getWeak\n  , isExtensible = Object.isExtensible\n  , uncaughtFrozenStore = weak.ufstore\n  , tmp          = {}\n  , InternalMap;\n\nvar wrapper = function(get){\n  return function WeakMap(){\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key){\n    if(isObject(key)){\n      var data = getWeak(key);\n      if(data === true)return uncaughtFrozenStore(this).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value){\n    return weak.def(this, key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = __webpack_require__(63)('WeakMap', wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){\n  InternalMap = weak.getConstructor(wrapper);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function(key){\n    var proto  = $WeakMap.prototype\n      , method = proto[key];\n    redefine(proto, key, function(a, b){\n      // store frozen objects on internal weakmap shim\n      if(isObject(a) && !isExtensible(a)){\n        if(!this._f)this._f = new InternalMap;\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYud2Vhay1tYXAuanM/ZDc1MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgZWFjaCAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApXG4gICwgcmVkZWZpbmUgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIG1ldGEgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKVxuICAsIGFzc2lnbiAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKVxuICAsIHdlYWsgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpXG4gICwgaXNPYmplY3QgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBnZXRXZWFrICAgICAgPSBtZXRhLmdldFdlYWtcbiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlXG4gICwgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZVxuICAsIHRtcCAgICAgICAgICA9IHt9XG4gICwgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKXtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIGlmKGlzT2JqZWN0KGtleSkpe1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdXZWFrTWFwJywgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmKG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDcpe1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlcik7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIHByb3RvICA9ICRXZWFrTWFwLnByb3RvdHlwZVxuICAgICAgLCBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZihpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKXtcbiAgICAgICAgaWYoIXRoaXMuX2YpdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LndlYWstbWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

eval("// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export  = __webpack_require__(12);\n\n$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(103)('Set')});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanM/ZTc1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0Jyl9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(51)('asyncIterator');//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzP2I4YzUiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDEyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(51)('observable');//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanM/ZGFhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(132);\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9kZWJ1Zy9zcmMvZGVidWcuanM/MmQ4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBzcGxpdCA9IChuYW1lc3BhY2VzIHx8ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9kZWJ1Zy9zcmMvZGVidWcuanNcbi8vIG1vZHVsZSBpZCA9IDEzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 132 */
/***/ (function(module, exports) {

eval("/**\n * Helpers.\n */\n\nvar s = 1000\nvar m = s * 60\nvar h = m * 60\nvar d = h * 24\nvar y = d * 365.25\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {}\n  var type = typeof val\n  if (type === 'string' && val.length > 0) {\n    return parse(val)\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ?\n\t\t\tfmtLong(val) :\n\t\t\tfmtShort(val)\n  }\n  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))\n}\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str)\n  if (str.length > 10000) {\n    return\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)\n  if (!match) {\n    return\n  }\n  var n = parseFloat(match[1])\n  var type = (match[2] || 'ms').toLowerCase()\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n\n    default:\n      return undefined\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd'\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h'\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm'\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's'\n  }\n  return ms + 'ms'\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms'\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's'\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9tcy9pbmRleC5qcz82ZDM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDBcbnZhciBtID0gcyAqIDYwXG52YXIgaCA9IG0gKiA2MFxudmFyIGQgPSBoICogMjRcbnZhciB5ID0gZCAqIDM2NS4yNVxuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbFxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/XG5cdFx0XHRmbXRMb25nKHZhbCkgOlxuXHRcdFx0Zm10U2hvcnQodmFsKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcigndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICsgSlNPTi5zdHJpbmdpZnkodmFsKSlcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpXG4gIGlmIChzdHIubGVuZ3RoID4gMTAwMDApIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKHN0cilcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSlcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHlcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkXG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoXG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtXG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzXG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJ1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJ1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJ1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJ1xuICB9XG4gIHJldHVybiBtcyArICdtcydcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcydcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZVxuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncydcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(9);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _audioTimeEngine = __webpack_require__(23);\n\nvar _audioTimeEngine2 = _interopRequireDefault(_audioTimeEngine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction optOrDef(opt, def) {\n  if (opt !== undefined) return opt;\n\n  return def;\n}\n\n/**\n * @class GranularEngine\n */\n\nvar GranularEngine = function (_AudioTimeEngine) {\n  (0, _inherits3.default)(GranularEngine, _AudioTimeEngine);\n\n  /**\n   * @constructor\n   * @param {AudioBuffer} buffer initial audio buffer for granular synthesis\n   *\n   * The engine implements the \"scheduled\" interface.\n   * The grain position (grain onset or center time in the audio buffer) is optionally\n   * determined by the engine's currentPosition attribute.\n   */\n\n  function GranularEngine() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    (0, _classCallCheck3.default)(this, GranularEngine);\n\n\n    /**\n     * Audio buffer\n     * @type {AudioBuffer}\n     */\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(GranularEngine).call(this, options.audioContext));\n\n    _this.buffer = optOrDef(options.buffer, null);\n\n    /**\n     * Absolute grain period in sec\n     * @type {Number}\n     */\n    _this.periodAbs = optOrDef(options.periodAbs, 0.01);\n\n    /**\n     * Grain period relative to absolute duration\n     * @type {Number}\n     */\n    _this.periodRel = optOrDef(options.periodRel, 0);\n\n    /**\n     * Amout of random grain period variation relative to grain period\n     * @type {Number}\n     */\n    _this.periodVar = optOrDef(options.periodVar, 0);\n\n    /**\n     * Grain position (onset time in audio buffer) in sec\n     * @type {Number}\n     */\n    _this.position = optOrDef(options.position, 0);\n\n    /**\n     * Amout of random grain position variation in sec\n     * @type {Number}\n     */\n    _this.positionVar = optOrDef(options.positionVar, 0.003);\n\n    /**\n     * Absolute grain duration in sec\n     * @type {Number}\n     */\n    _this.durationAbs = optOrDef(options.durationAbs, 0.1); // absolute grain duration\n\n    /**\n     * Grain duration relative to grain period (overlap)\n     * @type {Number}\n     */\n    _this.durationRel = optOrDef(options.durationRel, 0);\n\n    /**\n     * Absolute attack time in sec\n     * @type {Number}\n     */\n    _this.attackAbs = optOrDef(options.attackAbs, 0);\n\n    /**\n     * Attack time relative to grain duration\n     * @type {Number}\n     */\n    _this.attackRel = optOrDef(options.attackRel, 0.5);\n\n    /**\n     * Shape of attack\n     * @type {String} 'lin' for linear ramp, 'exp' for exponential\n     */\n    _this.attackShape = optOrDef(options.attackShape, 'lin');\n\n    /**\n     * Absolute release time in sec\n     * @type {Number}\n     */\n    _this.releaseAbs = optOrDef(options.releaseAbs, 0);\n\n    /**\n     * Release time relative to grain duration\n     * @type {Number}\n     */\n    _this.releaseRel = optOrDef(options.releaseRel, 0.5);\n\n    /**\n     * Shape of release\n     * @type {String} 'lin' for linear ramp, 'exp' for exponential\n     */\n    _this.releaseShape = optOrDef(options.releaseShape, 'lin');\n\n    /**\n     * Offset (start/end value) for exponential attack/release\n     * @type {Number} offset\n     */\n    _this.expRampOffset = optOrDef(options.expRampOffset, 0.0001);\n\n    /**\n     * Grain resampling in cent\n     * @type {Number}\n     */\n    _this.resampling = optOrDef(options.resampling, 0);\n\n    /**\n     * Amout of random resampling variation in cent\n     * @type {Number}\n     */\n    _this.resamplingVar = optOrDef(options.resamplingVar, 0);\n\n    /**\n     * Linear gain factor\n     * @type {Number}\n     */\n    _this.gain = optOrDef(options.gain, 1);\n\n    /**\n     * Whether the grain position refers to the center of the grain (or the beginning)\n     * @type {Bool}\n     */\n    _this.centered = optOrDef(options.centered, true);\n\n    /**\n     * Whether the audio buffer and grain position are considered as cyclic\n     * @type {Bool}\n     */\n    _this.cyclic = optOrDef(options.cyclic, false);\n\n    /**\n     * Portion at the end of the audio buffer that has been copied from the beginning to assure cyclic behavior\n     * @type {Number}\n     */\n    _this.wrapAroundExtension = optOrDef(options.wrapAroundExtension, 0);\n\n    _this.outputNode = _this.audioContext.createGain();\n    return _this;\n  }\n\n  /**\n   * Get buffer duration (excluding wrapAroundExtension)\n   * @return {Number} current buffer duration\n   */\n\n\n  (0, _createClass3.default)(GranularEngine, [{\n    key: 'advanceTime',\n\n\n    // TimeEngine method (scheduled interface)\n    value: function advanceTime(time) {\n      time = Math.max(time, this.audioContext.currentTime);\n      return time + this.trigger(time);\n    }\n\n    /**\n     * Trigger a grain\n     * @param {Number} time grain synthesis audio time\n     * @return {Number} period to next grain\n     *\n     * This function can be called at any time (whether the engine is scheduled or not)\n     * to generate a single grain according to the current grain parameters.\n     */\n\n  }, {\n    key: 'trigger',\n    value: function trigger(time) {\n      var audioContext = this.audioContext;\n      var grainTime = time || audioContext.currentTime;\n      var grainPeriod = this.periodAbs;\n      var grainPosition = this.currentPosition;\n      var grainDuration = this.durationAbs;\n\n      if (this.buffer) {\n        var resamplingRate = 1.0;\n\n        // calculate resampling\n        if (this.resampling !== 0 || this.resamplingVar > 0) {\n          var randomResampling = (Math.random() - 0.5) * 2.0 * this.resamplingVar;\n          resamplingRate = Math.pow(2.0, (this.resampling + randomResampling) / 1200.0);\n        }\n\n        grainPeriod += this.periodRel * grainDuration;\n        grainDuration += this.durationRel * grainPeriod;\n\n        // grain period randon variation\n        if (this.periodVar > 0.0) grainPeriod += 2.0 * (Math.random() - 0.5) * this.periodVar * grainPeriod;\n\n        // center grain\n        if (this.centered) grainPosition -= 0.5 * grainDuration;\n\n        // randomize grain position\n        if (this.positionVar > 0) grainPosition += (2.0 * Math.random() - 1) * this.positionVar;\n\n        var bufferDuration = this.bufferDuration;\n\n        // wrap or clip grain position and duration into buffer duration\n        if (grainPosition < 0 || grainPosition >= bufferDuration) {\n          if (this.cyclic) {\n            var cycles = grainPosition / bufferDuration;\n            grainPosition = (cycles - Math.floor(cycles)) * bufferDuration;\n\n            if (grainPosition + grainDuration > this.buffer.duration) grainDuration = this.buffer.duration - grainPosition;\n          } else {\n            if (grainPosition < 0) {\n              grainTime -= grainPosition;\n              grainDuration += grainPosition;\n              grainPosition = 0;\n            }\n\n            if (grainPosition + grainDuration > bufferDuration) grainDuration = bufferDuration - grainPosition;\n          }\n        }\n\n        // make grain\n        if (this.gain > 0 && grainDuration >= 0.001) {\n          // make grain envelope\n          var envelope = audioContext.createGain();\n          var attack = this.attackAbs + this.attackRel * grainDuration;\n          var release = this.releaseAbs + this.releaseRel * grainDuration;\n\n          if (attack + release > grainDuration) {\n            var factor = grainDuration / (attack + release);\n            attack *= factor;\n            release *= factor;\n          }\n\n          var attackEndTime = grainTime + attack;\n          var grainEndTime = grainTime + grainDuration / resamplingRate;\n          var releaseStartTime = grainEndTime - release;\n\n          envelope.gain.value = 0;\n\n          if (this.attackShape === 'lin') {\n            envelope.gain.setValueAtTime(0.0, grainTime);\n            envelope.gain.linearRampToValueAtTime(this.gain, attackEndTime);\n          } else {\n            envelope.gain.setValueAtTime(this.expRampOffset, grainTime);\n            envelope.gain.exponentialRampToValueAtTime(this.gain, attackEndTime);\n          }\n\n          if (releaseStartTime > attackEndTime) envelope.gain.setValueAtTime(this.gain, releaseStartTime);\n\n          if (this.releaseShape === 'lin') {\n            envelope.gain.linearRampToValueAtTime(0.0, grainEndTime);\n          } else {\n            envelope.gain.exponentialRampToValueAtTime(this.expRampOffset, grainEndTime);\n          }\n\n          envelope.connect(this.outputNode);\n\n          // make source\n          var source = audioContext.createBufferSource();\n\n          source.buffer = this.buffer;\n          source.playbackRate.value = resamplingRate;\n          source.connect(envelope);\n\n          source.start(grainTime, grainPosition);\n          source.stop(grainEndTime);\n        }\n      }\n\n      return grainPeriod;\n    }\n  }, {\n    key: 'bufferDuration',\n    get: function get() {\n      if (this.buffer) {\n        var bufferDuration = this.buffer.duration;\n\n        if (this.wrapAroundExtension) bufferDuration -= this.wrapAroundExtension;\n\n        return bufferDuration;\n      }\n\n      return 0;\n    }\n\n    // TimeEngine attribute\n\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      var master = this.master;\n\n      if (master && master.currentPosition !== undefined) return master.currentPosition;\n\n      return this.position;\n    }\n  }]);\n  return GranularEngine;\n}(_audioTimeEngine2.default);\n\nexports.default = GranularEngine;\n//# sourceMappingURL=data:application/json;base64,//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(9);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _audioTimeEngine = __webpack_require__(23);\n\nvar _audioTimeEngine2 = _interopRequireDefault(_audioTimeEngine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction optOrDef(opt, def) {\n  if (opt !== undefined) return opt;\n\n  return def;\n}\n\nvar Metronome = function (_AudioTimeEngine) {\n  (0, _inherits3.default)(Metronome, _AudioTimeEngine);\n\n  function Metronome() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    (0, _classCallCheck3.default)(this, Metronome);\n\n\n    /**\n     * Metronome period\n     * @type {Number}\n     */\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Metronome).call(this, options.audioContext));\n\n    _this.__period = optOrDef(options.period, 1);\n\n    /**\n     * Metronome click frequency\n     * @type {Number}\n     */\n    _this.clickFreq = optOrDef(options.clickFreq, 600);\n\n    /**\n     * Metronome click attack time\n     * @type {Number}\n     */\n    _this.clickAttack = optOrDef(options.clickAttack, 0.002);\n\n    /**\n     * Metronome click release time\n     * @type {Number}\n     */\n    _this.clickRelease = optOrDef(options.clickRelease, 0.098);\n\n    _this.__lastTime = 0;\n    _this.__phase = 0;\n\n    _this.__gainNode = _this.audioContext.createGain();\n    _this.__gainNode.gain.value = optOrDef(options.gain, 1);\n\n    _this.outputNode = _this.__gainNode;\n    return _this;\n  }\n\n  // TimeEngine method (scheduled interface)\n\n\n  (0, _createClass3.default)(Metronome, [{\n    key: 'advanceTime',\n    value: function advanceTime(time) {\n      this.trigger(time);\n      this.__lastTime = time;\n      return time + this.__period;\n    }\n\n    // TimeEngine method (transported interface)\n\n  }, {\n    key: 'syncPosition',\n    value: function syncPosition(time, position, speed) {\n      if (this.__period > 0) {\n        var nextPosition = (Math.floor(position / this.__period) + this.__phase) * this.__period;\n\n        if (speed > 0 && nextPosition < position) nextPosition += this.__period;else if (speed < 0 && nextPosition > position) nextPosition -= this.__period;\n\n        return nextPosition;\n      }\n\n      return Infinity * speed;\n    }\n\n    // TimeEngine method (transported interface)\n\n  }, {\n    key: 'advancePosition',\n    value: function advancePosition(time, position, speed) {\n      this.trigger(time);\n\n      if (speed < 0) return position - this.__period;\n\n      return position + this.__period;\n    }\n\n    /**\n     * Trigger metronome click\n     * @param {Number} time metronome click synthesis audio time\n     */\n\n  }, {\n    key: 'trigger',\n    value: function trigger(time) {\n      var audioContext = this.audioContext;\n      var clickAttack = this.clickAttack;\n      var clickRelease = this.clickRelease;\n\n      var env = audioContext.createGain();\n      env.gain.value = 0.0;\n      env.gain.setValueAtTime(0, time);\n      env.gain.linearRampToValueAtTime(1.0, time + clickAttack);\n      env.gain.exponentialRampToValueAtTime(0.0000001, time + clickAttack + clickRelease);\n      env.gain.setValueAtTime(0, time);\n      env.connect(this.outputNode);\n\n      var osc = audioContext.createOscillator();\n      osc.frequency.value = this.clickFreq;\n      osc.start(time);\n      osc.stop(time + clickAttack + clickRelease);\n      osc.connect(env);\n    }\n\n    /**\n     * Set gain\n     * @param {Number} value linear gain factor\n     */\n\n  }, {\n    key: 'gain',\n    set: function set(value) {\n      this.__gainNode.gain.value = value;\n    }\n\n    /**\n     * Get gain\n     * @return {Number} current gain\n     */\n    ,\n    get: function get() {\n      return this.__gainNode.gain.value;\n    }\n\n    /**\n     * Set period parameter\n     * @param {Number} period metronome period\n     */\n\n  }, {\n    key: 'period',\n    set: function set(period) {\n      this.__period = period;\n\n      var master = this.master;\n\n      if (master) {\n        if (master.resetEngineTime) master.resetEngineTime(this, this.__lastTime + period);else if (master.resetEnginePosition) master.resetEnginePosition(this);\n      }\n    }\n\n    /**\n     * Get period parameter\n     * @return {Number} value of period parameter\n     */\n    ,\n    get: function get() {\n      return this.__period;\n    }\n\n    /**\n     * Set phase parameter (available only when 'transported')\n     * @param {Number} phase metronome phase [0, 1[\n     */\n\n  }, {\n    key: 'phase',\n    set: function set(phase) {\n      this.__phase = phase - Math.floor(phase);\n\n      var master = this.master;\n\n      if (master && master.resetEnginePosition !== undefined) master.resetEnginePosition(this);\n    }\n\n    /**\n     * Get phase parameter\n     * @return {Number} value of phase parameter\n     */\n    ,\n    get: function get() {\n      return this.__phase;\n    }\n  }]);\n  return Metronome;\n}(_audioTimeEngine2.default);\n\nexports.default = Metronome;\n//# sourceMappingURL=data:application/json;base64,# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(9);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _audioTimeEngine = __webpack_require__(23);\n\nvar _audioTimeEngine2 = _interopRequireDefault(_audioTimeEngine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction optOrDef(opt, def) {\n  if (opt !== undefined) return opt;\n\n  return def;\n}\n\nvar PlayerEngine = function (_AudioTimeEngine) {\n  (0, _inherits3.default)(PlayerEngine, _AudioTimeEngine);\n\n  function PlayerEngine() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    (0, _classCallCheck3.default)(this, PlayerEngine);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PlayerEngine).call(this, options.audioContext));\n\n    _this.transport = null; // set when added to transporter\n\n    /**\n     * Audio buffer\n     * @type {AudioBuffer}\n     */\n    _this.buffer = optOrDef(options.buffer, null);\n\n    /**\n     * Fade time for chaining segments (e.g. in start, stop, and seek)\n     * @type {AudioBuffer}\n     */\n    _this.fadeTime = optOrDef(options.fadeTime, 0.005);\n\n    _this.__time = 0;\n    _this.__position = 0;\n    _this.__speed = 0;\n\n    _this.__bufferSource = null;\n    _this.__envNode = null;\n\n    _this.__gainNode = _this.audioContext.createGain();\n    _this.__gainNode.gain.value = optOrDef(options.gain, 1);\n\n    _this.__cyclic = optOrDef(options.cyclic, false);\n\n    _this.outputNode = _this.__gainNode;\n    return _this;\n  }\n\n  (0, _createClass3.default)(PlayerEngine, [{\n    key: '__start',\n    value: function __start(time, position, speed) {\n      var audioContext = this.audioContext;\n\n      if (this.buffer) {\n        var bufferDuration = this.buffer.duration;\n\n        if (this.__cyclic && (position < 0 || position >= bufferDuration)) {\n          var phase = position / bufferDuration;\n          position = (phase - Math.floor(phase)) * bufferDuration;\n        }\n\n        if (position >= 0 && position < bufferDuration && speed > 0) {\n          this.__envNode = audioContext.createGain();\n          this.__envNode.gain.setValueAtTime(0, time);\n          this.__envNode.gain.linearRampToValueAtTime(1, time + this.fadeTime);\n          this.__envNode.connect(this.__gainNode);\n\n          this.__bufferSource = audioContext.createBufferSource();\n          this.__bufferSource.buffer = this.buffer;\n          this.__bufferSource.playbackRate.value = speed;\n          this.__bufferSource.loop = this.__cyclic;\n          this.__bufferSource.loopStart = 0;\n          this.__bufferSource.loopEnd = bufferDuration;\n          this.__bufferSource.start(time, position);\n          this.__bufferSource.connect(this.__envNode);\n        }\n      }\n    }\n  }, {\n    key: '__halt',\n    value: function __halt(time) {\n      if (this.__bufferSource) {\n        this.__envNode.gain.cancelScheduledValues(time);\n        this.__envNode.gain.setValueAtTime(this.__envNode.gain.value, time);\n        this.__envNode.gain.linearRampToValueAtTime(0, time + this.fadeTime);\n        this.__bufferSource.stop(time + this.fadeTime);\n\n        this.__bufferSource = null;\n        this.__envNode = null;\n      }\n    }\n\n    // TimeEngine method (speed-controlled interface)\n\n  }, {\n    key: 'syncSpeed',\n    value: function syncSpeed(time, position, speed) {\n      var seek = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n      var lastSpeed = this.__speed;\n\n      if (speed !== lastSpeed || seek) {\n        if (seek || lastSpeed * speed < 0) {\n          this.__halt(time);\n          this.__start(time, position, speed);\n        } else if (lastSpeed === 0 || seek) {\n          this.__start(time, position, speed);\n        } else if (speed === 0) {\n          this.__halt(time);\n        } else if (this.__bufferSource) {\n          this.__bufferSource.playbackRate.setValueAtTime(speed, time);\n        }\n\n        this.__speed = speed;\n      }\n    }\n\n    /**\n     * Set whether the audio buffer is considered as cyclic\n     * @param {Bool} cyclic whether the audio buffer is considered as cyclic\n     */\n\n  }, {\n    key: 'cyclic',\n    set: function set(cyclic) {\n      if (cyclic !== this.__cyclic) {\n        var time = this.currentTime;\n        var position = this.currentosition;\n\n        this.__halt(time);\n        this.__cyclic = cyclic;\n\n        if (this.__speed !== 0) this.__start(time, position, this.__speed);\n      }\n    }\n\n    /**\n     * Get whether the audio buffer is considered as cyclic\n     * @return {Bool} whether the audio buffer is considered as cyclic\n     */\n    ,\n    get: function get() {\n      return this.__cyclic;\n    }\n\n    /**\n     * Set gain\n     * @param {Number} value linear gain factor\n     */\n\n  }, {\n    key: 'gain',\n    set: function set(value) {\n      var time = this.currentTime;\n      this.__gainNode.cancelScheduledValues(time);\n      this.__gainNode.setValueAtTime(this.__gainNode.gain.value, time);\n      this.__gainNode.linearRampToValueAtTime(0, time + this.fadeTime);\n    }\n\n    /**\n     * Get gain\n     * @return {Number} current gain\n     */\n    ,\n    get: function get() {\n      return this.__gainNode.gain.value;\n    }\n\n    /**\n     * Get buffer duration\n     * @return {Number} current buffer duration\n     */\n\n  }, {\n    key: 'bufferDuration',\n    get: function get() {\n      if (this.buffer) return this.buffer.duration;\n\n      return 0;\n    }\n  }]);\n  return PlayerEngine;\n}(_audioTimeEngine2.default);\n\nexports.default = PlayerEngine;\n//# sourceMappingURL=data:application/json;base64,# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi93YXZlcy1hdWRpby9kaXN0L2VuZ2luZXMvcGxheWVyLWVuZ2luZS5qcz85MmFiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfYXVkaW9UaW1lRW5naW5lID0gcmVxdWlyZSgnLi4vY29yZS9hdWRpby10aW1lLWVuZ2luZScpO1xuXG52YXIgX2F1ZGlvVGltZUVuZ2luZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdWRpb1RpbWVFbmdpbmUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBvcHRPckRlZihvcHQsIGRlZikge1xuICBpZiAob3B0ICE9PSB1bmRlZmluZWQpIHJldHVybiBvcHQ7XG5cbiAgcmV0dXJuIGRlZjtcbn1cblxudmFyIFBsYXllckVuZ2luZSA9IGZ1bmN0aW9uIChfQXVkaW9UaW1lRW5naW5lKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBsYXllckVuZ2luZSwgX0F1ZGlvVGltZUVuZ2luZSk7XG5cbiAgZnVuY3Rpb24gUGxheWVyRW5naW5lKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUGxheWVyRW5naW5lKTtcblxuICAgIHZhciBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUGxheWVyRW5naW5lKS5jYWxsKHRoaXMsIG9wdGlvbnMuYXVkaW9Db250ZXh0KSk7XG5cbiAgICBfdGhpcy50cmFuc3BvcnQgPSBudWxsOyAvLyBzZXQgd2hlbiBhZGRlZCB0byB0cmFuc3BvcnRlclxuXG4gICAgLyoqXG4gICAgICogQXVkaW8gYnVmZmVyXG4gICAgICogQHR5cGUge0F1ZGlvQnVmZmVyfVxuICAgICAqL1xuICAgIF90aGlzLmJ1ZmZlciA9IG9wdE9yRGVmKG9wdGlvbnMuYnVmZmVyLCBudWxsKTtcblxuICAgIC8qKlxuICAgICAqIEZhZGUgdGltZSBmb3IgY2hhaW5pbmcgc2VnbWVudHMgKGUuZy4gaW4gc3RhcnQsIHN0b3AsIGFuZCBzZWVrKVxuICAgICAqIEB0eXBlIHtBdWRpb0J1ZmZlcn1cbiAgICAgKi9cbiAgICBfdGhpcy5mYWRlVGltZSA9IG9wdE9yRGVmKG9wdGlvbnMuZmFkZVRpbWUsIDAuMDA1KTtcblxuICAgIF90aGlzLl9fdGltZSA9IDA7XG4gICAgX3RoaXMuX19wb3NpdGlvbiA9IDA7XG4gICAgX3RoaXMuX19zcGVlZCA9IDA7XG5cbiAgICBfdGhpcy5fX2J1ZmZlclNvdXJjZSA9IG51bGw7XG4gICAgX3RoaXMuX19lbnZOb2RlID0gbnVsbDtcblxuICAgIF90aGlzLl9fZ2Fpbk5vZGUgPSBfdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgIF90aGlzLl9fZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IG9wdE9yRGVmKG9wdGlvbnMuZ2FpbiwgMSk7XG5cbiAgICBfdGhpcy5fX2N5Y2xpYyA9IG9wdE9yRGVmKG9wdGlvbnMuY3ljbGljLCBmYWxzZSk7XG5cbiAgICBfdGhpcy5vdXRwdXROb2RlID0gX3RoaXMuX19nYWluTm9kZTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQbGF5ZXJFbmdpbmUsIFt7XG4gICAga2V5OiAnX19zdGFydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9fc3RhcnQodGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgICB2YXIgYXVkaW9Db250ZXh0ID0gdGhpcy5hdWRpb0NvbnRleHQ7XG5cbiAgICAgIGlmICh0aGlzLmJ1ZmZlcikge1xuICAgICAgICB2YXIgYnVmZmVyRHVyYXRpb24gPSB0aGlzLmJ1ZmZlci5kdXJhdGlvbjtcblxuICAgICAgICBpZiAodGhpcy5fX2N5Y2xpYyAmJiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IGJ1ZmZlckR1cmF0aW9uKSkge1xuICAgICAgICAgIHZhciBwaGFzZSA9IHBvc2l0aW9uIC8gYnVmZmVyRHVyYXRpb247XG4gICAgICAgICAgcG9zaXRpb24gPSAocGhhc2UgLSBNYXRoLmZsb29yKHBoYXNlKSkgKiBidWZmZXJEdXJhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSAwICYmIHBvc2l0aW9uIDwgYnVmZmVyRHVyYXRpb24gJiYgc3BlZWQgPiAwKSB7XG4gICAgICAgICAgdGhpcy5fX2Vudk5vZGUgPSBhdWRpb0NvbnRleHQuY3JlYXRlR2FpbigpO1xuICAgICAgICAgIHRoaXMuX19lbnZOb2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUoMCwgdGltZSk7XG4gICAgICAgICAgdGhpcy5fX2Vudk5vZGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSgxLCB0aW1lICsgdGhpcy5mYWRlVGltZSk7XG4gICAgICAgICAgdGhpcy5fX2Vudk5vZGUuY29ubmVjdCh0aGlzLl9fZ2Fpbk5vZGUpO1xuXG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICAgICAgICB0aGlzLl9fYnVmZmVyU291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICAgIHRoaXMuX19idWZmZXJTb3VyY2UucGxheWJhY2tSYXRlLnZhbHVlID0gc3BlZWQ7XG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZS5sb29wID0gdGhpcy5fX2N5Y2xpYztcbiAgICAgICAgICB0aGlzLl9fYnVmZmVyU291cmNlLmxvb3BTdGFydCA9IDA7XG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZS5sb29wRW5kID0gYnVmZmVyRHVyYXRpb247XG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZS5zdGFydCh0aW1lLCBwb3NpdGlvbik7XG4gICAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZS5jb25uZWN0KHRoaXMuX19lbnZOb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19faGFsdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9faGFsdCh0aW1lKSB7XG4gICAgICBpZiAodGhpcy5fX2J1ZmZlclNvdXJjZSkge1xuICAgICAgICB0aGlzLl9fZW52Tm9kZS5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0aW1lKTtcbiAgICAgICAgdGhpcy5fX2Vudk5vZGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSh0aGlzLl9fZW52Tm9kZS5nYWluLnZhbHVlLCB0aW1lKTtcbiAgICAgICAgdGhpcy5fX2Vudk5vZGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSgwLCB0aW1lICsgdGhpcy5mYWRlVGltZSk7XG4gICAgICAgIHRoaXMuX19idWZmZXJTb3VyY2Uuc3RvcCh0aW1lICsgdGhpcy5mYWRlVGltZSk7XG5cbiAgICAgICAgdGhpcy5fX2J1ZmZlclNvdXJjZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX19lbnZOb2RlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaW1lRW5naW5lIG1ldGhvZCAoc3BlZWQtY29udHJvbGxlZCBpbnRlcmZhY2UpXG5cbiAgfSwge1xuICAgIGtleTogJ3N5bmNTcGVlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN5bmNTcGVlZCh0aW1lLCBwb3NpdGlvbiwgc3BlZWQpIHtcbiAgICAgIHZhciBzZWVrID0gYXJndW1lbnRzLmxlbmd0aCA8PSAzIHx8IGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBhcmd1bWVudHNbM107XG5cbiAgICAgIHZhciBsYXN0U3BlZWQgPSB0aGlzLl9fc3BlZWQ7XG5cbiAgICAgIGlmIChzcGVlZCAhPT0gbGFzdFNwZWVkIHx8IHNlZWspIHtcbiAgICAgICAgaWYgKHNlZWsgfHwgbGFzdFNwZWVkICogc3BlZWQgPCAwKSB7XG4gICAgICAgICAgdGhpcy5fX2hhbHQodGltZSk7XG4gICAgICAgICAgdGhpcy5fX3N0YXJ0KHRpbWUsIHBvc2l0aW9uLCBzcGVlZCk7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdFNwZWVkID09PSAwIHx8IHNlZWspIHtcbiAgICAgICAgICB0aGlzLl9fc3RhcnQodGltZSwgcG9zaXRpb24sIHNwZWVkKTtcbiAgICAgICAgfSBlbHNlIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX19oYWx0KHRpbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX19idWZmZXJTb3VyY2UpIHtcbiAgICAgICAgICB0aGlzLl9fYnVmZmVyU291cmNlLnBsYXliYWNrUmF0ZS5zZXRWYWx1ZUF0VGltZShzcGVlZCwgdGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9fc3BlZWQgPSBzcGVlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgd2hldGhlciB0aGUgYXVkaW8gYnVmZmVyIGlzIGNvbnNpZGVyZWQgYXMgY3ljbGljXG4gICAgICogQHBhcmFtIHtCb29sfSBjeWNsaWMgd2hldGhlciB0aGUgYXVkaW8gYnVmZmVyIGlzIGNvbnNpZGVyZWQgYXMgY3ljbGljXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2N5Y2xpYycsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoY3ljbGljKSB7XG4gICAgICBpZiAoY3ljbGljICE9PSB0aGlzLl9fY3ljbGljKSB7XG4gICAgICAgIHZhciB0aW1lID0gdGhpcy5jdXJyZW50VGltZTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5jdXJyZW50b3NpdGlvbjtcblxuICAgICAgICB0aGlzLl9faGFsdCh0aW1lKTtcbiAgICAgICAgdGhpcy5fX2N5Y2xpYyA9IGN5Y2xpYztcblxuICAgICAgICBpZiAodGhpcy5fX3NwZWVkICE9PSAwKSB0aGlzLl9fc3RhcnQodGltZSwgcG9zaXRpb24sIHRoaXMuX19zcGVlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHdoZXRoZXIgdGhlIGF1ZGlvIGJ1ZmZlciBpcyBjb25zaWRlcmVkIGFzIGN5Y2xpY1xuICAgICAqIEByZXR1cm4ge0Jvb2x9IHdoZXRoZXIgdGhlIGF1ZGlvIGJ1ZmZlciBpcyBjb25zaWRlcmVkIGFzIGN5Y2xpY1xuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fY3ljbGljO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBnYWluXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIGxpbmVhciBnYWluIGZhY3RvclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnYWluJyxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgdmFyIHRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lO1xuICAgICAgdGhpcy5fX2dhaW5Ob2RlLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyh0aW1lKTtcbiAgICAgIHRoaXMuX19nYWluTm9kZS5zZXRWYWx1ZUF0VGltZSh0aGlzLl9fZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSwgdGltZSk7XG4gICAgICB0aGlzLl9fZ2Fpbk5vZGUubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoMCwgdGltZSArIHRoaXMuZmFkZVRpbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBnYWluXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBjdXJyZW50IGdhaW5cbiAgICAgKi9cbiAgICAsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2dhaW5Ob2RlLmdhaW4udmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGJ1ZmZlciBkdXJhdGlvblxuICAgICAqIEByZXR1cm4ge051bWJlcn0gY3VycmVudCBidWZmZXIgZHVyYXRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYnVmZmVyRHVyYXRpb24nLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuYnVmZmVyKSByZXR1cm4gdGhpcy5idWZmZXIuZHVyYXRpb247XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUGxheWVyRW5naW5lO1xufShfYXVkaW9UaW1lRW5naW5lMi5kZWZhdWx0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUGxheWVyRW5naW5lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQnNZWGxsY2kxbGJtZHBibVV1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGQlFUczdPenM3TzBGQlJVRXNVMEZCVXl4UlFVRlVMRU5CUVd0Q0xFZEJRV3hDTEVWQlFYVkNMRWRCUVhaQ0xFVkJRVFJDTzBGQlF6RkNMRTFCUVVjc1VVRkJVU3hUUVVGU0xFVkJRMFFzVDBGQlR5eEhRVUZRTEVOQlJFWTdPMEZCUjBFc1UwRkJUeXhIUVVGUUxFTkJTakJDTzBOQlFUVkNPenRKUVU5eFFqczdPMEZCUTI1Q0xGZEJSRzFDTEZsQlEyNUNMRWRCUVRCQ08xRkJRV1FzWjBWQlFWVXNhMEpCUVVrN2QwTkJSRkFzWTBGRFR6czdOa1pCUkZBc2VVSkJSVmdzVVVGQlVTeFpRVUZTTEVkQlJHdENPenRCUVVkNFFpeFZRVUZMTEZOQlFVd3NSMEZCYVVJc1NVRkJha0k3T3pzN096dEJRVWgzUWl4VFFWTjRRaXhEUVVGTExFMUJRVXdzUjBGQll5eFRRVUZUTEZGQlFWRXNUVUZCVWl4RlFVRm5RaXhKUVVGNlFpeERRVUZrT3pzN096czdRVUZVZDBJc1UwRmxlRUlzUTBGQlN5eFJRVUZNTEVkQlFXZENMRk5CUVZNc1VVRkJVU3hSUVVGU0xFVkJRV3RDTEV0QlFUTkNMRU5CUVdoQ0xFTkJabmRDT3p0QlFXbENlRUlzVlVGQlN5eE5RVUZNTEVkQlFXTXNRMEZCWkN4RFFXcENkMEk3UVVGclFuaENMRlZCUVVzc1ZVRkJUQ3hIUVVGclFpeERRVUZzUWl4RFFXeENkMEk3UVVGdFFuaENMRlZCUVVzc1QwRkJUQ3hIUVVGbExFTkJRV1lzUTBGdVFuZENPenRCUVhGQ2VFSXNWVUZCU3l4alFVRk1MRWRCUVhOQ0xFbEJRWFJDTEVOQmNrSjNRanRCUVhOQ2VFSXNWVUZCU3l4VFFVRk1MRWRCUVdsQ0xFbEJRV3BDTEVOQmRFSjNRanM3UVVGM1FuaENMRlZCUVVzc1ZVRkJUQ3hIUVVGclFpeE5RVUZMTEZsQlFVd3NRMEZCYTBJc1ZVRkJiRUlzUlVGQmJFSXNRMEY0UW5kQ08wRkJlVUo0UWl4VlFVRkxMRlZCUVV3c1EwRkJaMElzU1VGQmFFSXNRMEZCY1VJc1MwRkJja0lzUjBGQk5rSXNVMEZCVXl4UlFVRlJMRWxCUVZJc1JVRkJZeXhEUVVGMlFpeERRVUUzUWl4RFFYcENkMEk3TzBGQk1rSjRRaXhWUVVGTExGRkJRVXdzUjBGQlowSXNVMEZCVXl4UlFVRlJMRTFCUVZJc1JVRkJaMElzUzBGQmVrSXNRMEZCYUVJc1EwRXpRbmRDT3p0QlFUWkNlRUlzVlVGQlN5eFZRVUZNTEVkQlFXdENMRTFCUVVzc1ZVRkJUQ3hEUVRkQ1RUczdSMEZCTVVJN096WkNRVVJ0UWpzN05FSkJhVU5ZTEUxQlFVMHNWVUZCVlN4UFFVRlBPMEZCUXpkQ0xGVkJRVWtzWlVGQlpTeExRVUZMTEZsQlFVd3NRMEZFVlRzN1FVRkhOMElzVlVGQlNTeExRVUZMTEUxQlFVd3NSVUZCWVR0QlFVTm1MRmxCUVVrc2FVSkJRV2xDTEV0QlFVc3NUVUZCVEN4RFFVRlpMRkZCUVZvc1EwRkVUanM3UVVGSFppeFpRVUZKTEV0QlFVc3NVVUZCVEN4TFFVRnJRaXhYUVVGWExFTkJRVmdzU1VGQlowSXNXVUZCV1N4alFVRmFMRU5CUVd4RExFVkJRU3RFTzBGQlEycEZMR05CUVVrc1VVRkJVU3hYUVVGWExHTkJRVmdzUTBGRWNVUTdRVUZGYWtVc2NVSkJRVmNzUTBGQlF5eFJRVUZSTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVZnc1EwRkJVaXhEUVVGRUxFZEJRVGhDTEdOQlFUbENMRU5CUm5ORU8xTkJRVzVGT3p0QlFVdEJMRmxCUVVrc1dVRkJXU3hEUVVGYUxFbEJRV2xDTEZkQlFWY3NZMEZCV0N4SlFVRTJRaXhSUVVGUkxFTkJRVklzUlVGQlZ6dEJRVU16UkN4bFFVRkxMRk5CUVV3c1IwRkJhVUlzWVVGQllTeFZRVUZpTEVWQlFXcENMRU5CUkRKRU8wRkJSVE5FTEdWQlFVc3NVMEZCVEN4RFFVRmxMRWxCUVdZc1EwRkJiMElzWTBGQmNFSXNRMEZCYlVNc1EwRkJia01zUlVGQmMwTXNTVUZCZEVNc1JVRkdNa1E3UVVGSE0wUXNaVUZCU3l4VFFVRk1MRU5CUVdVc1NVRkJaaXhEUVVGdlFpeDFRa0ZCY0VJc1EwRkJORU1zUTBGQk5VTXNSVUZCSzBNc1QwRkJUeXhMUVVGTExGRkJRVXdzUTBGQmRFUXNRMEZJTWtRN1FVRkpNMFFzWlVGQlN5eFRRVUZNTEVOQlFXVXNUMEZCWml4RFFVRjFRaXhMUVVGTExGVkJRVXdzUTBGQmRrSXNRMEZLTWtRN08wRkJUVE5FTEdWQlFVc3NZMEZCVEN4SFFVRnpRaXhoUVVGaExHdENRVUZpTEVWQlFYUkNMRU5CVGpKRU8wRkJUek5FTEdWQlFVc3NZMEZCVEN4RFFVRnZRaXhOUVVGd1FpeEhRVUUyUWl4TFFVRkxMRTFCUVV3c1EwRlFPRUk3UVVGUk0wUXNaVUZCU3l4alFVRk1MRU5CUVc5Q0xGbEJRWEJDTEVOQlFXbERMRXRCUVdwRExFZEJRWGxETEV0QlFYcERMRU5CVWpKRU8wRkJVek5FTEdWQlFVc3NZMEZCVEN4RFFVRnZRaXhKUVVGd1FpeEhRVUV5UWl4TFFVRkxMRkZCUVV3c1EwRlVaME03UVVGVk0wUXNaVUZCU3l4alFVRk1MRU5CUVc5Q0xGTkJRWEJDTEVkQlFXZERMRU5CUVdoRExFTkJWakpFTzBGQlZ6TkVMR1ZCUVVzc1kwRkJUQ3hEUVVGdlFpeFBRVUZ3UWl4SFFVRTRRaXhqUVVFNVFpeERRVmd5UkR0QlFWa3pSQ3hsUVVGTExHTkJRVXdzUTBGQmIwSXNTMEZCY0VJc1EwRkJNRUlzU1VGQk1VSXNSVUZCWjBNc1VVRkJhRU1zUlVGYU1rUTdRVUZoTTBRc1pVRkJTeXhqUVVGTUxFTkJRVzlDTEU5QlFYQkNMRU5CUVRSQ0xFdEJRVXNzVTBGQlRDeERRVUUxUWl4RFFXSXlSRHRUUVVFM1JEdFBRVkpHT3pzN096SkNRVEJDU3l4TlFVRk5PMEZCUTFnc1ZVRkJTU3hMUVVGTExHTkJRVXdzUlVGQmNVSTdRVUZEZGtJc1lVRkJTeXhUUVVGTUxFTkJRV1VzU1VGQlppeERRVUZ2UWl4eFFrRkJjRUlzUTBGQk1FTXNTVUZCTVVNc1JVRkVkVUk3UVVGRmRrSXNZVUZCU3l4VFFVRk1MRU5CUVdVc1NVRkJaaXhEUVVGdlFpeGpRVUZ3UWl4RFFVRnRReXhMUVVGTExGTkJRVXdzUTBGQlpTeEpRVUZtTEVOQlFXOUNMRXRCUVhCQ0xFVkJRVEpDTEVsQlFUbEVMRVZCUm5WQ08wRkJSM1pDTEdGQlFVc3NVMEZCVEN4RFFVRmxMRWxCUVdZc1EwRkJiMElzZFVKQlFYQkNMRU5CUVRSRExFTkJRVFZETEVWQlFTdERMRTlCUVU4c1MwRkJTeXhSUVVGTUxFTkJRWFJFTEVOQlNIVkNPMEZCU1haQ0xHRkJRVXNzWTBGQlRDeERRVUZ2UWl4SlFVRndRaXhEUVVGNVFpeFBRVUZQTEV0QlFVc3NVVUZCVEN4RFFVRm9ReXhEUVVwMVFqczdRVUZOZGtJc1lVRkJTeXhqUVVGTUxFZEJRWE5DTEVsQlFYUkNMRU5CVG5WQ08wRkJUM1pDTEdGQlFVc3NVMEZCVEN4SFFVRnBRaXhKUVVGcVFpeERRVkIxUWp0UFFVRjZRanM3T3pzN096czRRa0ZaVVN4TlFVRk5MRlZCUVZVc1QwRkJjVUk3VlVGQlpDdzJSRUZCVHl4eFFrRkJUenM3UVVGRE4wTXNWVUZCU1N4WlFVRlpMRXRCUVVzc1QwRkJUQ3hEUVVRMlFqczdRVUZITjBNc1ZVRkJTU3hWUVVGVkxGTkJRVllzU1VGQmRVSXNTVUZCZGtJc1JVRkJOa0k3UVVGREwwSXNXVUZCU1N4UlFVRlJMRmxCUVZrc1MwRkJXaXhIUVVGdlFpeERRVUZ3UWl4RlFVRjFRanRCUVVOcVF5eGxRVUZMTEUxQlFVd3NRMEZCV1N4SlFVRmFMRVZCUkdsRE8wRkJSV3BETEdWQlFVc3NUMEZCVEN4RFFVRmhMRWxCUVdJc1JVRkJiVUlzVVVGQmJrSXNSVUZCTmtJc1MwRkJOMElzUlVGR2FVTTdVMEZCYmtNc1RVRkhUeXhKUVVGSkxHTkJRV01zUTBGQlpDeEpRVUZ0UWl4SlFVRnVRaXhGUVVGNVFqdEJRVU5zUXl4bFFVRkxMRTlCUVV3c1EwRkJZU3hKUVVGaUxFVkJRVzFDTEZGQlFXNUNMRVZCUVRaQ0xFdEJRVGRDTEVWQlJHdERPMU5CUVRkQ0xFMUJSVUVzU1VGQlNTeFZRVUZWTEVOQlFWWXNSVUZCWVR0QlFVTjBRaXhsUVVGTExFMUJRVXdzUTBGQldTeEpRVUZhTEVWQlJITkNPMU5CUVdwQ0xFMUJSVUVzU1VGQlNTeExRVUZMTEdOQlFVd3NSVUZCY1VJN1FVRkRPVUlzWlVGQlN5eGpRVUZNTEVOQlFXOUNMRmxCUVhCQ0xFTkJRV2xETEdOQlFXcERMRU5CUVdkRUxFdEJRV2hFTEVWQlFYVkVMRWxCUVhaRUxFVkJSRGhDTzFOQlFYcENPenRCUVVsUUxHRkJRVXNzVDBGQlRDeEhRVUZsTEV0QlFXWXNRMEZhSzBJN1QwRkJha003T3pzN096czdPenM3YzBKQmIwSlRMRkZCUVZFN1FVRkRha0lzVlVGQlNTeFhRVUZYTEV0QlFVc3NVVUZCVEN4RlFVRmxPMEZCUXpWQ0xGbEJRVWtzVDBGQlR5eExRVUZMTEZkQlFVd3NRMEZFYVVJN1FVRkZOVUlzV1VGQlNTeFhRVUZYTEV0QlFVc3NZMEZCVEN4RFFVWmhPenRCUVVrMVFpeGhRVUZMTEUxQlFVd3NRMEZCV1N4SlFVRmFMRVZCU2pSQ08wRkJTelZDTEdGQlFVc3NVVUZCVEN4SFFVRm5RaXhOUVVGb1FpeERRVXcwUWpzN1FVRlBOVUlzV1VGQlNTeExRVUZMTEU5QlFVd3NTMEZCYVVJc1EwRkJha0lzUlVGRFJpeExRVUZMTEU5QlFVd3NRMEZCWVN4SlFVRmlMRVZCUVcxQ0xGRkJRVzVDTEVWQlFUWkNMRXRCUVVzc1QwRkJUQ3hEUVVFM1FpeERRVVJHTzA5QlVFWTdPenM3T3pzN08zZENRV2RDVnp0QlFVTllMR0ZCUVU4c1MwRkJTeXhSUVVGTUxFTkJSRWs3T3pzN096czdPenM3YzBKQlVVb3NUMEZCVHp0QlFVTmtMRlZCUVVrc1QwRkJUeXhMUVVGTExGZEJRVXdzUTBGRVJ6dEJRVVZrTEZkQlFVc3NWVUZCVEN4RFFVRm5RaXh4UWtGQmFFSXNRMEZCYzBNc1NVRkJkRU1zUlVGR1l6dEJRVWRrTEZkQlFVc3NWVUZCVEN4RFFVRm5RaXhqUVVGb1FpeERRVUVyUWl4TFFVRkxMRlZCUVV3c1EwRkJaMElzU1VGQmFFSXNRMEZCY1VJc1MwRkJja0lzUlVGQk5FSXNTVUZCTTBRc1JVRklZenRCUVVsa0xGZEJRVXNzVlVGQlRDeERRVUZuUWl4MVFrRkJhRUlzUTBGQmQwTXNRMEZCZUVNc1JVRkJNa01zVDBGQlR5eExRVUZMTEZGQlFVd3NRMEZCYkVRc1EwRktZenM3T3pzN096czdkMEpCVjB3N1FVRkRWQ3hoUVVGUExFdEJRVXNzVlVGQlRDeERRVUZuUWl4SlFVRm9RaXhEUVVGeFFpeExRVUZ5UWl4RFFVUkZPenM3T3pzN096czdPM2RDUVZGVk8wRkJRMjVDTEZWQlFVY3NTMEZCU3l4TlFVRk1MRVZCUTBRc1QwRkJUeXhMUVVGTExFMUJRVXdzUTBGQldTeFJRVUZhTEVOQlJGUTdPMEZCUjBFc1lVRkJUeXhEUVVGUUxFTkJTbTFDT3pzN1UwRTVTVVlpTENKbWFXeGxJam9pY0d4aGVXVnlMV1Z1WjJsdVpTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JCZFdScGIxUnBiV1ZGYm1kcGJtVWdabkp2YlNBbkxpNHZZMjl5WlM5aGRXUnBieTEwYVcxbExXVnVaMmx1WlNjN1hHNWNibVoxYm1OMGFXOXVJRzl3ZEU5eVJHVm1LRzl3ZEN3Z1pHVm1LU0I3WEc0Z0lHbG1LRzl3ZENBaFBUMGdkVzVrWldacGJtVmtLVnh1SUNBZ0lISmxkSFZ5YmlCdmNIUTdYRzVjYmlBZ2NtVjBkWEp1SUdSbFpqdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVR3hoZVdWeVJXNW5hVzVsSUdWNGRHVnVaSE1nUVhWa2FXOVVhVzFsUlc1bmFXNWxJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9iM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJQ0FnYzNWd1pYSW9iM0IwYVc5dWN5NWhkV1JwYjBOdmJuUmxlSFFwTzF4dVhHNGdJQ0FnZEdocGN5NTBjbUZ1YzNCdmNuUWdQU0J1ZFd4c095QXZMeUJ6WlhRZ2QyaGxiaUJoWkdSbFpDQjBieUIwY21GdWMzQnZjblJsY2x4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FYVmthVzhnWW5WbVptVnlYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwRjFaR2x2UW5WbVptVnlmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11WW5WbVptVnlJRDBnYjNCMFQzSkVaV1lvYjNCMGFXOXVjeTVpZFdabVpYSXNJRzUxYkd3cE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbUZrWlNCMGFXMWxJR1p2Y2lCamFHRnBibWx1WnlCelpXZHRaVzUwY3lBb1pTNW5MaUJwYmlCemRHRnlkQ3dnYzNSdmNDd2dZVzVrSUhObFpXc3BYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwRjFaR2x2UW5WbVptVnlmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11Wm1Ga1pWUnBiV1VnUFNCdmNIUlBja1JsWmlodmNIUnBiMjV6TG1aaFpHVlVhVzFsTENBd0xqQXdOU2s3WEc1Y2JpQWdJQ0IwYUdsekxsOWZkR2x0WlNBOUlEQTdYRzRnSUNBZ2RHaHBjeTVmWDNCdmMybDBhVzl1SUQwZ01EdGNiaUFnSUNCMGFHbHpMbDlmYzNCbFpXUWdQU0F3TzF4dVhHNGdJQ0FnZEdocGN5NWZYMkoxWm1abGNsTnZkWEpqWlNBOUlHNTFiR3c3WEc0Z0lDQWdkR2hwY3k1ZlgyVnVkazV2WkdVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnZEdocGN5NWZYMmRoYVc1T2IyUmxJRDBnZEdocGN5NWhkV1JwYjBOdmJuUmxlSFF1WTNKbFlYUmxSMkZwYmlncE8xeHVJQ0FnSUhSb2FYTXVYMTluWVdsdVRtOWtaUzVuWVdsdUxuWmhiSFZsSUQwZ2IzQjBUM0pFWldZb2IzQjBhVzl1Y3k1bllXbHVMQ0F4S1R0Y2JseHVJQ0FnSUhSb2FYTXVYMTlqZVdOc2FXTWdQU0J2Y0hSUGNrUmxaaWh2Y0hScGIyNXpMbU41WTJ4cFl5d2dabUZzYzJVcE8xeHVYRzRnSUNBZ2RHaHBjeTV2ZFhSd2RYUk9iMlJsSUQwZ2RHaHBjeTVmWDJkaGFXNU9iMlJsTzF4dUlDQjlYRzVjYmlBZ1gxOXpkR0Z5ZENoMGFXMWxMQ0J3YjNOcGRHbHZiaXdnYzNCbFpXUXBJSHRjYmlBZ0lDQjJZWElnWVhWa2FXOURiMjUwWlhoMElEMGdkR2hwY3k1aGRXUnBiME52Ym5SbGVIUTdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWlkV1ptWlhJcElIdGNiaUFnSUNBZ0lIWmhjaUJpZFdabVpYSkVkWEpoZEdsdmJpQTlJSFJvYVhNdVluVm1abVZ5TG1SMWNtRjBhVzl1TzF4dVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZlgyTjVZMnhwWXlBbUppQW9jRzl6YVhScGIyNGdQQ0F3SUh4OElIQnZjMmwwYVc5dUlENDlJR0oxWm1abGNrUjFjbUYwYVc5dUtTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NHaGhjMlVnUFNCd2IzTnBkR2x2YmlBdklHSjFabVpsY2tSMWNtRjBhVzl1TzF4dUlDQWdJQ0FnSUNCd2IzTnBkR2x2YmlBOUlDaHdhR0Z6WlNBdElFMWhkR2d1Wm14dmIzSW9jR2hoYzJVcEtTQXFJR0oxWm1abGNrUjFjbUYwYVc5dU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvY0c5emFYUnBiMjRnUGowZ01DQW1KaUJ3YjNOcGRHbHZiaUE4SUdKMVptWmxja1IxY21GMGFXOXVJQ1ltSUhOd1pXVmtJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZlpXNTJUbTlrWlNBOUlHRjFaR2x2UTI5dWRHVjRkQzVqY21WaGRHVkhZV2x1S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5bGJuWk9iMlJsTG1kaGFXNHVjMlYwVm1Gc2RXVkJkRlJwYldVb01Dd2dkR2x0WlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5bGJuWk9iMlJsTG1kaGFXNHViR2x1WldGeVVtRnRjRlJ2Vm1Gc2RXVkJkRlJwYldVb01Td2dkR2x0WlNBcklIUm9hWE11Wm1Ga1pWUnBiV1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlmWlc1MlRtOWtaUzVqYjI1dVpXTjBLSFJvYVhNdVgxOW5ZV2x1VG05a1pTazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMkoxWm1abGNsTnZkWEpqWlNBOUlHRjFaR2x2UTI5dWRHVjRkQzVqY21WaGRHVkNkV1ptWlhKVGIzVnlZMlVvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJKMVptWmxjbE52ZFhKalpTNWlkV1ptWlhJZ1BTQjBhR2x6TG1KMVptWmxjanRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMkoxWm1abGNsTnZkWEpqWlM1d2JHRjVZbUZqYTFKaGRHVXVkbUZzZFdVZ1BTQnpjR1ZsWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJKMVptWmxjbE52ZFhKalpTNXNiMjl3SUQwZ2RHaHBjeTVmWDJONVkyeHBZenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMkoxWm1abGNsTnZkWEpqWlM1c2IyOXdVM1JoY25RZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWZZblZtWm1WeVUyOTFjbU5sTG14dmIzQkZibVFnUFNCaWRXWm1aWEpFZFhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMkoxWm1abGNsTnZkWEpqWlM1emRHRnlkQ2gwYVcxbExDQndiM05wZEdsdmJpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgxOWlkV1ptWlhKVGIzVnlZMlV1WTI5dWJtVmpkQ2gwYUdsekxsOWZaVzUyVG05a1pTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdYMTlvWVd4MEtIUnBiV1VwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmWDJKMVptWmxjbE52ZFhKalpTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlgyVnVkazV2WkdVdVoyRnBiaTVqWVc1alpXeFRZMmhsWkhWc1pXUldZV3gxWlhNb2RHbHRaU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWZaVzUyVG05a1pTNW5ZV2x1TG5ObGRGWmhiSFZsUVhSVWFXMWxLSFJvYVhNdVgxOWxiblpPYjJSbExtZGhhVzR1ZG1Gc2RXVXNJSFJwYldVcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmWDJWdWRrNXZaR1V1WjJGcGJpNXNhVzVsWVhKU1lXMXdWRzlXWVd4MVpVRjBWR2x0WlNnd0xDQjBhVzFsSUNzZ2RHaHBjeTVtWVdSbFZHbHRaU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWZZblZtWm1WeVUyOTFjbU5sTG5OMGIzQW9kR2x0WlNBcklIUm9hWE11Wm1Ga1pWUnBiV1VwTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbDlmWW5WbVptVnlVMjkxY21ObElEMGdiblZzYkR0Y2JpQWdJQ0FnSUhSb2FYTXVYMTlsYm5aT2IyUmxJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZMeUJVYVcxbFJXNW5hVzVsSUcxbGRHaHZaQ0FvYzNCbFpXUXRZMjl1ZEhKdmJHeGxaQ0JwYm5SbGNtWmhZMlVwWEc0Z0lITjVibU5UY0dWbFpDaDBhVzFsTENCd2IzTnBkR2x2Yml3Z2MzQmxaV1FzSUhObFpXc2dQU0JtWVd4elpTa2dlMXh1SUNBZ0lIWmhjaUJzWVhOMFUzQmxaV1FnUFNCMGFHbHpMbDlmYzNCbFpXUTdYRzVjYmlBZ0lDQnBaaUFvYzNCbFpXUWdJVDA5SUd4aGMzUlRjR1ZsWkNCOGZDQnpaV1ZyS1NCN1hHNGdJQ0FnSUNCcFppQW9jMlZsYXlCOGZDQnNZWE4wVTNCbFpXUWdLaUJ6Y0dWbFpDQThJREFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJoaGJIUW9kR2x0WlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDE5emRHRnlkQ2gwYVcxbExDQndiM05wZEdsdmJpd2djM0JsWldRcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHNZWE4wVTNCbFpXUWdQVDA5SURBZ2ZId2djMlZsYXlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZmMzUmhjblFvZEdsdFpTd2djRzl6YVhScGIyNHNJSE53WldWa0tUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jM0JsWldRZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJoaGJIUW9kR2x0WlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11WDE5aWRXWm1aWEpUYjNWeVkyVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMkoxWm1abGNsTnZkWEpqWlM1d2JHRjVZbUZqYTFKaGRHVXVjMlYwVm1Gc2RXVkJkRlJwYldVb2MzQmxaV1FzSUhScGJXVXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IwYUdsekxsOWZjM0JsWldRZ1BTQnpjR1ZsWkR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBJSGRvWlhSb1pYSWdkR2hsSUdGMVpHbHZJR0oxWm1abGNpQnBjeUJqYjI1emFXUmxjbVZrSUdGeklHTjVZMnhwWTF4dUlDQWdLaUJBY0dGeVlXMGdlMEp2YjJ4OUlHTjVZMnhwWXlCM2FHVjBhR1Z5SUhSb1pTQmhkV1JwYnlCaWRXWm1aWElnYVhNZ1kyOXVjMmxrWlhKbFpDQmhjeUJqZVdOc2FXTmNiaUFnSUNvdlhHNGdJSE5sZENCamVXTnNhV01vWTNsamJHbGpLU0I3WEc0Z0lDQWdhV1lnS0dONVkyeHBZeUFoUFQwZ2RHaHBjeTVmWDJONVkyeHBZeWtnZTF4dUlDQWdJQ0FnZG1GeUlIUnBiV1VnUFNCMGFHbHpMbU4xY25KbGJuUlVhVzFsTzF4dUlDQWdJQ0FnZG1GeUlIQnZjMmwwYVc5dUlEMGdkR2hwY3k1amRYSnlaVzUwYjNOcGRHbHZianRjYmx4dUlDQWdJQ0FnZEdocGN5NWZYMmhoYkhRb2RHbHRaU2s3WEc0Z0lDQWdJQ0IwYUdsekxsOWZZM2xqYkdsaklEMGdZM2xqYkdsak8xeHVYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZYM053WldWa0lDRTlQU0F3S1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbDlmYzNSaGNuUW9kR2x0WlN3Z2NHOXphWFJwYjI0c0lIUm9hWE11WDE5emNHVmxaQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVkbGRDQjNhR1YwYUdWeUlIUm9aU0JoZFdScGJ5QmlkV1ptWlhJZ2FYTWdZMjl1YzJsa1pYSmxaQ0JoY3lCamVXTnNhV05jYmlBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkgwZ2QyaGxkR2hsY2lCMGFHVWdZWFZrYVc4Z1luVm1abVZ5SUdseklHTnZibk5wWkdWeVpXUWdZWE1nWTNsamJHbGpYRzRnSUNBcUwxeHVJQ0JuWlhRZ1kzbGpiR2xqS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWZZM2xqYkdsak8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZENCbllXbHVYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMllXeDFaU0JzYVc1bFlYSWdaMkZwYmlCbVlXTjBiM0pjYmlBZ0lDb3ZYRzRnSUhObGRDQm5ZV2x1S0haaGJIVmxLU0I3WEc0Z0lDQWdkbUZ5SUhScGJXVWdQU0IwYUdsekxtTjFjbkpsYm5SVWFXMWxPMXh1SUNBZ0lIUm9hWE11WDE5bllXbHVUbTlrWlM1allXNWpaV3hUWTJobFpIVnNaV1JXWVd4MVpYTW9kR2x0WlNrN1hHNGdJQ0FnZEdocGN5NWZYMmRoYVc1T2IyUmxMbk5sZEZaaGJIVmxRWFJVYVcxbEtIUm9hWE11WDE5bllXbHVUbTlrWlM1bllXbHVMblpoYkhWbExDQjBhVzFsS1R0Y2JpQWdJQ0IwYUdsekxsOWZaMkZwYms1dlpHVXViR2x1WldGeVVtRnRjRlJ2Vm1Gc2RXVkJkRlJwYldVb01Dd2dkR2x0WlNBcklIUm9hWE11Wm1Ga1pWUnBiV1VwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkQ0JuWVdsdVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTA1MWJXSmxjbjBnWTNWeWNtVnVkQ0JuWVdsdVhHNGdJQ0FxTDF4dUlDQm5aWFFnWjJGcGJpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDJkaGFXNU9iMlJsTG1kaGFXNHVkbUZzZFdVN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSMlYwSUdKMVptWmxjaUJrZFhKaGRHbHZibHh1SUNBZ0tpQkFjbVYwZFhKdUlIdE9kVzFpWlhKOUlHTjFjbkpsYm5RZ1luVm1abVZ5SUdSMWNtRjBhVzl1WEc0Z0lDQXFMMXh1SUNCblpYUWdZblZtWm1WeVJIVnlZWFJwYjI0b0tTQjdYRzRnSUNBZ2FXWW9kR2hwY3k1aWRXWm1aWElwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aWRXWm1aWEl1WkhWeVlYUnBiMjQ3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdNRHRjYmlBZ2ZWeHVmVnh1SWwxOVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93YXZlcy1hdWRpby9kaXN0L2VuZ2luZXMvcGxheWVyLWVuZ2luZS5qc1xuLy8gbW9kdWxlIGlkID0gMTM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(9);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _audioTimeEngine = __webpack_require__(23);\n\nvar _audioTimeEngine2 = _interopRequireDefault(_audioTimeEngine);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction optOrDef(opt, def) {\n  if (opt !== undefined) return opt;\n\n  return def;\n}\n\nfunction getCurrentOrPreviousIndex(sortedArray, value) {\n  var index = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n  var size = sortedArray.length;\n\n  if (size > 0) {\n    var firstVal = sortedArray[0];\n    var lastVal = sortedArray[size - 1];\n\n    if (value < firstVal) index = -1;else if (value >= lastVal) index = size - 1;else {\n      if (index < 0 || index >= size) index = Math.floor((size - 1) * (value - firstVal) / (lastVal - firstVal));\n\n      while (sortedArray[index] > value) {\n        index--;\n      }while (sortedArray[index + 1] <= value) {\n        index++;\n      }\n    }\n  }\n\n  return index;\n}\n\nfunction getCurrentOrNextIndex(sortedArray, value) {\n  var index = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n  var size = sortedArray.length;\n\n  if (size > 0) {\n    var firstVal = sortedArray[0];\n    var lastVal = sortedArray[size - 1];\n\n    if (value <= firstVal) index = 0;else if (value >= lastVal) index = size;else {\n      if (index < 0 || index >= size) index = Math.floor((size - 1) * (value - firstVal) / (lastVal - firstVal));\n\n      while (sortedArray[index] < value) {\n        index++;\n      }while (sortedArray[index + 1] >= value) {\n        index--;\n      }\n    }\n  }\n\n  return index;\n}\n\n/**\n * @class SegmentEngine\n */\n\nvar SegmentEngine = function (_AudioTimeEngine) {\n  (0, _inherits3.default)(SegmentEngine, _AudioTimeEngine);\n\n  /**\n   * @constructor\n   * @param {AudioBuffer} buffer initial audio buffer for granular synthesis\n   *\n   * The engine implements the \"scheduled\" and \"transported\" interfaces.\n   * When \"scheduled\", the engine  generates segments more or less periodically\n   * (controlled by the periodAbs, periodRel, and perioVar attributes).\n   * When \"transported\", the engine generates segments at the position of their onset time.\n   */\n\n  function SegmentEngine() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    (0, _classCallCheck3.default)(this, SegmentEngine);\n\n\n    /**\n     * Audio buffer\n     * @type {AudioBuffer}\n     */\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(SegmentEngine).call(this, options.audioContext));\n\n    _this.buffer = optOrDef(options.buffer, null);\n\n    /**\n     * Absolute segment period in sec\n     * @type {Number}\n     */\n    _this.periodAbs = optOrDef(options.periodAbs, 0);\n\n    /**\n     * Segment period relative to inter-segment distance\n     * @type {Number}\n     */\n    _this.periodRel = optOrDef(options.periodRel, 1);\n\n    /**\n     * Amout of random segment period variation relative to segment period\n     * @type {Number}\n     */\n    _this.periodVar = optOrDef(options.periodVar, 0);\n\n    /**\n     * Array of segment positions (onset times in audio buffer) in sec\n     * @type {Number}\n     */\n    _this.positionArray = optOrDef(options.positionArray, [0.0]);\n\n    /**\n     * Amout of random segment position variation in sec\n     * @type {Number}\n     */\n    _this.positionVar = optOrDef(options.positionVar, 0);\n\n    /**\n     * Array of segment durations in sec\n     * @type {Number}\n     */\n    _this.durationArray = optOrDef(options.durationArray, [0.0]);\n\n    /**\n     * Absolute segment duration in sec\n     * @type {Number}\n     */\n    _this.durationAbs = optOrDef(options.durationAbs, 0);\n\n    /**\n     * Segment duration relative to given segment duration or inter-segment distance\n     * @type {Number}\n     */\n    _this.durationRel = optOrDef(options.durationRel, 1);\n\n    /**\n     * Array of segment offsets in sec\n     * @type {Number}\n     *\n     * offset > 0: the segment's reference position is after the given segment position\n     * offset < 0: the given segment position is the segment's reference position and the duration has to be corrected by the offset\n     */\n    _this.offsetArray = optOrDef(options.offsetArray, [0.0]);\n\n    /**\n     * Absolute segment offset in sec\n     * @type {Number}\n     */\n    _this.offsetAbs = optOrDef(options.offsetAbs, -0.005);\n\n    /**\n     * Segment offset relative to segment duration\n     * @type {Number}\n     */\n    _this.offsetRel = optOrDef(options.offsetRel, 0);\n\n    /**\n     * Time by which all segments are delayed (especially to realize segment offsets)\n     * @type {Number}\n     */\n    _this.delay = optOrDef(options.delay, 0.005);\n\n    /**\n     * Absolute attack time in sec\n     * @type {Number}\n     */\n    _this.attackAbs = optOrDef(options.attackAbs, 0.005);\n\n    /**\n     * Attack time relative to segment duration\n     * @type {Number}\n     */\n    _this.attackRel = optOrDef(options.attackRel, 0);\n\n    /**\n     * Absolute release time in sec\n     * @type {Number}\n     */\n    _this.releaseAbs = optOrDef(options.releaseAbs, 0.005);\n\n    /**\n     * Release time relative to segment duration\n     * @type {Number}\n     */\n    _this.releaseRel = optOrDef(options.releaseRel, 0);\n\n    /**\n     * Segment resampling in cent\n     * @type {Number}\n     */\n    _this.resampling = optOrDef(options.resampling, 0);\n\n    /**\n     * Amout of random resampling variation in cent\n     * @type {Number}\n     */\n    _this.resamplingVar = optOrDef(options.resamplingVar, 0);\n\n    /**\n     * Linear gain factor\n     * @type {Number}\n     */\n    _this.gain = optOrDef(options.gain, 1);\n\n    /**\n     * Index of the segment to synthesize (i.e. of this.positionArray/durationArray/offsetArray)\n     * @type {Number}\n     */\n    _this.segmentIndex = optOrDef(options.segmentIndex, 0);\n\n    /**\n     * Whether the audio buffer and segment indices are considered as cyclic\n     * @type {Bool}\n     */\n    _this.cyclic = optOrDef(options.cyclic, false);\n    _this.__cyclicOffset = 0;\n\n    /**\n     * Portion at the end of the audio buffer that has been copied from the beginning to assure cyclic behavior\n     * @type {Number}\n     */\n    _this.wrapAroundExtension = optOrDef(options.wrapAroundExtension, 0);\n\n    _this.outputNode = _this.audioContext.createGain();\n    return _this;\n  }\n\n  /**\n   * Get buffer duration (excluding wrapAroundExtension)\n   * @return {Number} current buffer duration\n   */\n\n\n  (0, _createClass3.default)(SegmentEngine, [{\n    key: 'advanceTime',\n\n\n    // TimeEngine method (transported interface)\n    value: function advanceTime(time) {\n      time = Math.max(time, this.audioContext.currentTime);\n      return time + this.trigger(time);\n    }\n\n    // TimeEngine method (transported interface)\n\n  }, {\n    key: 'syncPosition',\n    value: function syncPosition(time, position, speed) {\n      var index = this.segmentIndex;\n      var cyclicOffset = 0;\n      var bufferDuration = this.bufferDuration;\n\n      if (this.cyclic) {\n        var cycles = position / bufferDuration;\n\n        cyclicOffset = Math.floor(cycles) * bufferDuration;\n        position -= cyclicOffset;\n      }\n\n      if (speed > 0) {\n        index = getCurrentOrNextIndex(this.positionArray, position);\n\n        if (index >= this.positionArray.length) {\n          index = 0;\n          cyclicOffset += bufferDuration;\n\n          if (!this.cyclic) return Infinity;\n        }\n      } else if (speed < 0) {\n        index = getCurrentOrPreviousIndex(this.positionArray, position);\n\n        if (index < 0) {\n          index = this.positionArray.length - 1;\n          cyclicOffset -= bufferDuration;\n\n          if (!this.cyclic) return -Infinity;\n        }\n      } else {\n        return Infinity;\n      }\n\n      this.segmentIndex = index;\n      this.__cyclicOffset = cyclicOffset;\n\n      return cyclicOffset + this.positionArray[index];\n    }\n\n    // TimeEngine method (transported interface)\n\n  }, {\n    key: 'advancePosition',\n    value: function advancePosition(time, position, speed) {\n      var index = this.segmentIndex;\n      var cyclicOffset = this.__cyclicOffset;\n\n      this.trigger(time);\n\n      if (speed > 0) {\n        index++;\n\n        if (index >= this.positionArray.length) {\n          index = 0;\n          cyclicOffset += this.bufferDuration;\n\n          if (!this.cyclic) return Infinity;\n        }\n      } else {\n        index--;\n\n        if (index < 0) {\n          index = this.positionArray.length - 1;\n          cyclicOffset -= this.bufferDuration;\n\n          if (!this.cyclic) return -Infinity;\n        }\n      }\n\n      this.segmentIndex = index;\n      this.__cyclicOffset = cyclicOffset;\n\n      return cyclicOffset + this.positionArray[index];\n    }\n\n    /**\n     * Trigger a segment\n     * @param {Number} time segment synthesis audio time\n     * @return {Number} period to next segment\n     *\n     * This function can be called at any time (whether the engine is scheduled/transported or not)\n     * to generate a single segment according to the current segment parameters.\n     */\n\n  }, {\n    key: 'trigger',\n    value: function trigger(time) {\n      var audioContext = this.audioContext;\n      var segmentTime = (time || audioContext.currentTime) + this.delay;\n      var segmentPeriod = this.periodAbs;\n      var segmentIndex = this.segmentIndex;\n\n      if (this.buffer) {\n        var segmentPosition = 0.0;\n        var segmentDuration = 0.0;\n        var segmentOffset = 0.0;\n        var resamplingRate = 1.0;\n        var bufferDuration = this.bufferDuration;\n\n        if (this.cyclic) segmentIndex = segmentIndex % this.positionArray.length;else segmentIndex = Math.max(0, Math.min(segmentIndex, this.positionArray.length - 1));\n\n        if (this.positionArray) segmentPosition = this.positionArray[segmentIndex] || 0;\n\n        if (this.durationArray) segmentDuration = this.durationArray[segmentIndex] || 0;\n\n        if (this.offsetArray) segmentOffset = this.offsetArray[segmentIndex] || 0;\n\n        // calculate resampling\n        if (this.resampling !== 0 || this.resamplingVar > 0) {\n          var randomResampling = (Math.random() - 0.5) * 2.0 * this.resamplingVar;\n          resamplingRate = Math.pow(2.0, (this.resampling + randomResampling) / 1200.0);\n        }\n\n        // calculate inter-segment distance\n        if (segmentDuration === 0 || this.periodRel > 0) {\n          var nextSegementIndex = segmentIndex + 1;\n          var nextPosition, nextOffset;\n\n          if (nextSegementIndex === this.positionArray.length) {\n            if (this.cyclic) {\n              nextPosition = this.positionArray[0] + bufferDuration;\n              nextOffset = this.offsetArray[0];\n            } else {\n              nextPosition = bufferDuration;\n              nextOffset = 0;\n            }\n          } else {\n            nextPosition = this.positionArray[nextSegementIndex];\n            nextOffset = this.offsetArray[nextSegementIndex];\n          }\n\n          var interSegmentDistance = nextPosition - segmentPosition;\n\n          // correct inter-segment distance by offsets\n          //   offset > 0: the segment's reference position is after the given segment position\n          if (segmentOffset > 0) interSegmentDistance -= segmentOffset;\n\n          if (nextOffset > 0) interSegmentDistance += nextOffset;\n\n          if (interSegmentDistance < 0) interSegmentDistance = 0;\n\n          // use inter-segment distance instead of segment duration\n          if (segmentDuration === 0) segmentDuration = interSegmentDistance;\n\n          // calculate period relative to inter marker distance\n          segmentPeriod += this.periodRel * interSegmentDistance;\n        }\n\n        // add relative and absolute segment duration\n        segmentDuration *= this.durationRel;\n        segmentDuration += this.durationAbs;\n\n        // add relative and absolute segment offset\n        segmentOffset *= this.offsetRel;\n        segmentOffset += this.offsetAbs;\n\n        // apply segment offset\n        //   offset > 0: the segment's reference position is after the given segment position\n        //   offset < 0: the given segment position is the segment's reference position and the duration has to be corrected by the offset\n        if (segmentOffset < 0) {\n          segmentDuration -= segmentOffset;\n          segmentPosition += segmentOffset;\n          segmentTime += segmentOffset / resamplingRate;\n        } else {\n          segmentTime -= segmentOffset / resamplingRate;\n        }\n\n        // randomize segment position\n        if (this.positionVar > 0) segmentPosition += 2.0 * (Math.random() - 0.5) * this.positionVar;\n\n        // shorten duration of segments over the edges of the buffer\n        if (segmentPosition < 0) {\n          //segmentTime -= grainPosition; hm, not sure if we want to do this\n          segmentDuration += segmentPosition;\n          segmentPosition = 0;\n        }\n\n        if (segmentPosition + segmentDuration > this.buffer.duration) segmentDuration = this.buffer.duration - segmentPosition;\n\n        segmentDuration /= resamplingRate;\n\n        // make segment\n        if (this.gain > 0 && segmentDuration > 0) {\n          // make segment envelope\n          var envelope = audioContext.createGain();\n          var attack = this.attackAbs + this.attackRel * segmentDuration;\n          var release = this.releaseAbs + this.releaseRel * segmentDuration;\n\n          if (attack + release > segmentDuration) {\n            var factor = segmentDuration / (attack + release);\n            attack *= factor;\n            release *= factor;\n          }\n\n          var attackEndTime = segmentTime + attack;\n          var segmentEndTime = segmentTime + segmentDuration;\n          var releaseStartTime = segmentEndTime - release;\n\n          envelope.gain.value = 0;\n          envelope.gain.setValueAtTime(0.0, segmentTime);\n          envelope.gain.linearRampToValueAtTime(this.gain, attackEndTime);\n\n          if (releaseStartTime > attackEndTime) envelope.gain.setValueAtTime(this.gain, releaseStartTime);\n\n          envelope.gain.linearRampToValueAtTime(0.0, segmentEndTime);\n          envelope.connect(this.outputNode);\n\n          // make source\n          var source = audioContext.createBufferSource();\n\n          source.buffer = this.buffer;\n          source.playbackRate.value = resamplingRate;\n          source.connect(envelope);\n\n          source.start(segmentTime, segmentPosition);\n          source.stop(segmentTime + segmentDuration);\n        }\n      }\n\n      return segmentPeriod;\n    }\n  }, {\n    key: 'bufferDuration',\n    get: function get() {\n      if (this.buffer) {\n        var bufferDuration = this.buffer.duration;\n\n        if (this.wrapAroundExtension) bufferDuration -= this.wrapAroundExtension;\n\n        return bufferDuration;\n      }\n\n      return 0;\n    }\n  }]);\n  return SegmentEngine;\n}(_audioTimeEngine2.default);\n\nexports.default = SegmentEngine;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlZ21lbnQtZW5naW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7OztBQUVBLFNBQVMsUUFBVCxDQUFrQixHQUFsQixFQUF1QixHQUF2QixFQUE0QjtBQUMxQixNQUFHLFFBQVEsU0FBUixFQUNELE9BQU8sR0FBUCxDQURGOztBQUdBLFNBQU8sR0FBUCxDQUowQjtDQUE1Qjs7QUFPQSxTQUFTLHlCQUFULENBQW1DLFdBQW5DLEVBQWdELEtBQWhELEVBQWtFO01BQVgsOERBQVEsaUJBQUc7O0FBQ2hFLE1BQUksT0FBTyxZQUFZLE1BQVosQ0FEcUQ7O0FBR2hFLE1BQUksT0FBTyxDQUFQLEVBQVU7QUFDWixRQUFJLFdBQVcsWUFBWSxDQUFaLENBQVgsQ0FEUTtBQUVaLFFBQUksVUFBVSxZQUFZLE9BQU8sQ0FBUCxDQUF0QixDQUZROztBQUlaLFFBQUksUUFBUSxRQUFSLEVBQ0YsUUFBUSxDQUFDLENBQUQsQ0FEVixLQUVLLElBQUksU0FBUyxPQUFULEVBQ1AsUUFBUSxPQUFPLENBQVAsQ0FETCxLQUVBO0FBQ0gsVUFBSSxRQUFRLENBQVIsSUFBYSxTQUFTLElBQVQsRUFDZixRQUFRLEtBQUssS0FBTCxDQUFXLENBQUMsT0FBTyxDQUFQLENBQUQsSUFBYyxRQUFRLFFBQVIsQ0FBZCxJQUFtQyxVQUFVLFFBQVYsQ0FBbkMsQ0FBbkIsQ0FERjs7QUFHQSxhQUFPLFlBQVksS0FBWixJQUFxQixLQUFyQjtBQUNMO09BREYsT0FHTyxZQUFZLFFBQVEsQ0FBUixDQUFaLElBQTBCLEtBQTFCO0FBQ0w7T0FERjtLQVRHO0dBTlA7O0FBb0JBLFNBQU8sS0FBUCxDQXZCZ0U7Q0FBbEU7O0FBMEJBLFNBQVMscUJBQVQsQ0FBK0IsV0FBL0IsRUFBNEMsS0FBNUMsRUFBOEQ7TUFBWCw4REFBUSxpQkFBRzs7QUFDNUQsTUFBSSxPQUFPLFlBQVksTUFBWixDQURpRDs7QUFHNUQsTUFBSSxPQUFPLENBQVAsRUFBVTtBQUNaLFFBQUksV0FBVyxZQUFZLENBQVosQ0FBWCxDQURRO0FBRVosUUFBSSxVQUFVLFlBQVksT0FBTyxDQUFQLENBQXRCLENBRlE7O0FBSVosUUFBSSxTQUFTLFFBQVQsRUFDRixRQUFRLENBQVIsQ0FERixLQUVLLElBQUksU0FBUyxPQUFULEVBQ1AsUUFBUSxJQUFSLENBREcsS0FFQTtBQUNILFVBQUksUUFBUSxDQUFSLElBQWEsU0FBUyxJQUFULEVBQ2YsUUFBUSxLQUFLLEtBQUwsQ0FBVyxDQUFDLE9BQU8sQ0FBUCxDQUFELElBQWMsUUFBUSxRQUFSLENBQWQsSUFBbUMsVUFBVSxRQUFWLENBQW5DLENBQW5CLENBREY7O0FBR0EsYUFBTyxZQUFZLEtBQVosSUFBcUIsS0FBckI7QUFDTDtPQURGLE9BR08sWUFBWSxRQUFRLENBQVIsQ0FBWixJQUEwQixLQUExQjtBQUNMO09BREY7S0FURztHQU5QOztBQW9CQSxTQUFPLEtBQVAsQ0F2QjREO0NBQTlEOzs7Ozs7SUE2QnFCOzs7Ozs7Ozs7Ozs7O0FBVW5CLFdBVm1CLGFBVW5CLEdBQTBCO1FBQWQsZ0VBQVUsa0JBQUk7d0NBVlAsZUFVTzs7Ozs7Ozs7NkZBVlAsMEJBV1gsUUFBUSxZQUFSLEdBRGtCOztBQU94QixVQUFLLE1BQUwsR0FBYyxTQUFTLFFBQVEsTUFBUixFQUFnQixJQUF6QixDQUFkOzs7Ozs7QUFQd0IsU0FheEIsQ0FBSyxTQUFMLEdBQWlCLFNBQVMsUUFBUSxTQUFSLEVBQW1CLENBQTVCLENBQWpCOzs7Ozs7QUFid0IsU0FtQnhCLENBQUssU0FBTCxHQUFpQixTQUFTLFFBQVEsU0FBUixFQUFtQixDQUE1QixDQUFqQjs7Ozs7O0FBbkJ3QixTQXlCeEIsQ0FBSyxTQUFMLEdBQWlCLFNBQVMsUUFBUSxTQUFSLEVBQW1CLENBQTVCLENBQWpCOzs7Ozs7QUF6QndCLFNBK0J4QixDQUFLLGFBQUwsR0FBcUIsU0FBUyxRQUFRLGFBQVIsRUFBdUIsQ0FBQyxHQUFELENBQWhDLENBQXJCOzs7Ozs7QUEvQndCLFNBcUN4QixDQUFLLFdBQUwsR0FBbUIsU0FBUyxRQUFRLFdBQVIsRUFBcUIsQ0FBOUIsQ0FBbkI7Ozs7OztBQXJDd0IsU0EyQ3hCLENBQUssYUFBTCxHQUFxQixTQUFTLFFBQVEsYUFBUixFQUF1QixDQUFDLEdBQUQsQ0FBaEMsQ0FBckI7Ozs7OztBQTNDd0IsU0FpRHhCLENBQUssV0FBTCxHQUFtQixTQUFTLFFBQVEsV0FBUixFQUFxQixDQUE5QixDQUFuQjs7Ozs7O0FBakR3QixTQXVEeEIsQ0FBSyxXQUFMLEdBQW1CLFNBQVMsUUFBUSxXQUFSLEVBQXFCLENBQTlCLENBQW5COzs7Ozs7Ozs7QUF2RHdCLFNBZ0V4QixDQUFLLFdBQUwsR0FBbUIsU0FBUyxRQUFRLFdBQVIsRUFBcUIsQ0FBQyxHQUFELENBQTlCLENBQW5COzs7Ozs7QUFoRXdCLFNBc0V4QixDQUFLLFNBQUwsR0FBaUIsU0FBUyxRQUFRLFNBQVIsRUFBbUIsQ0FBQyxLQUFELENBQTdDOzs7Ozs7QUF0RXdCLFNBNEV4QixDQUFLLFNBQUwsR0FBaUIsU0FBUyxRQUFRLFNBQVIsRUFBbUIsQ0FBNUIsQ0FBakI7Ozs7OztBQTVFd0IsU0FrRnhCLENBQUssS0FBTCxHQUFhLFNBQVMsUUFBUSxLQUFSLEVBQWUsS0FBeEIsQ0FBYjs7Ozs7O0FBbEZ3QixTQXdGeEIsQ0FBSyxTQUFMLEdBQWlCLFNBQVMsUUFBUSxTQUFSLEVBQW1CLEtBQTVCLENBQWpCOzs7Ozs7QUF4RndCLFNBOEZ4QixDQUFLLFNBQUwsR0FBaUIsU0FBUyxRQUFRLFNBQVIsRUFBbUIsQ0FBNUIsQ0FBakI7Ozs7OztBQTlGd0IsU0FvR3hCLENBQUssVUFBTCxHQUFrQixTQUFTLFFBQVEsVUFBUixFQUFvQixLQUE3QixDQUFsQjs7Ozs7O0FBcEd3QixTQTBHeEIsQ0FBSyxVQUFMLEdBQWtCLFNBQVMsUUFBUSxVQUFSLEVBQW9CLENBQTdCLENBQWxCOzs7Ozs7QUExR3dCLFNBZ0h4QixDQUFLLFVBQUwsR0FBa0IsU0FBUyxRQUFRLFVBQVIsRUFBb0IsQ0FBN0IsQ0FBbEI7Ozs7OztBQWhId0IsU0FzSHhCLENBQUssYUFBTCxHQUFxQixTQUFTLFFBQVEsYUFBUixFQUF1QixDQUFoQyxDQUFyQjs7Ozs7O0FBdEh3QixTQTRIeEIsQ0FBSyxJQUFMLEdBQVksU0FBUyxRQUFRLElBQVIsRUFBYyxDQUF2QixDQUFaOzs7Ozs7QUE1SHdCLFNBa0l4QixDQUFLLFlBQUwsR0FBb0IsU0FBUyxRQUFRLFlBQVIsRUFBc0IsQ0FBL0IsQ0FBcEI7Ozs7OztBQWxJd0IsU0F3SXhCLENBQUssTUFBTCxHQUFjLFNBQVMsUUFBUSxNQUFSLEVBQWdCLEtBQXpCLENBQWQsQ0F4SXdCO0FBeUl4QixVQUFLLGNBQUwsR0FBc0IsQ0FBdEI7Ozs7OztBQXpJd0IsU0ErSXhCLENBQUssbUJBQUwsR0FBMkIsU0FBUyxRQUFRLG1CQUFSLEVBQTZCLENBQXRDLENBQTNCLENBL0l3Qjs7QUFpSnhCLFVBQUssVUFBTCxHQUFrQixNQUFLLFlBQUwsQ0FBa0IsVUFBbEIsRUFBbEIsQ0FqSndCOztHQUExQjs7Ozs7Ozs7NkJBVm1COzs7OztnQ0FnTFAsTUFBTTtBQUNoQixhQUFPLEtBQUssR0FBTCxDQUFTLElBQVQsRUFBZSxLQUFLLFlBQUwsQ0FBa0IsV0FBbEIsQ0FBdEIsQ0FEZ0I7QUFFaEIsYUFBTyxPQUFPLEtBQUssT0FBTCxDQUFhLElBQWIsQ0FBUCxDQUZTOzs7Ozs7O2lDQU1MLE1BQU0sVUFBVSxPQUFPO0FBQ2xDLFVBQUksUUFBUSxLQUFLLFlBQUwsQ0FEc0I7QUFFbEMsVUFBSSxlQUFlLENBQWYsQ0FGOEI7QUFHbEMsVUFBSSxpQkFBaUIsS0FBSyxjQUFMLENBSGE7O0FBS2xDLFVBQUksS0FBSyxNQUFMLEVBQWE7QUFDZixZQUFJLFNBQVMsV0FBVyxjQUFYLENBREU7O0FBR2YsdUJBQWUsS0FBSyxLQUFMLENBQVcsTUFBWCxJQUFxQixjQUFyQixDQUhBO0FBSWYsb0JBQVksWUFBWixDQUplO09BQWpCOztBQU9BLFVBQUksUUFBUSxDQUFSLEVBQVc7QUFDYixnQkFBUSxzQkFBc0IsS0FBSyxhQUFMLEVBQW9CLFFBQTFDLENBQVIsQ0FEYTs7QUFHYixZQUFJLFNBQVMsS0FBSyxhQUFMLENBQW1CLE1BQW5CLEVBQTJCO0FBQ3RDLGtCQUFRLENBQVIsQ0FEc0M7QUFFdEMsMEJBQWdCLGNBQWhCLENBRnNDOztBQUl0QyxjQUFJLENBQUMsS0FBSyxNQUFMLEVBQ0gsT0FBTyxRQUFQLENBREY7U0FKRjtPQUhGLE1BVU8sSUFBSSxRQUFRLENBQVIsRUFBVztBQUNwQixnQkFBUSwwQkFBMEIsS0FBSyxhQUFMLEVBQW9CLFFBQTlDLENBQVIsQ0FEb0I7O0FBR3BCLFlBQUksUUFBUSxDQUFSLEVBQVc7QUFDYixrQkFBUSxLQUFLLGFBQUwsQ0FBbUIsTUFBbkIsR0FBNEIsQ0FBNUIsQ0FESztBQUViLDBCQUFnQixjQUFoQixDQUZhOztBQUliLGNBQUksQ0FBQyxLQUFLLE1BQUwsRUFDSCxPQUFPLENBQUMsUUFBRCxDQURUO1NBSkY7T0FISyxNQVVBO0FBQ0wsZUFBTyxRQUFQLENBREs7T0FWQTs7QUFjUCxXQUFLLFlBQUwsR0FBb0IsS0FBcEIsQ0FwQ2tDO0FBcUNsQyxXQUFLLGNBQUwsR0FBc0IsWUFBdEIsQ0FyQ2tDOztBQXVDbEMsYUFBTyxlQUFlLEtBQUssYUFBTCxDQUFtQixLQUFuQixDQUFmLENBdkMyQjs7Ozs7OztvQ0EyQ3BCLE1BQU0sVUFBVSxPQUFPO0FBQ3JDLFVBQUksUUFBUSxLQUFLLFlBQUwsQ0FEeUI7QUFFckMsVUFBSSxlQUFlLEtBQUssY0FBTCxDQUZrQjs7QUFJckMsV0FBSyxPQUFMLENBQWEsSUFBYixFQUpxQzs7QUFNckMsVUFBSSxRQUFRLENBQVIsRUFBVztBQUNiLGdCQURhOztBQUdiLFlBQUksU0FBUyxLQUFLLGFBQUwsQ0FBbUIsTUFBbkIsRUFBMkI7QUFDdEMsa0JBQVEsQ0FBUixDQURzQztBQUV0QywwQkFBZ0IsS0FBSyxjQUFMLENBRnNCOztBQUl0QyxjQUFJLENBQUMsS0FBSyxNQUFMLEVBQ0gsT0FBTyxRQUFQLENBREY7U0FKRjtPQUhGLE1BVU87QUFDTCxnQkFESzs7QUFHTCxZQUFJLFFBQVEsQ0FBUixFQUFXO0FBQ2Isa0JBQVEsS0FBSyxhQUFMLENBQW1CLE1BQW5CLEdBQTRCLENBQTVCLENBREs7QUFFYiwwQkFBZ0IsS0FBSyxjQUFMLENBRkg7O0FBSWIsY0FBSSxDQUFDLEtBQUssTUFBTCxFQUNILE9BQU8sQ0FBQyxRQUFELENBRFQ7U0FKRjtPQWJGOztBQXNCQSxXQUFLLFlBQUwsR0FBb0IsS0FBcEIsQ0E1QnFDO0FBNkJyQyxXQUFLLGNBQUwsR0FBc0IsWUFBdEIsQ0E3QnFDOztBQStCckMsYUFBTyxlQUFlLEtBQUssYUFBTCxDQUFtQixLQUFuQixDQUFmLENBL0I4Qjs7Ozs7Ozs7Ozs7Ozs7NEJBMEMvQixNQUFNO0FBQ1osVUFBSSxlQUFlLEtBQUssWUFBTCxDQURQO0FBRVosVUFBSSxjQUFjLENBQUMsUUFBUSxhQUFhLFdBQWIsQ0FBVCxHQUFxQyxLQUFLLEtBQUwsQ0FGM0M7QUFHWixVQUFJLGdCQUFnQixLQUFLLFNBQUwsQ0FIUjtBQUlaLFVBQUksZUFBZSxLQUFLLFlBQUwsQ0FKUDs7QUFNWixVQUFJLEtBQUssTUFBTCxFQUFhO0FBQ2YsWUFBSSxrQkFBa0IsR0FBbEIsQ0FEVztBQUVmLFlBQUksa0JBQWtCLEdBQWxCLENBRlc7QUFHZixZQUFJLGdCQUFnQixHQUFoQixDQUhXO0FBSWYsWUFBSSxpQkFBaUIsR0FBakIsQ0FKVztBQUtmLFlBQUksaUJBQWlCLEtBQUssY0FBTCxDQUxOOztBQU9mLFlBQUksS0FBSyxNQUFMLEVBQ0YsZUFBZSxlQUFlLEtBQUssYUFBTCxDQUFtQixNQUFuQixDQURoQyxLQUdFLGVBQWUsS0FBSyxHQUFMLENBQVMsQ0FBVCxFQUFZLEtBQUssR0FBTCxDQUFTLFlBQVQsRUFBdUIsS0FBSyxhQUFMLENBQW1CLE1BQW5CLEdBQTRCLENBQTVCLENBQW5DLENBQWYsQ0FIRjs7QUFLQSxZQUFJLEtBQUssYUFBTCxFQUNGLGtCQUFrQixLQUFLLGFBQUwsQ0FBbUIsWUFBbkIsS0FBb0MsQ0FBcEMsQ0FEcEI7O0FBR0EsWUFBSSxLQUFLLGFBQUwsRUFDRixrQkFBa0IsS0FBSyxhQUFMLENBQW1CLFlBQW5CLEtBQW9DLENBQXBDLENBRHBCOztBQUdBLFlBQUksS0FBSyxXQUFMLEVBQ0YsZ0JBQWdCLEtBQUssV0FBTCxDQUFpQixZQUFqQixLQUFrQyxDQUFsQyxDQURsQjs7O0FBbEJlLFlBc0JYLEtBQUssVUFBTCxLQUFvQixDQUFwQixJQUF5QixLQUFLLGFBQUwsR0FBcUIsQ0FBckIsRUFBd0I7QUFDbkQsY0FBSSxtQkFBbUIsQ0FBQyxLQUFLLE1BQUwsS0FBZ0IsR0FBaEIsQ0FBRCxHQUF3QixHQUF4QixHQUE4QixLQUFLLGFBQUwsQ0FERjtBQUVuRCwyQkFBaUIsS0FBSyxHQUFMLENBQVMsR0FBVCxFQUFjLENBQUMsS0FBSyxVQUFMLEdBQWtCLGdCQUFsQixDQUFELEdBQXVDLE1BQXZDLENBQS9CLENBRm1EO1NBQXJEOzs7QUF0QmUsWUE0Qlgsb0JBQW9CLENBQXBCLElBQXlCLEtBQUssU0FBTCxHQUFpQixDQUFqQixFQUFvQjtBQUMvQyxjQUFJLG9CQUFvQixlQUFlLENBQWYsQ0FEdUI7QUFFL0MsY0FBSSxZQUFKLEVBQWtCLFVBQWxCLENBRitDOztBQUkvQyxjQUFJLHNCQUFzQixLQUFLLGFBQUwsQ0FBbUIsTUFBbkIsRUFBMkI7QUFDbkQsZ0JBQUksS0FBSyxNQUFMLEVBQWE7QUFDZiw2QkFBZSxLQUFLLGFBQUwsQ0FBbUIsQ0FBbkIsSUFBd0IsY0FBeEIsQ0FEQTtBQUVmLDJCQUFhLEtBQUssV0FBTCxDQUFpQixDQUFqQixDQUFiLENBRmU7YUFBakIsTUFHTztBQUNMLDZCQUFlLGNBQWYsQ0FESztBQUVMLDJCQUFhLENBQWIsQ0FGSzthQUhQO1dBREYsTUFRTztBQUNMLDJCQUFlLEtBQUssYUFBTCxDQUFtQixpQkFBbkIsQ0FBZixDQURLO0FBRUwseUJBQWEsS0FBSyxXQUFMLENBQWlCLGlCQUFqQixDQUFiLENBRks7V0FSUDs7QUFhQSxjQUFJLHVCQUF1QixlQUFlLGVBQWY7Ozs7QUFqQm9CLGNBcUIzQyxnQkFBZ0IsQ0FBaEIsRUFDRix3QkFBd0IsYUFBeEIsQ0FERjs7QUFHQSxjQUFJLGFBQWEsQ0FBYixFQUNGLHdCQUF3QixVQUF4QixDQURGOztBQUdBLGNBQUksdUJBQXVCLENBQXZCLEVBQ0YsdUJBQXVCLENBQXZCLENBREY7OztBQTNCK0MsY0ErQjNDLG9CQUFvQixDQUFwQixFQUNGLGtCQUFrQixvQkFBbEIsQ0FERjs7O0FBL0IrQyx1QkFtQy9DLElBQWlCLEtBQUssU0FBTCxHQUFpQixvQkFBakIsQ0FuQzhCO1NBQWpEOzs7QUE1QmUsdUJBbUVmLElBQW1CLEtBQUssV0FBTCxDQW5FSjtBQW9FZiwyQkFBbUIsS0FBSyxXQUFMOzs7QUFwRUoscUJBdUVmLElBQWlCLEtBQUssU0FBTCxDQXZFRjtBQXdFZix5QkFBaUIsS0FBSyxTQUFMOzs7OztBQXhFRixZQTZFWCxnQkFBZ0IsQ0FBaEIsRUFBbUI7QUFDckIsNkJBQW1CLGFBQW5CLENBRHFCO0FBRXJCLDZCQUFtQixhQUFuQixDQUZxQjtBQUdyQix5QkFBZ0IsZ0JBQWdCLGNBQWhCLENBSEs7U0FBdkIsTUFJTztBQUNMLHlCQUFnQixnQkFBZ0IsY0FBaEIsQ0FEWDtTQUpQOzs7QUE3RWUsWUFzRlgsS0FBSyxXQUFMLEdBQW1CLENBQW5CLEVBQ0YsbUJBQW1CLE9BQU8sS0FBSyxNQUFMLEtBQWdCLEdBQWhCLENBQVAsR0FBOEIsS0FBSyxXQUFMLENBRG5EOzs7QUF0RmUsWUEwRlgsa0JBQWtCLENBQWxCLEVBQXFCOztBQUV2Qiw2QkFBbUIsZUFBbkIsQ0FGdUI7QUFHdkIsNEJBQWtCLENBQWxCLENBSHVCO1NBQXpCOztBQU1BLFlBQUksa0JBQWtCLGVBQWxCLEdBQW9DLEtBQUssTUFBTCxDQUFZLFFBQVosRUFDdEMsa0JBQWtCLEtBQUssTUFBTCxDQUFZLFFBQVosR0FBdUIsZUFBdkIsQ0FEcEI7O0FBR0EsMkJBQW1CLGNBQW5COzs7QUFuR2UsWUFzR1gsS0FBSyxJQUFMLEdBQVksQ0FBWixJQUFpQixrQkFBa0IsQ0FBbEIsRUFBcUI7O0FBRXhDLGNBQUksV0FBVyxhQUFhLFVBQWIsRUFBWCxDQUZvQztBQUd4QyxjQUFJLFNBQVMsS0FBSyxTQUFMLEdBQWlCLEtBQUssU0FBTCxHQUFpQixlQUFqQixDQUhVO0FBSXhDLGNBQUksVUFBVSxLQUFLLFVBQUwsR0FBa0IsS0FBSyxVQUFMLEdBQWtCLGVBQWxCLENBSlE7O0FBTXhDLGNBQUksU0FBUyxPQUFULEdBQW1CLGVBQW5CLEVBQW9DO0FBQ3RDLGdCQUFJLFNBQVMsbUJBQW1CLFNBQVMsT0FBVCxDQUFuQixDQUR5QjtBQUV0QyxzQkFBVSxNQUFWLENBRnNDO0FBR3RDLHVCQUFXLE1BQVgsQ0FIc0M7V0FBeEM7O0FBTUEsY0FBSSxnQkFBZ0IsY0FBYyxNQUFkLENBWm9CO0FBYXhDLGNBQUksaUJBQWlCLGNBQWMsZUFBZCxDQWJtQjtBQWN4QyxjQUFJLG1CQUFtQixpQkFBaUIsT0FBakIsQ0FkaUI7O0FBZ0J4QyxtQkFBUyxJQUFULENBQWMsS0FBZCxHQUFzQixDQUF0QixDQWhCd0M7QUFpQnhDLG1CQUFTLElBQVQsQ0FBYyxjQUFkLENBQTZCLEdBQTdCLEVBQWtDLFdBQWxDLEVBakJ3QztBQWtCeEMsbUJBQVMsSUFBVCxDQUFjLHVCQUFkLENBQXNDLEtBQUssSUFBTCxFQUFXLGFBQWpELEVBbEJ3Qzs7QUFvQnhDLGNBQUksbUJBQW1CLGFBQW5CLEVBQ0YsU0FBUyxJQUFULENBQWMsY0FBZCxDQUE2QixLQUFLLElBQUwsRUFBVyxnQkFBeEMsRUFERjs7QUFHQSxtQkFBUyxJQUFULENBQWMsdUJBQWQsQ0FBc0MsR0FBdEMsRUFBMkMsY0FBM0MsRUF2QndDO0FBd0J4QyxtQkFBUyxPQUFULENBQWlCLEtBQUssVUFBTCxDQUFqQjs7O0FBeEJ3QyxjQTJCcEMsU0FBUyxhQUFhLGtCQUFiLEVBQVQsQ0EzQm9DOztBQTZCeEMsaUJBQU8sTUFBUCxHQUFnQixLQUFLLE1BQUwsQ0E3QndCO0FBOEJ4QyxpQkFBTyxZQUFQLENBQW9CLEtBQXBCLEdBQTRCLGNBQTVCLENBOUJ3QztBQStCeEMsaUJBQU8sT0FBUCxDQUFlLFFBQWYsRUEvQndDOztBQWlDeEMsaUJBQU8sS0FBUCxDQUFhLFdBQWIsRUFBMEIsZUFBMUIsRUFqQ3dDO0FBa0N4QyxpQkFBTyxJQUFQLENBQVksY0FBYyxlQUFkLENBQVosQ0FsQ3dDO1NBQTFDO09BdEdGOztBQTRJQSxhQUFPLGFBQVAsQ0FsSlk7Ozs7d0JBekdPO0FBQ25CLFVBQUksS0FBSyxNQUFMLEVBQWE7QUFDZixZQUFJLGlCQUFpQixLQUFLLE1BQUwsQ0FBWSxRQUFaLENBRE47O0FBR2YsWUFBSSxLQUFLLG1CQUFMLEVBQ0Ysa0JBQWtCLEtBQUssbUJBQUwsQ0FEcEI7O0FBR0EsZUFBTyxjQUFQLENBTmU7T0FBakI7O0FBU0EsYUFBTyxDQUFQLENBVm1COzs7U0FsS0YiLCJmaWxlIjoic2VnbWVudC1lbmdpbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXVkaW9UaW1lRW5naW5lIGZyb20gJy4uL2NvcmUvYXVkaW8tdGltZS1lbmdpbmUnO1xuXG5mdW5jdGlvbiBvcHRPckRlZihvcHQsIGRlZikge1xuICBpZihvcHQgIT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gb3B0O1xuXG4gIHJldHVybiBkZWY7XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRPclByZXZpb3VzSW5kZXgoc29ydGVkQXJyYXksIHZhbHVlLCBpbmRleCA9IDApIHtcbiAgdmFyIHNpemUgPSBzb3J0ZWRBcnJheS5sZW5ndGg7XG5cbiAgaWYgKHNpemUgPiAwKSB7XG4gICAgdmFyIGZpcnN0VmFsID0gc29ydGVkQXJyYXlbMF07XG4gICAgdmFyIGxhc3RWYWwgPSBzb3J0ZWRBcnJheVtzaXplIC0gMV07XG5cbiAgICBpZiAodmFsdWUgPCBmaXJzdFZhbClcbiAgICAgIGluZGV4ID0gLTE7XG4gICAgZWxzZSBpZiAodmFsdWUgPj0gbGFzdFZhbClcbiAgICAgIGluZGV4ID0gc2l6ZSAtIDE7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNpemUpXG4gICAgICAgIGluZGV4ID0gTWF0aC5mbG9vcigoc2l6ZSAtIDEpICogKHZhbHVlIC0gZmlyc3RWYWwpIC8gKGxhc3RWYWwgLSBmaXJzdFZhbCkpO1xuXG4gICAgICB3aGlsZSAoc29ydGVkQXJyYXlbaW5kZXhdID4gdmFsdWUpXG4gICAgICAgIGluZGV4LS07XG5cbiAgICAgIHdoaWxlIChzb3J0ZWRBcnJheVtpbmRleCArIDFdIDw9IHZhbHVlKVxuICAgICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn1cblxuZnVuY3Rpb24gZ2V0Q3VycmVudE9yTmV4dEluZGV4KHNvcnRlZEFycmF5LCB2YWx1ZSwgaW5kZXggPSAwKSB7XG4gIHZhciBzaXplID0gc29ydGVkQXJyYXkubGVuZ3RoO1xuXG4gIGlmIChzaXplID4gMCkge1xuICAgIHZhciBmaXJzdFZhbCA9IHNvcnRlZEFycmF5WzBdO1xuICAgIHZhciBsYXN0VmFsID0gc29ydGVkQXJyYXlbc2l6ZSAtIDFdO1xuXG4gICAgaWYgKHZhbHVlIDw9IGZpcnN0VmFsKVxuICAgICAgaW5kZXggPSAwO1xuICAgIGVsc2UgaWYgKHZhbHVlID49IGxhc3RWYWwpXG4gICAgICBpbmRleCA9IHNpemU7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNpemUpXG4gICAgICAgIGluZGV4ID0gTWF0aC5mbG9vcigoc2l6ZSAtIDEpICogKHZhbHVlIC0gZmlyc3RWYWwpIC8gKGxhc3RWYWwgLSBmaXJzdFZhbCkpO1xuXG4gICAgICB3aGlsZSAoc29ydGVkQXJyYXlbaW5kZXhdIDwgdmFsdWUpXG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgIHdoaWxlIChzb3J0ZWRBcnJheVtpbmRleCArIDFdID49IHZhbHVlKVxuICAgICAgICBpbmRleC0tO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn1cblxuLyoqXG4gKiBAY2xhc3MgU2VnbWVudEVuZ2luZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWdtZW50RW5naW5lIGV4dGVuZHMgQXVkaW9UaW1lRW5naW5lIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0F1ZGlvQnVmZmVyfSBidWZmZXIgaW5pdGlhbCBhdWRpbyBidWZmZXIgZm9yIGdyYW51bGFyIHN5bnRoZXNpc1xuICAgKlxuICAgKiBUaGUgZW5naW5lIGltcGxlbWVudHMgdGhlIFwic2NoZWR1bGVkXCIgYW5kIFwidHJhbnNwb3J0ZWRcIiBpbnRlcmZhY2VzLlxuICAgKiBXaGVuIFwic2NoZWR1bGVkXCIsIHRoZSBlbmdpbmUgIGdlbmVyYXRlcyBzZWdtZW50cyBtb3JlIG9yIGxlc3PCoHBlcmlvZGljYWxseVxuICAgKiAoY29udHJvbGxlZCBieSB0aGUgcGVyaW9kQWJzLCBwZXJpb2RSZWwsIGFuZCBwZXJpb1ZhciBhdHRyaWJ1dGVzKS5cbiAgICogV2hlbiBcInRyYW5zcG9ydGVkXCIsIHRoZSBlbmdpbmUgZ2VuZXJhdGVzIHNlZ21lbnRzIGF0IHRoZSBwb3NpdGlvbiBvZiB0aGVpciBvbnNldCB0aW1lLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIob3B0aW9ucy5hdWRpb0NvbnRleHQpO1xuXG4gICAgLyoqXG4gICAgICogQXVkaW8gYnVmZmVyXG4gICAgICogQHR5cGUge0F1ZGlvQnVmZmVyfVxuICAgICAqL1xuICAgIHRoaXMuYnVmZmVyID0gb3B0T3JEZWYob3B0aW9ucy5idWZmZXIsIG51bGwpO1xuXG4gICAgLyoqXG4gICAgICogQWJzb2x1dGUgc2VnbWVudCBwZXJpb2QgaW4gc2VjXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnBlcmlvZEFicyA9IG9wdE9yRGVmKG9wdGlvbnMucGVyaW9kQWJzLCAwKTtcblxuICAgIC8qKlxuICAgICAqIFNlZ21lbnQgcGVyaW9kIHJlbGF0aXZlIHRvIGludGVyLXNlZ21lbnQgZGlzdGFuY2VcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucGVyaW9kUmVsID0gb3B0T3JEZWYob3B0aW9ucy5wZXJpb2RSZWwsIDEpO1xuXG4gICAgLyoqXG4gICAgICogQW1vdXQgb2YgcmFuZG9tIHNlZ21lbnQgcGVyaW9kIHZhcmlhdGlvbiByZWxhdGl2ZSB0byBzZWdtZW50IHBlcmlvZFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5wZXJpb2RWYXIgPSBvcHRPckRlZihvcHRpb25zLnBlcmlvZFZhciwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBzZWdtZW50IHBvc2l0aW9ucyAob25zZXQgdGltZXMgaW4gYXVkaW8gYnVmZmVyKSBpbiBzZWNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb25BcnJheSA9IG9wdE9yRGVmKG9wdGlvbnMucG9zaXRpb25BcnJheSwgWzAuMF0pO1xuXG4gICAgLyoqXG4gICAgICogQW1vdXQgb2YgcmFuZG9tIHNlZ21lbnQgcG9zaXRpb24gdmFyaWF0aW9uIGluIHNlY1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5wb3NpdGlvblZhciA9IG9wdE9yRGVmKG9wdGlvbnMucG9zaXRpb25WYXIsIDApO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2Ygc2VnbWVudCBkdXJhdGlvbnMgaW4gc2VjXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmR1cmF0aW9uQXJyYXkgPSBvcHRPckRlZihvcHRpb25zLmR1cmF0aW9uQXJyYXksIFswLjBdKTtcblxuICAgIC8qKlxuICAgICAqIEFic29sdXRlIHNlZ21lbnQgZHVyYXRpb24gaW4gc2VjXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmR1cmF0aW9uQWJzID0gb3B0T3JEZWYob3B0aW9ucy5kdXJhdGlvbkFicywgMCk7XG5cbiAgICAvKipcbiAgICAgKiBTZWdtZW50IGR1cmF0aW9uIHJlbGF0aXZlIHRvIGdpdmVuIHNlZ21lbnQgZHVyYXRpb24gb3IgaW50ZXItc2VnbWVudCBkaXN0YW5jZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5kdXJhdGlvblJlbCA9IG9wdE9yRGVmKG9wdGlvbnMuZHVyYXRpb25SZWwsIDEpO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2Ygc2VnbWVudCBvZmZzZXRzIGluIHNlY1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICpcbiAgICAgKiBvZmZzZXQgPiAwOiB0aGUgc2VnbWVudCdzIHJlZmVyZW5jZSBwb3NpdGlvbiBpcyBhZnRlciB0aGUgZ2l2ZW4gc2VnbWVudCBwb3NpdGlvblxuICAgICAqIG9mZnNldCA8IDA6IHRoZSBnaXZlbiBzZWdtZW50IHBvc2l0aW9uIGlzIHRoZSBzZWdtZW50J3MgcmVmZXJlbmNlIHBvc2l0aW9uIGFuZCB0aGUgZHVyYXRpb24gaGFzIHRvIGJlIGNvcnJlY3RlZCBieSB0aGUgb2Zmc2V0XG4gICAgICovXG4gICAgdGhpcy5vZmZzZXRBcnJheSA9IG9wdE9yRGVmKG9wdGlvbnMub2Zmc2V0QXJyYXksIFswLjBdKTtcblxuICAgIC8qKlxuICAgICAqIEFic29sdXRlIHNlZ21lbnQgb2Zmc2V0IGluIHNlY1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5vZmZzZXRBYnMgPSBvcHRPckRlZihvcHRpb25zLm9mZnNldEFicywgLTAuMDA1KTtcblxuICAgIC8qKlxuICAgICAqIFNlZ21lbnQgb2Zmc2V0IHJlbGF0aXZlIHRvIHNlZ21lbnQgZHVyYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMub2Zmc2V0UmVsID0gb3B0T3JEZWYob3B0aW9ucy5vZmZzZXRSZWwsIDApO1xuXG4gICAgLyoqXG4gICAgICogVGltZSBieSB3aGljaCBhbGwgc2VnbWVudHMgYXJlIGRlbGF5ZWQgKGVzcGVjaWFsbHkgdG8gcmVhbGl6ZSBzZWdtZW50IG9mZnNldHMpXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmRlbGF5ID0gb3B0T3JEZWYob3B0aW9ucy5kZWxheSwgMC4wMDUpO1xuXG4gICAgLyoqXG4gICAgICogQWJzb2x1dGUgYXR0YWNrIHRpbWUgaW4gc2VjXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmF0dGFja0FicyA9IG9wdE9yRGVmKG9wdGlvbnMuYXR0YWNrQWJzLCAwLjAwNSk7XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2sgdGltZSByZWxhdGl2ZSB0byBzZWdtZW50IGR1cmF0aW9uXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmF0dGFja1JlbCA9IG9wdE9yRGVmKG9wdGlvbnMuYXR0YWNrUmVsLCAwKTtcblxuICAgIC8qKlxuICAgICAqIEFic29sdXRlIHJlbGVhc2UgdGltZSBpbiBzZWNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucmVsZWFzZUFicyA9IG9wdE9yRGVmKG9wdGlvbnMucmVsZWFzZUFicywgMC4wMDUpO1xuXG4gICAgLyoqXG4gICAgICogUmVsZWFzZSB0aW1lIHJlbGF0aXZlIHRvIHNlZ21lbnQgZHVyYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucmVsZWFzZVJlbCA9IG9wdE9yRGVmKG9wdGlvbnMucmVsZWFzZVJlbCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBTZWdtZW50IHJlc2FtcGxpbmcgaW4gY2VudFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5yZXNhbXBsaW5nID0gb3B0T3JEZWYob3B0aW9ucy5yZXNhbXBsaW5nLCAwKTtcblxuICAgIC8qKlxuICAgICAqIEFtb3V0IG9mIHJhbmRvbSByZXNhbXBsaW5nIHZhcmlhdGlvbiBpbiBjZW50XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc2FtcGxpbmdWYXIgPSBvcHRPckRlZihvcHRpb25zLnJlc2FtcGxpbmdWYXIsIDApO1xuXG4gICAgLyoqXG4gICAgICogTGluZWFyIGdhaW4gZmFjdG9yXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmdhaW4gPSBvcHRPckRlZihvcHRpb25zLmdhaW4sIDEpO1xuXG4gICAgLyoqXG4gICAgICogSW5kZXggb2YgdGhlIHNlZ21lbnQgdG8gc3ludGhlc2l6ZSAoaS5lLiBvZiB0aGlzLnBvc2l0aW9uQXJyYXkvZHVyYXRpb25BcnJheS9vZmZzZXRBcnJheSlcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuc2VnbWVudEluZGV4ID0gb3B0T3JEZWYob3B0aW9ucy5zZWdtZW50SW5kZXgsIDApO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgYXVkaW8gYnVmZmVyIGFuZCBzZWdtZW50IGluZGljZXMgYXJlIGNvbnNpZGVyZWQgYXMgY3ljbGljXG4gICAgICogQHR5cGUge0Jvb2x9XG4gICAgICovXG4gICAgdGhpcy5jeWNsaWMgPSBvcHRPckRlZihvcHRpb25zLmN5Y2xpYywgZmFsc2UpO1xuICAgIHRoaXMuX19jeWNsaWNPZmZzZXQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogUG9ydGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBhdWRpbyBidWZmZXIgdGhhdCBoYXMgYmVlbiBjb3BpZWQgZnJvbSB0aGUgYmVnaW5uaW5nIHRvIGFzc3VyZSBjeWNsaWMgYmVoYXZpb3JcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMud3JhcEFyb3VuZEV4dGVuc2lvbiA9IG9wdE9yRGVmKG9wdGlvbnMud3JhcEFyb3VuZEV4dGVuc2lvbiwgMCk7XG5cbiAgICB0aGlzLm91dHB1dE5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGJ1ZmZlciBkdXJhdGlvbiAoZXhjbHVkaW5nIHdyYXBBcm91bmRFeHRlbnNpb24pXG4gICAqIEByZXR1cm4ge051bWJlcn0gY3VycmVudCBidWZmZXIgZHVyYXRpb25cbiAgICovXG4gIGdldCBidWZmZXJEdXJhdGlvbigpIHtcbiAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgIHZhciBidWZmZXJEdXJhdGlvbiA9IHRoaXMuYnVmZmVyLmR1cmF0aW9uO1xuXG4gICAgICBpZiAodGhpcy53cmFwQXJvdW5kRXh0ZW5zaW9uKVxuICAgICAgICBidWZmZXJEdXJhdGlvbiAtPSB0aGlzLndyYXBBcm91bmRFeHRlbnNpb247XG5cbiAgICAgIHJldHVybiBidWZmZXJEdXJhdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8vIFRpbWVFbmdpbmUgbWV0aG9kICh0cmFuc3BvcnRlZCBpbnRlcmZhY2UpXG4gIGFkdmFuY2VUaW1lKHRpbWUpIHtcbiAgICB0aW1lID0gTWF0aC5tYXgodGltZSwgdGhpcy5hdWRpb0NvbnRleHQuY3VycmVudFRpbWUpO1xuICAgIHJldHVybiB0aW1lICsgdGhpcy50cmlnZ2VyKHRpbWUpO1xuICB9XG5cbiAgLy8gVGltZUVuZ2luZSBtZXRob2QgKHRyYW5zcG9ydGVkIGludGVyZmFjZSlcbiAgc3luY1Bvc2l0aW9uKHRpbWUsIHBvc2l0aW9uLCBzcGVlZCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuc2VnbWVudEluZGV4O1xuICAgIHZhciBjeWNsaWNPZmZzZXQgPSAwO1xuICAgIHZhciBidWZmZXJEdXJhdGlvbiA9IHRoaXMuYnVmZmVyRHVyYXRpb247XG5cbiAgICBpZiAodGhpcy5jeWNsaWMpIHtcbiAgICAgIHZhciBjeWNsZXMgPSBwb3NpdGlvbiAvIGJ1ZmZlckR1cmF0aW9uO1xuXG4gICAgICBjeWNsaWNPZmZzZXQgPSBNYXRoLmZsb29yKGN5Y2xlcykgKiBidWZmZXJEdXJhdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IGN5Y2xpY09mZnNldDtcbiAgICB9XG5cbiAgICBpZiAoc3BlZWQgPiAwKSB7XG4gICAgICBpbmRleCA9IGdldEN1cnJlbnRPck5leHRJbmRleCh0aGlzLnBvc2l0aW9uQXJyYXksIHBvc2l0aW9uKTtcblxuICAgICAgaWYgKGluZGV4ID49IHRoaXMucG9zaXRpb25BcnJheS5sZW5ndGgpIHtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICBjeWNsaWNPZmZzZXQgKz0gYnVmZmVyRHVyYXRpb247XG5cbiAgICAgICAgaWYgKCF0aGlzLmN5Y2xpYylcbiAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzcGVlZCA8IDApIHtcbiAgICAgIGluZGV4ID0gZ2V0Q3VycmVudE9yUHJldmlvdXNJbmRleCh0aGlzLnBvc2l0aW9uQXJyYXksIHBvc2l0aW9uKTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IHRoaXMucG9zaXRpb25BcnJheS5sZW5ndGggLSAxO1xuICAgICAgICBjeWNsaWNPZmZzZXQgLT0gYnVmZmVyRHVyYXRpb247XG5cbiAgICAgICAgaWYgKCF0aGlzLmN5Y2xpYylcbiAgICAgICAgICByZXR1cm4gLUluZmluaXR5O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuXG4gICAgdGhpcy5zZWdtZW50SW5kZXggPSBpbmRleDtcbiAgICB0aGlzLl9fY3ljbGljT2Zmc2V0ID0gY3ljbGljT2Zmc2V0O1xuXG4gICAgcmV0dXJuIGN5Y2xpY09mZnNldCArIHRoaXMucG9zaXRpb25BcnJheVtpbmRleF07XG4gIH1cblxuICAvLyBUaW1lRW5naW5lIG1ldGhvZCAodHJhbnNwb3J0ZWQgaW50ZXJmYWNlKVxuICBhZHZhbmNlUG9zaXRpb24odGltZSwgcG9zaXRpb24sIHNwZWVkKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5zZWdtZW50SW5kZXg7XG4gICAgdmFyIGN5Y2xpY09mZnNldCA9IHRoaXMuX19jeWNsaWNPZmZzZXQ7XG5cbiAgICB0aGlzLnRyaWdnZXIodGltZSk7XG5cbiAgICBpZiAoc3BlZWQgPiAwKSB7XG4gICAgICBpbmRleCsrO1xuXG4gICAgICBpZiAoaW5kZXggPj0gdGhpcy5wb3NpdGlvbkFycmF5Lmxlbmd0aCkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIGN5Y2xpY09mZnNldCArPSB0aGlzLmJ1ZmZlckR1cmF0aW9uO1xuXG4gICAgICAgIGlmICghdGhpcy5jeWNsaWMpXG4gICAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleC0tO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gdGhpcy5wb3NpdGlvbkFycmF5Lmxlbmd0aCAtIDE7XG4gICAgICAgIGN5Y2xpY09mZnNldCAtPSB0aGlzLmJ1ZmZlckR1cmF0aW9uO1xuXG4gICAgICAgIGlmICghdGhpcy5jeWNsaWMpXG4gICAgICAgICAgcmV0dXJuIC1JbmZpbml0eTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNlZ21lbnRJbmRleCA9IGluZGV4O1xuICAgIHRoaXMuX19jeWNsaWNPZmZzZXQgPSBjeWNsaWNPZmZzZXQ7XG5cbiAgICByZXR1cm4gY3ljbGljT2Zmc2V0ICsgdGhpcy5wb3NpdGlvbkFycmF5W2luZGV4XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIGEgc2VnbWVudFxuICAgKiBAcGFyYW0ge051bWJlcn0gdGltZSBzZWdtZW50IHN5bnRoZXNpcyBhdWRpbyB0aW1lXG4gICAqIEByZXR1cm4ge051bWJlcn0gcGVyaW9kIHRvIG5leHQgc2VnbWVudFxuICAgKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgYXQgYW55IHRpbWUgKHdoZXRoZXIgdGhlIGVuZ2luZSBpcyBzY2hlZHVsZWQvdHJhbnNwb3J0ZWQgb3Igbm90KVxuICAgKiB0byBnZW5lcmF0ZSBhIHNpbmdsZSBzZWdtZW50IGFjY29yZGluZyB0byB0aGUgY3VycmVudCBzZWdtZW50IHBhcmFtZXRlcnMuXG4gICAqL1xuICB0cmlnZ2VyKHRpbWUpIHtcbiAgICB2YXIgYXVkaW9Db250ZXh0ID0gdGhpcy5hdWRpb0NvbnRleHQ7XG4gICAgdmFyIHNlZ21lbnRUaW1lID0gKHRpbWUgfHwgYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lKSArIHRoaXMuZGVsYXk7XG4gICAgdmFyIHNlZ21lbnRQZXJpb2QgPSB0aGlzLnBlcmlvZEFicztcbiAgICB2YXIgc2VnbWVudEluZGV4ID0gdGhpcy5zZWdtZW50SW5kZXg7XG5cbiAgICBpZiAodGhpcy5idWZmZXIpIHtcbiAgICAgIHZhciBzZWdtZW50UG9zaXRpb24gPSAwLjA7XG4gICAgICB2YXIgc2VnbWVudER1cmF0aW9uID0gMC4wO1xuICAgICAgdmFyIHNlZ21lbnRPZmZzZXQgPSAwLjA7XG4gICAgICB2YXIgcmVzYW1wbGluZ1JhdGUgPSAxLjA7XG4gICAgICB2YXIgYnVmZmVyRHVyYXRpb24gPSB0aGlzLmJ1ZmZlckR1cmF0aW9uO1xuXG4gICAgICBpZiAodGhpcy5jeWNsaWMpXG4gICAgICAgIHNlZ21lbnRJbmRleCA9IHNlZ21lbnRJbmRleCAlIHRoaXMucG9zaXRpb25BcnJheS5sZW5ndGg7XG4gICAgICBlbHNlXG4gICAgICAgIHNlZ21lbnRJbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHNlZ21lbnRJbmRleCwgdGhpcy5wb3NpdGlvbkFycmF5Lmxlbmd0aCAtIDEpKTtcblxuICAgICAgaWYgKHRoaXMucG9zaXRpb25BcnJheSlcbiAgICAgICAgc2VnbWVudFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbkFycmF5W3NlZ21lbnRJbmRleF0gfHwgMDtcblxuICAgICAgaWYgKHRoaXMuZHVyYXRpb25BcnJheSlcbiAgICAgICAgc2VnbWVudER1cmF0aW9uID0gdGhpcy5kdXJhdGlvbkFycmF5W3NlZ21lbnRJbmRleF0gfHwgMDtcblxuICAgICAgaWYgKHRoaXMub2Zmc2V0QXJyYXkpXG4gICAgICAgIHNlZ21lbnRPZmZzZXQgPSB0aGlzLm9mZnNldEFycmF5W3NlZ21lbnRJbmRleF0gfHwgMDtcblxuICAgICAgLy8gY2FsY3VsYXRlIHJlc2FtcGxpbmdcbiAgICAgIGlmICh0aGlzLnJlc2FtcGxpbmcgIT09IDAgfHwgdGhpcy5yZXNhbXBsaW5nVmFyID4gMCkge1xuICAgICAgICB2YXIgcmFuZG9tUmVzYW1wbGluZyA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIuMCAqIHRoaXMucmVzYW1wbGluZ1ZhcjtcbiAgICAgICAgcmVzYW1wbGluZ1JhdGUgPSBNYXRoLnBvdygyLjAsICh0aGlzLnJlc2FtcGxpbmcgKyByYW5kb21SZXNhbXBsaW5nKSAvIDEyMDAuMCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGNhbGN1bGF0ZSBpbnRlci1zZWdtZW50IGRpc3RhbmNlXG4gICAgICBpZiAoc2VnbWVudER1cmF0aW9uID09PSAwIHx8IHRoaXMucGVyaW9kUmVsID4gMCkge1xuICAgICAgICB2YXIgbmV4dFNlZ2VtZW50SW5kZXggPSBzZWdtZW50SW5kZXggKyAxO1xuICAgICAgICB2YXIgbmV4dFBvc2l0aW9uLCBuZXh0T2Zmc2V0O1xuXG4gICAgICAgIGlmIChuZXh0U2VnZW1lbnRJbmRleCA9PT0gdGhpcy5wb3NpdGlvbkFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGlmICh0aGlzLmN5Y2xpYykge1xuICAgICAgICAgICAgbmV4dFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbkFycmF5WzBdICsgYnVmZmVyRHVyYXRpb247XG4gICAgICAgICAgICBuZXh0T2Zmc2V0ID0gdGhpcy5vZmZzZXRBcnJheVswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dFBvc2l0aW9uID0gYnVmZmVyRHVyYXRpb247XG4gICAgICAgICAgICBuZXh0T2Zmc2V0ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dFBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbkFycmF5W25leHRTZWdlbWVudEluZGV4XTtcbiAgICAgICAgICBuZXh0T2Zmc2V0ID0gdGhpcy5vZmZzZXRBcnJheVtuZXh0U2VnZW1lbnRJbmRleF07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaW50ZXJTZWdtZW50RGlzdGFuY2UgPSBuZXh0UG9zaXRpb24gLSBzZWdtZW50UG9zaXRpb247XG5cbiAgICAgICAgLy8gY29ycmVjdCBpbnRlci1zZWdtZW50IGRpc3RhbmNlIGJ5IG9mZnNldHNcbiAgICAgICAgLy8gICBvZmZzZXQgPiAwOiB0aGUgc2VnbWVudCdzIHJlZmVyZW5jZSBwb3NpdGlvbiBpcyBhZnRlciB0aGUgZ2l2ZW4gc2VnbWVudCBwb3NpdGlvblxuICAgICAgICBpZiAoc2VnbWVudE9mZnNldCA+IDApXG4gICAgICAgICAgaW50ZXJTZWdtZW50RGlzdGFuY2UgLT0gc2VnbWVudE9mZnNldDtcblxuICAgICAgICBpZiAobmV4dE9mZnNldCA+IDApXG4gICAgICAgICAgaW50ZXJTZWdtZW50RGlzdGFuY2UgKz0gbmV4dE9mZnNldDtcblxuICAgICAgICBpZiAoaW50ZXJTZWdtZW50RGlzdGFuY2UgPCAwKVxuICAgICAgICAgIGludGVyU2VnbWVudERpc3RhbmNlID0gMDtcblxuICAgICAgICAvLyB1c2UgaW50ZXItc2VnbWVudCBkaXN0YW5jZSBpbnN0ZWFkIG9mIHNlZ21lbnQgZHVyYXRpb25cbiAgICAgICAgaWYgKHNlZ21lbnREdXJhdGlvbiA9PT0gMClcbiAgICAgICAgICBzZWdtZW50RHVyYXRpb24gPSBpbnRlclNlZ21lbnREaXN0YW5jZTtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgcGVyaW9kIHJlbGF0aXZlIHRvIGludGVyIG1hcmtlciBkaXN0YW5jZVxuICAgICAgICBzZWdtZW50UGVyaW9kICs9IHRoaXMucGVyaW9kUmVsICogaW50ZXJTZWdtZW50RGlzdGFuY2U7XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgc2VnbWVudCBkdXJhdGlvblxuICAgICAgc2VnbWVudER1cmF0aW9uICo9IHRoaXMuZHVyYXRpb25SZWw7XG4gICAgICBzZWdtZW50RHVyYXRpb24gKz0gdGhpcy5kdXJhdGlvbkFicztcblxuICAgICAgLy8gYWRkIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBzZWdtZW50IG9mZnNldFxuICAgICAgc2VnbWVudE9mZnNldCAqPSB0aGlzLm9mZnNldFJlbDtcbiAgICAgIHNlZ21lbnRPZmZzZXQgKz0gdGhpcy5vZmZzZXRBYnM7XG5cbiAgICAgIC8vIGFwcGx5IHNlZ21lbnQgb2Zmc2V0XG4gICAgICAvLyAgIG9mZnNldCA+IDA6IHRoZSBzZWdtZW50J3MgcmVmZXJlbmNlIHBvc2l0aW9uIGlzIGFmdGVyIHRoZSBnaXZlbiBzZWdtZW50IHBvc2l0aW9uXG4gICAgICAvLyAgIG9mZnNldCA8IDA6IHRoZSBnaXZlbiBzZWdtZW50IHBvc2l0aW9uIGlzIHRoZSBzZWdtZW50J3MgcmVmZXJlbmNlIHBvc2l0aW9uIGFuZCB0aGUgZHVyYXRpb24gaGFzIHRvIGJlIGNvcnJlY3RlZCBieSB0aGUgb2Zmc2V0XG4gICAgICBpZiAoc2VnbWVudE9mZnNldCA8IDApIHtcbiAgICAgICAgc2VnbWVudER1cmF0aW9uIC09IHNlZ21lbnRPZmZzZXQ7XG4gICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSBzZWdtZW50T2Zmc2V0O1xuICAgICAgICBzZWdtZW50VGltZSArPSAoc2VnbWVudE9mZnNldCAvIHJlc2FtcGxpbmdSYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZ21lbnRUaW1lIC09IChzZWdtZW50T2Zmc2V0IC8gcmVzYW1wbGluZ1JhdGUpO1xuICAgICAgfVxuXG4gICAgICAvLyByYW5kb21pemUgc2VnbWVudCBwb3NpdGlvblxuICAgICAgaWYgKHRoaXMucG9zaXRpb25WYXIgPiAwKVxuICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMi4wICogKE1hdGgucmFuZG9tKCkgLSAwLjUpICogdGhpcy5wb3NpdGlvblZhcjtcblxuICAgICAgLy8gc2hvcnRlbiBkdXJhdGlvbiBvZiBzZWdtZW50cyBvdmVyIHRoZSBlZGdlcyBvZiB0aGUgYnVmZmVyXG4gICAgICBpZiAoc2VnbWVudFBvc2l0aW9uIDwgMCkge1xuICAgICAgICAvL3NlZ21lbnRUaW1lIC09IGdyYWluUG9zaXRpb247IGhtLCBub3Qgc3VyZSBpZiB3ZSB3YW50IHRvIGRvIHRoaXNcbiAgICAgICAgc2VnbWVudER1cmF0aW9uICs9IHNlZ21lbnRQb3NpdGlvbjtcbiAgICAgICAgc2VnbWVudFBvc2l0aW9uID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlZ21lbnRQb3NpdGlvbiArIHNlZ21lbnREdXJhdGlvbiA+IHRoaXMuYnVmZmVyLmR1cmF0aW9uKVxuICAgICAgICBzZWdtZW50RHVyYXRpb24gPSB0aGlzLmJ1ZmZlci5kdXJhdGlvbiAtIHNlZ21lbnRQb3NpdGlvbjtcblxuICAgICAgc2VnbWVudER1cmF0aW9uIC89IHJlc2FtcGxpbmdSYXRlO1xuXG4gICAgICAvLyBtYWtlIHNlZ21lbnRcbiAgICAgIGlmICh0aGlzLmdhaW4gPiAwICYmIHNlZ21lbnREdXJhdGlvbiA+IDApIHtcbiAgICAgICAgLy8gbWFrZSBzZWdtZW50IGVudmVsb3BlXG4gICAgICAgIHZhciBlbnZlbG9wZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgICAgIHZhciBhdHRhY2sgPSB0aGlzLmF0dGFja0FicyArIHRoaXMuYXR0YWNrUmVsICogc2VnbWVudER1cmF0aW9uO1xuICAgICAgICB2YXIgcmVsZWFzZSA9IHRoaXMucmVsZWFzZUFicyArIHRoaXMucmVsZWFzZVJlbCAqIHNlZ21lbnREdXJhdGlvbjtcblxuICAgICAgICBpZiAoYXR0YWNrICsgcmVsZWFzZSA+IHNlZ21lbnREdXJhdGlvbikge1xuICAgICAgICAgIHZhciBmYWN0b3IgPSBzZWdtZW50RHVyYXRpb24gLyAoYXR0YWNrICsgcmVsZWFzZSk7XG4gICAgICAgICAgYXR0YWNrICo9IGZhY3RvcjtcbiAgICAgICAgICByZWxlYXNlICo9IGZhY3RvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhdHRhY2tFbmRUaW1lID0gc2VnbWVudFRpbWUgKyBhdHRhY2s7XG4gICAgICAgIHZhciBzZWdtZW50RW5kVGltZSA9IHNlZ21lbnRUaW1lICsgc2VnbWVudER1cmF0aW9uO1xuICAgICAgICB2YXIgcmVsZWFzZVN0YXJ0VGltZSA9IHNlZ21lbnRFbmRUaW1lIC0gcmVsZWFzZTtcblxuICAgICAgICBlbnZlbG9wZS5nYWluLnZhbHVlID0gMDtcbiAgICAgICAgZW52ZWxvcGUuZ2Fpbi5zZXRWYWx1ZUF0VGltZSgwLjAsIHNlZ21lbnRUaW1lKTtcbiAgICAgICAgZW52ZWxvcGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh0aGlzLmdhaW4sIGF0dGFja0VuZFRpbWUpO1xuXG4gICAgICAgIGlmIChyZWxlYXNlU3RhcnRUaW1lID4gYXR0YWNrRW5kVGltZSlcbiAgICAgICAgICBlbnZlbG9wZS5nYWluLnNldFZhbHVlQXRUaW1lKHRoaXMuZ2FpbiwgcmVsZWFzZVN0YXJ0VGltZSk7XG5cbiAgICAgICAgZW52ZWxvcGUuZ2Fpbi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSgwLjAsIHNlZ21lbnRFbmRUaW1lKTtcbiAgICAgICAgZW52ZWxvcGUuY29ubmVjdCh0aGlzLm91dHB1dE5vZGUpO1xuXG4gICAgICAgIC8vIG1ha2Ugc291cmNlXG4gICAgICAgIHZhciBzb3VyY2UgPSBhdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG5cbiAgICAgICAgc291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBzb3VyY2UucGxheWJhY2tSYXRlLnZhbHVlID0gcmVzYW1wbGluZ1JhdGU7XG4gICAgICAgIHNvdXJjZS5jb25uZWN0KGVudmVsb3BlKTtcblxuICAgICAgICBzb3VyY2Uuc3RhcnQoc2VnbWVudFRpbWUsIHNlZ21lbnRQb3NpdGlvbik7XG4gICAgICAgIHNvdXJjZS5zdG9wKHNlZ21lbnRUaW1lICsgc2VnbWVudER1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VnbWVudFBlcmlvZDtcbiAgfVxufVxuIl19//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _audioContext = __webpack_require__(16);\n\nObject.defineProperty(exports, 'audioContext', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_audioContext).default;\n  }\n});\n\nvar _timeEngine = __webpack_require__(18);\n\nObject.defineProperty(exports, 'TimeEngine', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_timeEngine).default;\n  }\n});\n\nvar _audioTimeEngine = __webpack_require__(23);\n\nObject.defineProperty(exports, 'AudioTimeEngine', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_audioTimeEngine).default;\n  }\n});\n\nvar _priorityQueue = __webpack_require__(55);\n\nObject.defineProperty(exports, 'PriorityQueue', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_priorityQueue).default;\n  }\n});\n\nvar _schedulingQueue = __webpack_require__(34);\n\nObject.defineProperty(exports, 'SchedulingQueue', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_schedulingQueue).default;\n  }\n});\n\nvar _granularEngine = __webpack_require__(133);\n\nObject.defineProperty(exports, 'GranularEngine', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_granularEngine).default;\n  }\n});\n\nvar _metronome = __webpack_require__(134);\n\nObject.defineProperty(exports, 'Metronome', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_metronome).default;\n  }\n});\n\nvar _playerEngine = __webpack_require__(135);\n\nObject.defineProperty(exports, 'PlayerEngine', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_playerEngine).default;\n  }\n});\n\nvar _segmentEngine = __webpack_require__(136);\n\nObject.defineProperty(exports, 'SegmentEngine', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_segmentEngine).default;\n  }\n});\n\nvar _playControl = __webpack_require__(138);\n\nObject.defineProperty(exports, 'PlayControl', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_playControl).default;\n  }\n});\n\nvar _transport = __webpack_require__(139);\n\nObject.defineProperty(exports, 'Transport', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_transport).default;\n  }\n});\n\nvar _scheduler = __webpack_require__(74);\n\nObject.defineProperty(exports, 'Scheduler', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_scheduler).default;\n  }\n});\n\nvar _simpleScheduler = __webpack_require__(75);\n\nObject.defineProperty(exports, 'SimpleScheduler', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_simpleScheduler).default;\n  }\n});\n\nvar _factories = __webpack_require__(56);\n\nObject.defineProperty(exports, 'getScheduler', {\n  enumerable: true,\n  get: function get() {\n    return _factories.getScheduler;\n  }\n});\nObject.defineProperty(exports, 'getSimpleScheduler', {\n  enumerable: true,\n  get: function get() {\n    return _factories.getSimpleScheduler;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O2lEQUNTOzs7Ozs7Ozs7K0NBQ0E7Ozs7Ozs7OztvREFDQTs7Ozs7Ozs7O2tEQUNBOzs7Ozs7Ozs7b0RBQ0E7Ozs7Ozs7OzttREFHQTs7Ozs7Ozs7OzhDQUNBOzs7Ozs7Ozs7aURBQ0E7Ozs7Ozs7OztrREFDQTs7Ozs7Ozs7O2dEQUdBOzs7Ozs7Ozs7OENBQ0E7Ozs7Ozs7Ozs4Q0FDQTs7Ozs7Ozs7O29EQUNBOzs7Ozs7Ozs7c0JBR0E7Ozs7OztzQkFDQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNvcmVcbmV4cG9ydCB7IGRlZmF1bHQgYXMgYXVkaW9Db250ZXh0IH0gZnJvbSAnLi9jb3JlL2F1ZGlvLWNvbnRleHQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUaW1lRW5naW5lIH0gZnJvbSAnLi9jb3JlL3RpbWUtZW5naW5lJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQXVkaW9UaW1lRW5naW5lIH0gZnJvbSAnLi9jb3JlL2F1ZGlvLXRpbWUtZW5naW5lJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUHJpb3JpdHlRdWV1ZSB9IGZyb20gJy4vY29yZS9wcmlvcml0eS1xdWV1ZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFNjaGVkdWxpbmdRdWV1ZSB9IGZyb20gJy4vY29yZS9zY2hlZHVsaW5nLXF1ZXVlJztcblxuLy8gZW5naW5lc1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHcmFudWxhckVuZ2luZSB9IGZyb20gJy4vZW5naW5lcy9ncmFudWxhci1lbmdpbmUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBNZXRyb25vbWUgfSBmcm9tICcuL2VuZ2luZXMvbWV0cm9ub21lJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUGxheWVyRW5naW5lIH0gZnJvbSAnLi9lbmdpbmVzL3BsYXllci1lbmdpbmUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTZWdtZW50RW5naW5lIH0gZnJvbSAnLi9lbmdpbmVzL3NlZ21lbnQtZW5naW5lJztcblxuLy8gbWFzdGVyc1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQbGF5Q29udHJvbCB9IGZyb20gJy4vbWFzdGVycy9wbGF5LWNvbnRyb2wnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUcmFuc3BvcnQgfSBmcm9tICcuL21hc3RlcnMvdHJhbnNwb3J0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU2NoZWR1bGVyIH0gZnJvbSAnLi9tYXN0ZXJzL3NjaGVkdWxlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFNpbXBsZVNjaGVkdWxlciB9IGZyb20gJy4vbWFzdGVycy9zaW1wbGUtc2NoZWR1bGVyJztcblxuLy8gZmFjdG9yaWVzXG5leHBvcnQgeyBnZXRTY2hlZHVsZXIgfSBmcm9tICcuL21hc3RlcnMvZmFjdG9yaWVzJztcbmV4cG9ydCB7IGdldFNpbXBsZVNjaGVkdWxlciB9IGZyb20gJy4vbWFzdGVycy9mYWN0b3JpZXMnO1xuIl19//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get2 = __webpack_require__(60);\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(9);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _audioContext = __webpack_require__(16);\n\nvar _audioContext2 = _interopRequireDefault(_audioContext);\n\nvar _schedulingQueue = __webpack_require__(34);\n\nvar _schedulingQueue2 = _interopRequireDefault(_schedulingQueue);\n\nvar _timeEngine = __webpack_require__(18);\n\nvar _timeEngine2 = _interopRequireDefault(_timeEngine);\n\nvar _factories = __webpack_require__(56);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ESPILON = 1e-8;\n\nvar LoopControl = function (_TimeEngine) {\n  (0, _inherits3.default)(LoopControl, _TimeEngine);\n\n  function LoopControl(playControl) {\n    (0, _classCallCheck3.default)(this, LoopControl);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(LoopControl).call(this));\n\n    _this.__playControl = playControl;\n    _this.lower = -Infinity;\n    _this.upper = Infinity;\n    return _this;\n  }\n\n  // TimeEngine method (scheduled interface)\n\n\n  (0, _createClass3.default)(LoopControl, [{\n    key: 'advanceTime',\n    value: function advanceTime(time) {\n      var playControl = this.__playControl;\n      var speed = playControl.speed;\n      var lower = this.lower;\n      var upper = this.upper;\n\n      if (speed > 0) time += ESPILON;else time -= EPSILON;\n\n      if (speed > 0) {\n        playControl.syncSpeed(time, lower, speed, true);\n        return playControl.__getTimeAtPosition(upper) - ESPILON;\n      } else if (speed < 0) {\n        playControl.syncSpeed(time, upper, speed, true);\n        return playControl.__getTimeAtPosition(lower) + ESPILON;\n      }\n\n      return Infinity;\n    }\n  }, {\n    key: 'reschedule',\n    value: function reschedule(speed) {\n      var playControl = this.__playControl;\n      var lower = Math.min(playControl.__loopStart, playControl.__loopEnd);\n      var upper = Math.max(playControl.__loopStart, playControl.__loopEnd);\n\n      this.speed = speed;\n      this.lower = lower;\n      this.upper = upper;\n\n      if (lower === upper) speed = 0;\n\n      if (speed > 0) this.resetTime(playControl.__getTimeAtPosition(upper) - ESPILON);else if (speed < 0) this.resetTime(playControl.__getTimeAtPosition(lower) + ESPILON);else this.resetTime(Infinity);\n    }\n  }, {\n    key: 'applyLoopBoundaries',\n    value: function applyLoopBoundaries(position, speed) {\n      var lower = this.lower;\n      var upper = this.upper;\n\n      if (speed > 0 && position >= upper) return lower + (position - lower) % (upper - lower);else if (speed < 0 && position < lower) return upper - (upper - position) % (upper - lower);\n\n      return position;\n    }\n  }]);\n  return LoopControl;\n}(_timeEngine2.default);\n\n// play controlled base class\n\n\nvar PlayControlled = function () {\n  function PlayControlled(playControl, engine) {\n    (0, _classCallCheck3.default)(this, PlayControlled);\n\n    this.__playControl = playControl;\n\n    engine.master = this;\n    this.__engine = engine;\n  }\n\n  (0, _createClass3.default)(PlayControlled, [{\n    key: 'syncSpeed',\n    value: function syncSpeed(time, position, speed, seek, lastSpeed) {\n      this.__engine.syncSpeed(time, position, speed, seek);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.__playControl = null;\n\n      this.__engine.master = null;\n      this.__engine = null;\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      return this.__playControl.currentTime;\n    }\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      return this.__playControl.currentPosition;\n    }\n  }]);\n  return PlayControlled;\n}();\n\n// play control for engines implementing the *speed-controlled* interface\n\n\nvar PlayControlledSpeedControlled = function (_PlayControlled) {\n  (0, _inherits3.default)(PlayControlledSpeedControlled, _PlayControlled);\n\n  function PlayControlledSpeedControlled(playControl, engine) {\n    (0, _classCallCheck3.default)(this, PlayControlledSpeedControlled);\n    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PlayControlledSpeedControlled).call(this, playControl, engine));\n  }\n\n  return PlayControlledSpeedControlled;\n}(PlayControlled);\n\n// play control for engines implmenting the *transported* interface\n\n\nvar PlayControlledTransported = function (_PlayControlled2) {\n  (0, _inherits3.default)(PlayControlledTransported, _PlayControlled2);\n\n  function PlayControlledTransported(playControl, engine) {\n    (0, _classCallCheck3.default)(this, PlayControlledTransported);\n\n    var _this3 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PlayControlledTransported).call(this, playControl, engine));\n\n    _this3.__schedulerHook = new PlayControlledSchedulerHook(playControl, engine);\n    return _this3;\n  }\n\n  (0, _createClass3.default)(PlayControlledTransported, [{\n    key: 'syncSpeed',\n    value: function syncSpeed(time, position, speed, seek, lastSpeed) {\n      if (speed !== lastSpeed || seek && speed !== 0) {\n        var nextPosition;\n\n        // resync transported engines\n        if (seek || speed * lastSpeed < 0) {\n          // seek or reverse direction\n          nextPosition = this.__engine.syncPosition(time, position, speed);\n        } else if (lastSpeed === 0) {\n          // start\n          nextPosition = this.__engine.syncPosition(time, position, speed);\n        } else if (speed === 0) {\n          // stop\n          nextPosition = Infinity;\n\n          if (this.__engine.syncSpeed) this.__engine.syncSpeed(time, position, 0);\n        } else if (this.__engine.syncSpeed) {\n          // change speed without reversing direction\n          this.__engine.syncSpeed(time, position, speed);\n        }\n\n        this.__schedulerHook.resetPosition(nextPosition);\n      }\n    }\n  }, {\n    key: 'resetEnginePosition',\n    value: function resetEnginePosition(engine) {\n      var position = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];\n\n      if (position === undefined) {\n        var playControl = this.__playControl;\n        var time = playControl.__sync();\n\n        position = this.__engine.syncPosition(time, playControl.__position, playControl.__speed);\n      }\n\n      this.__schedulerHook.resetPosition(position);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.__schedulerHook.destroy();\n      this.__schedulerHook = null;\n\n      (0, _get3.default)((0, _getPrototypeOf2.default)(PlayControlledTransported.prototype), 'destroy', this).call(this);\n    }\n  }]);\n  return PlayControlledTransported;\n}(PlayControlled);\n\n// play control for time engines implementing the *scheduled* interface\n\n\nvar PlayControlledScheduled = function (_PlayControlled3) {\n  (0, _inherits3.default)(PlayControlledScheduled, _PlayControlled3);\n\n  function PlayControlledScheduled(playControl, engine) {\n    (0, _classCallCheck3.default)(this, PlayControlledScheduled);\n\n\n    // scheduling queue becomes master of engine\n\n    var _this4 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PlayControlledScheduled).call(this, playControl, engine));\n\n    engine.master = null;\n    _this4.__schedulingQueue = new PlayControlledSchedulingQueue(playControl, engine);\n    return _this4;\n  }\n\n  (0, _createClass3.default)(PlayControlledScheduled, [{\n    key: 'syncSpeed',\n    value: function syncSpeed(time, position, speed, seek, lastSpeed) {\n      if (lastSpeed === 0 && speed !== 0) // start or seek\n        this.__engine.resetTime();else if (lastSpeed !== 0 && speed === 0) // stop\n        this.__engine.resetTime(Infinity);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.__schedulingQueue.destroy();\n      (0, _get3.default)((0, _getPrototypeOf2.default)(PlayControlledScheduled.prototype), 'destroy', this).call(this);\n    }\n  }]);\n  return PlayControlledScheduled;\n}(PlayControlled);\n\n// translates transported engine advancePosition into global scheduler times\n\n\nvar PlayControlledSchedulerHook = function (_TimeEngine2) {\n  (0, _inherits3.default)(PlayControlledSchedulerHook, _TimeEngine2);\n\n  function PlayControlledSchedulerHook(playControl, engine) {\n    (0, _classCallCheck3.default)(this, PlayControlledSchedulerHook);\n\n    var _this5 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PlayControlledSchedulerHook).call(this));\n\n    _this5.__playControl = playControl;\n    _this5.__engine = engine;\n\n    _this5.__nextPosition = Infinity;\n    playControl.__scheduler.add(_this5, Infinity);\n    return _this5;\n  }\n\n  (0, _createClass3.default)(PlayControlledSchedulerHook, [{\n    key: 'advanceTime',\n    value: function advanceTime(time) {\n      var playControl = this.__playControl;\n      var engine = this.__engine;\n      var position = this.__nextPosition;\n      var nextPosition = engine.advancePosition(time, position, playControl.__speed);\n      var nextTime = playControl.__getTimeAtPosition(nextPosition);\n\n      this.__nextPosition = nextPosition;\n      return nextTime;\n    }\n  }, {\n    key: 'resetPosition',\n    value: function resetPosition() {\n      var position = arguments.length <= 0 || arguments[0] === undefined ? this.__nextPosition : arguments[0];\n\n      var time = this.__playControl.__getTimeAtPosition(position);\n      this.__nextPosition = position;\n      this.resetTime(time);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.__playControl.__scheduler.remove(this);\n      this.__playControl = null;\n      this.__engine = null;\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      return this.__playControl.currentTime;\n    }\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      return this.__playControl.currentPosition;\n    }\n  }]);\n  return PlayControlledSchedulerHook;\n}(_timeEngine2.default);\n\n// internal scheduling queue that returns the current position (and time) of the play control\n\n\nvar PlayControlledSchedulingQueue = function (_SchedulingQueue) {\n  (0, _inherits3.default)(PlayControlledSchedulingQueue, _SchedulingQueue);\n\n  function PlayControlledSchedulingQueue(playControl, engine) {\n    (0, _classCallCheck3.default)(this, PlayControlledSchedulingQueue);\n\n    var _this6 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PlayControlledSchedulingQueue).call(this));\n\n    _this6.__playControl = playControl;\n    _this6.__engine = engine;\n\n    _this6.add(engine, Infinity);\n    playControl.__scheduler.add(_this6, Infinity);\n    return _this6;\n  }\n\n  (0, _createClass3.default)(PlayControlledSchedulingQueue, [{\n    key: 'destroy',\n    value: function destroy() {\n      this.__playControl.__scheduler.remove(this);\n      this.remove(this.__engine);\n\n      this.__playControl = null;\n      this.__engine = null;\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      return this.__playControl.currentTime;\n    }\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      return this.__playControl.currentPosition;\n    }\n  }]);\n  return PlayControlledSchedulingQueue;\n}(_schedulingQueue2.default);\n\n// play control meta-class\n\n\nvar PlayControl = function (_TimeEngine3) {\n  (0, _inherits3.default)(PlayControl, _TimeEngine3);\n\n  function PlayControl(engine) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n    (0, _classCallCheck3.default)(this, PlayControl);\n\n    var _this7 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PlayControl).call(this));\n\n    _this7.audioContext = options.audioContext || _audioContext2.default;\n    _this7.__scheduler = (0, _factories.getScheduler)(_this7.audioContext);\n\n    _this7.__playControlled = null;\n\n    _this7.__loopControl = null;\n    _this7.__loopStart = 0;\n    _this7.__loopEnd = 1;\n\n    // synchronized tie, position, and speed\n    _this7.__time = 0;\n    _this7.__position = 0;\n    _this7.__speed = 0;\n\n    // non-zero \"user\" speed\n    _this7.__playingSpeed = 1;\n\n    if (engine) _this7.__setEngine(engine);\n    return _this7;\n  }\n\n  (0, _createClass3.default)(PlayControl, [{\n    key: '__setEngine',\n    value: function __setEngine(engine) {\n      if (engine.master) throw new Error(\"object has already been added to a master\");\n\n      if (_timeEngine2.default.implementsSpeedControlled(engine)) this.__playControlled = new PlayControlledSpeedControlled(this, engine);else if (_timeEngine2.default.implementsTransported(engine)) this.__playControlled = new PlayControlledTransported(this, engine);else if (_timeEngine2.default.implementsScheduled(engine)) this.__playControlled = new PlayControlledScheduled(this, engine);else throw new Error(\"object cannot be added to play control\");\n    }\n  }, {\n    key: '__resetEngine',\n    value: function __resetEngine() {\n      this.__playControlled.destroy();\n      this.__playControlled = null;\n    }\n\n    /**\n     * Calculate/extrapolate playing time for given position\n     * @param {Number} position position\n     * @return {Number} extrapolated time\n     */\n\n  }, {\n    key: '__getTimeAtPosition',\n    value: function __getTimeAtPosition(position) {\n      return this.__time + (position - this.__position) / this.__speed;\n    }\n\n    /**\n     * Calculate/extrapolate playing position for given time\n     * @param {Number} time time\n     * @return {Number} extrapolated position\n     */\n\n  }, {\n    key: '__getPositionAtTime',\n    value: function __getPositionAtTime(time) {\n      return this.__position + (time - this.__time) * this.__speed;\n    }\n  }, {\n    key: '__sync',\n    value: function __sync() {\n      var now = this.currentTime;\n      this.__position += (now - this.__time) * this.__speed;\n      this.__time = now;\n      return now;\n    }\n\n    /**\n     * Get current master time\n     * @return {Number} current time\n     *\n     * This function will be replaced when the play-control is added to a master.\n     */\n\n  }, {\n    key: 'set',\n    value: function set() {\n      var engine = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\n      var time = this.__sync();\n      var speed = this.__speed;\n\n      if (this.__playControlled !== null && this.__playControlled.__engine !== engine) {\n\n        this.syncSpeed(time, this.__position, 0);\n\n        if (this.__playControlled) this.__resetEngine();\n\n        if (this.__playControlled === null && engine !== null) {\n          this.__setEngine(engine);\n\n          if (speed !== 0) this.syncSpeed(time, this.__position, speed);\n        }\n      }\n    }\n  }, {\n    key: 'setLoopBoundaries',\n    value: function setLoopBoundaries(loopStart, loopEnd) {\n      this.__loopStart = loopStart;\n      this.__loopEnd = loopEnd;\n\n      this.loop = this.loop;\n    }\n  }, {\n    key: 'syncSpeed',\n\n\n    // TimeEngine method (speed-controlled interface)\n    value: function syncSpeed(time, position, speed) {\n      var seek = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n      var lastSpeed = this.__speed;\n\n      if (speed !== lastSpeed || seek) {\n        if ((seek || lastSpeed === 0) && this.__loopControl) position = this.__loopControl.applyLoopBoundaries(position, speed);\n\n        this.__time = time;\n        this.__position = position;\n        this.__speed = speed;\n\n        if (this.__playControlled) this.__playControlled.syncSpeed(time, position, speed, seek, lastSpeed);\n\n        if (this.__loopControl) this.__loopControl.reschedule(speed);\n      }\n    }\n\n    /**\n     * Start playing\n     */\n\n  }, {\n    key: 'start',\n    value: function start() {\n      var time = this.__sync();\n      this.syncSpeed(time, this.__position, this.__playingSpeed);\n    }\n\n    /**\n     * Pause playing\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      var time = this.__sync();\n      this.syncSpeed(time, this.__position, 0);\n    }\n\n    /**\n     * Stop playing\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var time = this.__sync();\n      this.syncSpeed(time, this.__position, 0);\n      this.seek(0);\n    }\n\n    /**\n     * Set playing speed\n     * @param {Number} speed playing speed (non-zero speed between -16 and -1/16 or between 1/16 and 16)\n     */\n\n  }, {\n    key: 'seek',\n\n\n    /**\n     * Set (jump to) playing position\n     * @param {Number} position target position\n     */\n    value: function seek(position) {\n      if (position !== this.__position) {\n        var time = this.__sync();\n        this.__position = position;\n        this.syncSpeed(time, position, this.__speed, true);\n      }\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      return this.__scheduler.currentTime;\n    }\n\n    /**\n     * Get current master position\n     * @return {Number} current playing position\n     *\n     * This function will be replaced when the play-control is added to a master.\n     */\n\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      return this.__position + (this.__scheduler.currentTime - this.__time) * this.__speed;\n    }\n  }, {\n    key: 'loop',\n    set: function set(enable) {\n      if (enable && this.__loopStart > -Infinity && this.__loopEnd < Infinity) {\n        if (!this.__loopControl) {\n          this.__loopControl = new LoopControl(this);\n          this.__scheduler.add(this.__loopControl, Infinity);\n        }\n\n        if (this.__speed !== 0) {\n          var position = this.currentPosition;\n          var lower = Math.min(this.__loopStart, this.__loopEnd);\n          var upper = Math.max(this.__loopStart, this.__loopEnd);\n\n          if (this.__speed > 0 && position > upper) this.seek(upper);else if (this.__speed < 0 && position < lower) this.seek(lower);else this.__loopControl.reschedule(this.__speed);\n        }\n      } else if (this.__loopControl) {\n        this.__scheduler.remove(this.__loopControl);\n        this.__loopControl = null;\n      }\n    },\n    get: function get() {\n      return !!this.__loopControl;\n    }\n  }, {\n    key: 'loopStart',\n    set: function set(loopStart) {\n      this.setLoopBoundaries(loopStart, this.__loopEnd);\n    },\n    get: function get() {\n      return this.__loopStart;\n    }\n  }, {\n    key: 'loopEnd',\n    set: function set(loopEnd) {\n      this.setLoopBoundaries(this.__loopStart, loopEnd);\n    },\n    get: function get() {\n      return this.__loopEnd;\n    }\n  }, {\n    key: 'speed',\n    set: function set(speed) {\n      var time = this.__sync();\n\n      if (speed >= 0) {\n        if (speed < 0.01) speed = 0.01;else if (speed > 100) speed = 100;\n      } else {\n        if (speed < -100) speed = -100;else if (speed > -0.01) speed = -0.01;\n      }\n\n      this.__playingSpeed = speed;\n\n      if (this.__speed !== 0) this.syncSpeed(time, this.__position, speed);\n    }\n\n    /**\n     * Get playing speed\n     * @return current playing speed\n     */\n    ,\n    get: function get() {\n      return this.__playingSpeed;\n    }\n  }]);\n  return PlayControl;\n}(_timeEngine2.default);\n\nexports.default = PlayControl;\n//# sourceMappingURL=data:application/json;base64,# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getIterator2 = __webpack_require__(78);\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _get2 = __webpack_require__(60);\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _getPrototypeOf = __webpack_require__(4);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(9);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(8);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _audioContext = __webpack_require__(16);\n\nvar _audioContext2 = _interopRequireDefault(_audioContext);\n\nvar _priorityQueue = __webpack_require__(55);\n\nvar _priorityQueue2 = _interopRequireDefault(_priorityQueue);\n\nvar _schedulingQueue = __webpack_require__(34);\n\nvar _schedulingQueue2 = _interopRequireDefault(_schedulingQueue);\n\nvar _timeEngine = __webpack_require__(18);\n\nvar _timeEngine2 = _interopRequireDefault(_timeEngine);\n\nvar _factories = __webpack_require__(56);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction addDuplet(firstArray, secondArray, firstElement, secondElement) {\n  firstArray.push(firstElement);\n  secondArray.push(secondElement);\n}\n\nfunction removeDuplet(firstArray, secondArray, firstElement) {\n  var index = firstArray.indexOf(firstElement);\n\n  if (index >= 0) {\n    var secondElement = secondArray[index];\n\n    firstArray.splice(index, 1);\n    secondArray.splice(index, 1);\n\n    return secondElement;\n  }\n\n  return null;\n}\n\n// The Transported call is the base class of the adapters between\n// different types of engines (i.e. transported, scheduled, play-controlled)\n// The adapters are at the same time masters for the engines added to the transport\n// and transported TimeEngines inserted into the transport's position-based pritority queue.\n\nvar Transported = function (_TimeEngine) {\n  (0, _inherits3.default)(Transported, _TimeEngine);\n\n  function Transported(transport, engine, start, duration, offset) {\n    var stretch = arguments.length <= 5 || arguments[5] === undefined ? 1 : arguments[5];\n    (0, _classCallCheck3.default)(this, Transported);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Transported).call(this));\n\n    _this.master = transport;\n\n    _this.__engine = engine;\n    engine.master = _this;\n\n    _this.__startPosition = start;\n    _this.__endPosition = !isFinite(duration) ? Infinity : start + duration;\n    _this.__offsetPosition = start + offset;\n    _this.__stretchPosition = stretch;\n    _this.__isRunning = false;\n    return _this;\n  }\n\n  (0, _createClass3.default)(Transported, [{\n    key: 'setBoundaries',\n    value: function setBoundaries(start, duration) {\n      var offset = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n      var stretch = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];\n\n      this.__startPosition = start;\n      this.__endPosition = start + duration;\n      this.__offsetPosition = start + offset;\n      this.__stretchPosition = stretch;\n      this.resetPosition();\n    }\n  }, {\n    key: 'start',\n    value: function start(time, position, speed) {}\n  }, {\n    key: 'stop',\n    value: function stop(time, position) {}\n  }, {\n    key: 'resetPosition',\n    value: function resetPosition(position) {\n      if (position !== undefined) position += this.__offsetPosition;\n\n      this.master.resetEnginePosition(this, position);\n    }\n  }, {\n    key: 'syncPosition',\n    value: function syncPosition(time, position, speed) {\n      if (speed > 0) {\n        if (position < this.__startPosition) {\n\n          if (this.__isRunning) this.stop(time, position - this.__offsetPosition);\n\n          this.__isRunning = false;\n          return this.__startPosition;\n        } else if (position < this.__endPosition) {\n          this.start(time, position - this.__offsetPosition, speed);\n\n          this.__isRunning = true;\n          return this.__endPosition;\n        }\n      } else {\n        if (position > this.__endPosition) {\n          if (this.__isRunning) // if engine is running\n            this.stop(time, position - this.__offsetPosition);\n\n          this.__isRunning = false;\n          return this.__endPosition;\n        } else if (position > this.__startPosition) {\n          this.start(time, position - this.__offsetPosition, speed);\n\n          this.__isRunning = true;\n          return this.__startPosition;\n        }\n      }\n\n      if (this.__isRunning) // if engine is running\n        this.stop(time, position);\n\n      this.__isRunning = false;\n      return Infinity * speed;\n    }\n  }, {\n    key: 'advancePosition',\n    value: function advancePosition(time, position, speed) {\n      if (!this.__isRunning) {\n        this.start(time, position - this.__offsetPosition, speed);\n        this.__isRunning = true;\n\n        if (speed > 0) return this.__endPosition;\n\n        return this.__startPosition;\n      }\n\n      // stop engine\n      this.stop(time, position - this.__offsetPosition);\n\n      this.__isRunning = false;\n      return Infinity * speed;\n    }\n  }, {\n    key: 'syncSpeed',\n    value: function syncSpeed(time, position, speed) {\n      if (speed === 0) // stop\n        this.stop(time, position - this.__offsetPosition);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.master = null;\n\n      this.__engine.master = null;\n      this.__engine = null;\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      return this.master.currentTime;\n    }\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      return this.master.currentPosition - this.__offsetPosition;\n    }\n  }]);\n  return Transported;\n}(_timeEngine2.default);\n\n// TransportedTransported\n// has to switch on and off the scheduled engines when the transport hits the engine's start and end position\n\n\nvar TransportedTransported = function (_Transported) {\n  (0, _inherits3.default)(TransportedTransported, _Transported);\n\n  function TransportedTransported(transport, engine, startPosition, endPosition, offsetPosition) {\n    (0, _classCallCheck3.default)(this, TransportedTransported);\n    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(TransportedTransported).call(this, transport, engine, startPosition, endPosition, offsetPosition));\n  }\n\n  (0, _createClass3.default)(TransportedTransported, [{\n    key: 'syncPosition',\n    value: function syncPosition(time, position, speed) {\n      if (speed > 0 && position < this.__endPosition) position = Math.max(position, this.__startPosition);else if (speed < 0 && position >= this.__startPosition) position = Math.min(position, this.__endPosition);\n\n      return this.__offsetPosition + this.__engine.syncPosition(time, position - this.__offsetPosition, speed);\n    }\n  }, {\n    key: 'advancePosition',\n    value: function advancePosition(time, position, speed) {\n      position = this.__offsetPosition + this.__engine.advancePosition(time, position - this.__offsetPosition, speed);\n\n      if (speed > 0 && position < this.__endPosition || speed < 0 && position >= this.__startPosition) return position;\n\n      return Infinity * speed;\n    }\n  }, {\n    key: 'syncSpeed',\n    value: function syncSpeed(time, position, speed) {\n      if (this.__engine.syncSpeed) this.__engine.syncSpeed(time, position, speed);\n    }\n  }, {\n    key: 'resetEnginePosition',\n    value: function resetEnginePosition(engine) {\n      var position = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];\n\n      if (position !== undefined) position += this.__offsetPosition;\n\n      this.resetPosition(position);\n    }\n  }]);\n  return TransportedTransported;\n}(Transported);\n\n// TransportedSpeedControlled\n// has to start and stop the speed-controlled engines when the transport hits the engine's start and end position\n\n\nvar TransportedSpeedControlled = function (_Transported2) {\n  (0, _inherits3.default)(TransportedSpeedControlled, _Transported2);\n\n  function TransportedSpeedControlled(transport, engine, startPosition, endPosition, offsetPosition) {\n    (0, _classCallCheck3.default)(this, TransportedSpeedControlled);\n    return (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(TransportedSpeedControlled).call(this, transport, engine, startPosition, endPosition, offsetPosition));\n  }\n\n  (0, _createClass3.default)(TransportedSpeedControlled, [{\n    key: 'start',\n    value: function start(time, position, speed) {\n      this.__engine.syncSpeed(time, position, speed, true);\n    }\n  }, {\n    key: 'stop',\n    value: function stop(time, position) {\n      this.__engine.syncSpeed(time, position, 0);\n    }\n  }, {\n    key: 'syncSpeed',\n    value: function syncSpeed(time, position, speed) {\n      if (this.__isRunning) this.__engine.syncSpeed(time, position, speed);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.__engine.syncSpeed(this.master.currentTime, this.master.currentPosition - this.__offsetPosition, 0);\n      (0, _get3.default)((0, _getPrototypeOf2.default)(TransportedSpeedControlled.prototype), 'destroy', this).call(this);\n    }\n  }]);\n  return TransportedSpeedControlled;\n}(Transported);\n\n// TransportedScheduled\n// has to switch on and off the scheduled engines when the transport hits the engine's start and end position\n\n\nvar TransportedScheduled = function (_Transported3) {\n  (0, _inherits3.default)(TransportedScheduled, _Transported3);\n\n  function TransportedScheduled(transport, engine, startPosition, endPosition, offsetPosition) {\n    (0, _classCallCheck3.default)(this, TransportedScheduled);\n\n\n    // scheduling queue becomes master of engine\n\n    var _this4 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(TransportedScheduled).call(this, transport, engine, startPosition, endPosition, offsetPosition));\n\n    engine.master = null;\n    transport.__schedulingQueue.add(engine, Infinity);\n    return _this4;\n  }\n\n  (0, _createClass3.default)(TransportedScheduled, [{\n    key: 'start',\n    value: function start(time, position, speed) {\n      this.master.__schedulingQueue.resetEngineTime(this.__engine, time);\n    }\n  }, {\n    key: 'stop',\n    value: function stop(time, position) {\n      this.master.__schedulingQueue.resetEngineTime(this.__engine, Infinity);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.master.__schedulingQueue.remove(this.__engine);\n      (0, _get3.default)((0, _getPrototypeOf2.default)(TransportedScheduled.prototype), 'destroy', this).call(this);\n    }\n  }]);\n  return TransportedScheduled;\n}(Transported);\n\n// translates advancePosition of *transported* engines into global scheduler times\n\n\nvar TransportSchedulerHook = function (_TimeEngine2) {\n  (0, _inherits3.default)(TransportSchedulerHook, _TimeEngine2);\n\n  function TransportSchedulerHook(transport) {\n    (0, _classCallCheck3.default)(this, TransportSchedulerHook);\n\n    var _this5 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(TransportSchedulerHook).call(this));\n\n    _this5.__transport = transport;\n\n    _this5.__nextPosition = Infinity;\n    _this5.__nextTime = Infinity;\n    transport.__scheduler.add(_this5, Infinity);\n    return _this5;\n  }\n\n  // TimeEngine method (scheduled interface)\n\n\n  (0, _createClass3.default)(TransportSchedulerHook, [{\n    key: 'advanceTime',\n    value: function advanceTime(time) {\n      var transport = this.__transport;\n      var position = this.__nextPosition;\n      var speed = transport.__speed;\n      var nextPosition = transport.advancePosition(time, position, speed);\n      var nextTime = transport.__getTimeAtPosition(nextPosition);\n\n      this.__nextPosition = nextPosition;\n      this.__nextTime = nextTime;\n\n      return nextTime;\n    }\n  }, {\n    key: 'resetPosition',\n    value: function resetPosition() {\n      var position = arguments.length <= 0 || arguments[0] === undefined ? this.__nextPosition : arguments[0];\n\n      var transport = this.__transport;\n      var time = transport.__getTimeAtPosition(position);\n\n      this.__nextPosition = position;\n      this.__nextTime = time;\n\n      this.resetTime(time);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.__transport.__scheduler.remove(this);\n      this.__transport = null;\n    }\n  }]);\n  return TransportSchedulerHook;\n}(_timeEngine2.default);\n\n// internal scheduling queue that returns the current position (and time) of the play control\n\n\nvar TransportSchedulingQueue = function (_SchedulingQueue) {\n  (0, _inherits3.default)(TransportSchedulingQueue, _SchedulingQueue);\n\n  function TransportSchedulingQueue(transport) {\n    (0, _classCallCheck3.default)(this, TransportSchedulingQueue);\n\n    var _this6 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(TransportSchedulingQueue).call(this));\n\n    _this6.__transport = transport;\n    transport.__scheduler.add(_this6, Infinity);\n    return _this6;\n  }\n\n  (0, _createClass3.default)(TransportSchedulingQueue, [{\n    key: 'destroy',\n    value: function destroy() {\n      this.__transport.__scheduler.remove(this);\n      this.__transport = null;\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      return this.__transport.currentTime;\n    }\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      return this.__transport.currentPosition;\n    }\n  }]);\n  return TransportSchedulingQueue;\n}(_schedulingQueue2.default);\n\n/**\n * Transport class\n */\n\n\nvar Transport = function (_TimeEngine3) {\n  (0, _inherits3.default)(Transport, _TimeEngine3);\n\n  function Transport() {\n    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n    (0, _classCallCheck3.default)(this, Transport);\n\n    var _this7 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Transport).call(this));\n\n    _this7.audioContext = options.audioContext || _audioContext2.default;\n\n    _this7.__engines = [];\n    _this7.__transported = [];\n\n    _this7.__scheduler = (0, _factories.getScheduler)(_this7.audioContext);\n    _this7.__schedulerHook = new TransportSchedulerHook(_this7);\n    _this7.__transportedQueue = new _priorityQueue2.default();\n    _this7.__schedulingQueue = new TransportSchedulingQueue(_this7);\n\n    // syncronized time, position, and speed\n    _this7.__time = 0;\n    _this7.__position = 0;\n    _this7.__speed = 0;\n    return _this7;\n  }\n\n  (0, _createClass3.default)(Transport, [{\n    key: '__getTimeAtPosition',\n    value: function __getTimeAtPosition(position) {\n      return this.__time + (position - this.__position) / this.__speed;\n    }\n  }, {\n    key: '__getPositionAtTime',\n    value: function __getPositionAtTime(time) {\n      return this.__position + (time - this.__time) * this.__speed;\n    }\n  }, {\n    key: '__syncTransportedPosition',\n    value: function __syncTransportedPosition(time, position, speed) {\n      var numTransportedEngines = this.__transported.length;\n      var nextPosition = Infinity * speed;\n\n      if (numTransportedEngines > 0) {\n        this.__transportedQueue.clear();\n        this.__transportedQueue.reverse = speed < 0;\n\n        for (var i = 0; i < numTransportedEngines; i++) {\n          var engine = this.__transported[i];\n          var nextEnginePosition = engine.syncPosition(time, position, speed);\n          this.__transportedQueue.insert(engine, nextEnginePosition);\n        }\n\n        nextPosition = this.__transportedQueue.time;\n      }\n\n      return nextPosition;\n    }\n  }, {\n    key: '__syncTransportedSpeed',\n    value: function __syncTransportedSpeed(time, position, speed) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)(this.__transported), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var transported = _step.value;\n\n          transported.syncSpeed(time, position, speed);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    /**\n     * Get current master time\n     * @return {Number} current time\n     *\n     * This function will be replaced when the transport is added to a master (i.e. transport or play-control).\n     */\n\n  }, {\n    key: 'resetPosition',\n\n\n    /**\n     * Reset next transport position\n     * @param {Number} next transport position\n     */\n    value: function resetPosition(position) {\n      var master = this.master;\n\n      if (master && master.resetEnginePosition !== undefined) master.resetEnginePosition(this, position);else this.__schedulerHook.resetPosition(position);\n    }\n\n    // TimeEngine method (transported interface)\n\n  }, {\n    key: 'syncPosition',\n    value: function syncPosition(time, position, speed) {\n      this.__time = time;\n      this.__position = position;\n      this.__speed = speed;\n\n      return this.__syncTransportedPosition(time, position, speed);\n    }\n\n    // TimeEngine method (transported interface)\n\n  }, {\n    key: 'advancePosition',\n    value: function advancePosition(time, position, speed) {\n      var engine = this.__transportedQueue.head;\n      var nextEnginePosition = engine.advancePosition(time, position, speed);\n      return this.__transportedQueue.move(engine, nextEnginePosition);\n    }\n\n    // TimeEngine method (speed-controlled interface)\n\n  }, {\n    key: 'syncSpeed',\n    value: function syncSpeed(time, position, speed) {\n      var seek = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n      var lastSpeed = this.__speed;\n\n      this.__time = time;\n      this.__position = position;\n      this.__speed = speed;\n\n      if (speed !== lastSpeed || seek && speed !== 0) {\n        var nextPosition = void 0;\n\n        // resync transported engines\n        if (seek || speed * lastSpeed < 0) {\n          // seek or reverse direction\n          nextPosition = this.__syncTransportedPosition(time, position, speed);\n        } else if (lastSpeed === 0) {\n          // start\n          nextPosition = this.__syncTransportedPosition(time, position, speed);\n        } else if (speed === 0) {\n          // stop\n          nextPosition = Infinity;\n          this.__syncTransportedSpeed(time, position, 0);\n        } else {\n          // change speed without reversing direction\n          this.__syncTransportedSpeed(time, position, speed);\n        }\n\n        this.resetPosition(nextPosition);\n      }\n    }\n\n    /**\n     * Add a time engine to the transport\n     * @param {Object} engine engine to be added to the transport\n     * @param {Number} position start position\n     */\n\n  }, {\n    key: 'add',\n    value: function add(engine) {\n      var startPosition = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      var endPosition = arguments.length <= 2 || arguments[2] === undefined ? Infinity : arguments[2];\n      var offsetPosition = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n      var transported = null;\n\n      if (offsetPosition === -Infinity) offsetPosition = 0;\n\n      if (engine.master) throw new Error(\"object has already been added to a master\");\n\n      if (_timeEngine2.default.implementsTransported(engine)) transported = new TransportedTransported(this, engine, startPosition, endPosition, offsetPosition);else if (_timeEngine2.default.implementsSpeedControlled(engine)) transported = new TransportedSpeedControlled(this, engine, startPosition, endPosition, offsetPosition);else if (_timeEngine2.default.implementsScheduled(engine)) transported = new TransportedScheduled(this, engine, startPosition, endPosition, offsetPosition);else throw new Error(\"object cannot be added to a transport\");\n\n      if (transported) {\n        var speed = this.__speed;\n\n        addDuplet(this.__engines, this.__transported, engine, transported);\n\n        if (speed !== 0) {\n          // sync and start\n          var nextEnginePosition = transported.syncPosition(this.currentTime, this.currentPosition, speed);\n          var nextPosition = this.__transportedQueue.insert(transported, nextEnginePosition);\n\n          this.resetPosition(nextPosition);\n        }\n      }\n\n      return transported;\n    }\n\n    /**\n     * Remove a time engine from the transport\n     * @param {object} engineOrTransported engine or transported to be removed from the transport\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(engineOrTransported) {\n      var engine = engineOrTransported;\n      var transported = removeDuplet(this.__engines, this.__transported, engineOrTransported);\n\n      if (!transported) {\n        engine = removeDuplet(this.__transported, this.__engines, engineOrTransported);\n        transported = engineOrTransported;\n      }\n\n      if (engine && transported) {\n        var nextPosition = this.__transportedQueue.remove(transported);\n\n        transported.destroy();\n\n        if (this.__speed !== 0) this.resetPosition(nextPosition);\n      } else {\n        throw new Error(\"object has not been added to this transport\");\n      }\n    }\n  }, {\n    key: 'resetEnginePosition',\n    value: function resetEnginePosition(transported) {\n      var position = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];\n\n      var speed = this.__speed;\n\n      if (speed !== 0) {\n        if (position === undefined) position = transported.syncPosition(this.currentTime, this.currentPosition, speed);\n\n        var nextPosition = this.__transportedQueue.move(transported, position);\n        this.resetPosition(nextPosition);\n      }\n    }\n\n    /**\n     * Remove all time engines from the transport\n     */\n\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.syncSpeed(this.currentTime, this.currentPosition, 0);\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = (0, _getIterator3.default)(this.__transported), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var transported = _step2.value;\n\n          transported.destroy();\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'currentTime',\n    get: function get() {\n      return this.__scheduler.currentTime;\n    }\n\n    /**\n     * Get current master position\n     * @return {Number} current playing position\n     *\n     * This function will be replaced when the transport is added to a master (i.e. transport or play-control).\n     */\n\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      var master = this.master;\n\n      if (master && master.currentPosition !== undefined) return master.currentPosition;\n\n      return this.__position + (this.__scheduler.currentTime - this.__time) * this.__speed;\n    }\n  }]);\n  return Transport;\n}(_timeEngine2.default);\n\nexports.default = Transport;\n//# sourceMappingURL=data:application/json;base64,# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! wavesurfer.js 1.3.7 (Sun, 19 Mar 2017 17:49:02 GMT)\n* https://github.com/katspaugh/wavesurfer.js\n* @license CC-BY-3.0 */!function(a,b){ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function(a){return b(a)}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):\"object\"==typeof exports?module.exports=b(require(\"wavesurfer.js\")):b(WaveSurfer)}(this,function(a){\"use strict\";a.Regions={init:function(a){this.wavesurfer=a,this.wrapper=this.wavesurfer.drawer.wrapper,this.list={}},add:function(b){var c=Object.create(a.Region);return c.init(b,this.wavesurfer),this.list[c.id]=c,c.on(\"remove\",function(){delete this.list[c.id]}.bind(this)),c},clear:function(){Object.keys(this.list).forEach(function(a){this.list[a].remove()},this)},enableDragSelection:function(a){var b,c,d,e,f=this,g=a.slop||2,h=0,i=function(a){a.touches&&a.touches.length>1||a.target.childElementCount>0||(e=a.targetTouches?a.targetTouches[0].identifier:null,b=!0,c=f.wavesurfer.drawer.handleEvent(a,!0),d=null)};this.wrapper.addEventListener(\"mousedown\",i),this.wrapper.addEventListener(\"touchstart\",i),this.on(\"disable-drag-selection\",function(){f.wrapper.removeEventListener(\"touchstart\",i),f.wrapper.removeEventListener(\"mousedown\",i)});var j=function(a){a.touches&&a.touches.length>1||(b=!1,h=0,d&&(d.fireEvent(\"update-end\",a),f.wavesurfer.fireEvent(\"region-update-end\",d,a)),d=null)};this.wrapper.addEventListener(\"mouseup\",j),this.wrapper.addEventListener(\"touchend\",j),this.on(\"disable-drag-selection\",function(){f.wrapper.removeEventListener(\"touchend\",j),f.wrapper.removeEventListener(\"mouseup\",j)});var k=function(i){if(b&&!(++h<=g||i.touches&&i.touches.length>1||i.targetTouches&&i.targetTouches[0].identifier!=e)){d||(d=f.add(a||{}));var j=f.wavesurfer.getDuration(),k=f.wavesurfer.drawer.handleEvent(i);d.update({start:Math.min(k*j,c*j),end:Math.max(k*j,c*j)})}};this.wrapper.addEventListener(\"mousemove\",k),this.wrapper.addEventListener(\"touchmove\",k),this.on(\"disable-drag-selection\",function(){f.wrapper.removeEventListener(\"touchmove\",k),f.wrapper.removeEventListener(\"mousemove\",k)})},disableDragSelection:function(){this.fireEvent(\"disable-drag-selection\")}},a.util.extend(a.Regions,a.Observer),a.Region={style:a.Drawer.style,init:function(b,c){this.wavesurfer=c,this.wrapper=c.drawer.wrapper,this.id=null==b.id?a.util.getId():b.id,this.start=Number(b.start)||0,this.end=null==b.end?this.start+4/this.wrapper.scrollWidth*this.wavesurfer.getDuration():Number(b.end),this.resize=void 0===b.resize||Boolean(b.resize),this.drag=void 0===b.drag||Boolean(b.drag),this.loop=Boolean(b.loop),this.color=b.color||\"rgba(0, 0, 0, 0.1)\",this.data=b.data||{},this.attributes=b.attributes||{},this.maxLength=b.maxLength,this.minLength=b.minLength,this.bindInOut(),this.render(),this.onZoom=this.updateRender.bind(this),this.wavesurfer.on(\"zoom\",this.onZoom),this.wavesurfer.fireEvent(\"region-created\",this)},update:function(a){null!=a.start&&(this.start=Number(a.start)),null!=a.end&&(this.end=Number(a.end)),null!=a.loop&&(this.loop=Boolean(a.loop)),null!=a.color&&(this.color=a.color),null!=a.data&&(this.data=a.data),null!=a.resize&&(this.resize=Boolean(a.resize)),null!=a.drag&&(this.drag=Boolean(a.drag)),null!=a.maxLength&&(this.maxLength=Number(a.maxLength)),null!=a.minLength&&(this.minLength=Number(a.minLength)),null!=a.attributes&&(this.attributes=a.attributes),this.updateRender(),this.fireEvent(\"update\"),this.wavesurfer.fireEvent(\"region-updated\",this)},remove:function(){this.element&&(this.wrapper.removeChild(this.element),this.element=null,this.wavesurfer.un(\"zoom\",this.onZoom),this.fireEvent(\"remove\"),this.wavesurfer.fireEvent(\"region-removed\",this))},play:function(){this.wavesurfer.play(this.start,this.end),this.fireEvent(\"play\"),this.wavesurfer.fireEvent(\"region-play\",this)},playLoop:function(){this.play(),this.once(\"out\",this.playLoop.bind(this))},render:function(){var a=document.createElement(\"region\");a.className=\"wavesurfer-region\",a.title=this.formatTime(this.start,this.end),a.setAttribute(\"data-id\",this.id);for(var b in this.attributes)a.setAttribute(\"data-region-\"+b,this.attributes[b]);this.wrapper.scrollWidth;if(this.style(a,{position:\"absolute\",zIndex:2,height:\"100%\",top:\"0px\"}),this.resize){var c=a.appendChild(document.createElement(\"handle\")),d=a.appendChild(document.createElement(\"handle\"));c.className=\"wavesurfer-handle wavesurfer-handle-start\",d.className=\"wavesurfer-handle wavesurfer-handle-end\";var e={cursor:\"col-resize\",position:\"absolute\",left:\"0px\",top:\"0px\",width:\"1%\",maxWidth:\"4px\",height:\"100%\"};this.style(c,e),this.style(d,e),this.style(d,{left:\"100%\"})}this.element=this.wrapper.appendChild(a),this.updateRender(),this.bindEvents(a)},formatTime:function(a,b){return(a==b?[a]:[a,b]).map(function(a){return[Math.floor(a%3600/60),(\"00\"+Math.floor(a%60)).slice(-2)].join(\":\")}).join(\"-\")},getWidth:function(){return this.wavesurfer.drawer.width/this.wavesurfer.params.pixelRatio},updateRender:function(){var a=this.wavesurfer.getDuration(),b=this.getWidth();if(this.start<0&&(this.start=0,this.end=this.end-this.start),this.end>a&&(this.end=a,this.start=a-(this.end-this.start)),null!=this.minLength&&(this.end=Math.max(this.start+this.minLength,this.end)),null!=this.maxLength&&(this.end=Math.min(this.start+this.maxLength,this.end)),null!=this.element){var c=Math.round(this.start/a*b),d=Math.round(this.end/a*b)-c;this.style(this.element,{left:c+\"px\",width:d+\"px\",backgroundColor:this.color,cursor:this.drag?\"move\":\"default\"});for(var e in this.attributes)this.element.setAttribute(\"data-region-\"+e,this.attributes[e]);this.element.title=this.formatTime(this.start,this.end)}},bindInOut:function(){var a=this;a.firedIn=!1,a.firedOut=!1;var b=function(b){!a.firedOut&&a.firedIn&&(a.start>=Math.round(100*b)/100||a.end<=Math.round(100*b)/100)&&(a.firedOut=!0,a.firedIn=!1,a.fireEvent(\"out\"),a.wavesurfer.fireEvent(\"region-out\",a)),!a.firedIn&&a.start<=b&&a.end>b&&(a.firedIn=!0,a.firedOut=!1,a.fireEvent(\"in\"),a.wavesurfer.fireEvent(\"region-in\",a))};this.wavesurfer.backend.on(\"audioprocess\",b),this.on(\"remove\",function(){a.wavesurfer.backend.un(\"audioprocess\",b)}),this.on(\"out\",function(){a.loop&&a.wavesurfer.play(a.start)})},bindEvents:function(){var a=this;this.element.addEventListener(\"mouseenter\",function(b){a.fireEvent(\"mouseenter\",b),a.wavesurfer.fireEvent(\"region-mouseenter\",a,b)}),this.element.addEventListener(\"mouseleave\",function(b){a.fireEvent(\"mouseleave\",b),a.wavesurfer.fireEvent(\"region-mouseleave\",a,b)}),this.element.addEventListener(\"click\",function(b){b.preventDefault(),a.fireEvent(\"click\",b),a.wavesurfer.fireEvent(\"region-click\",a,b)}),this.element.addEventListener(\"dblclick\",function(b){b.stopPropagation(),b.preventDefault(),a.fireEvent(\"dblclick\",b),a.wavesurfer.fireEvent(\"region-dblclick\",a,b)}),(this.drag||this.resize)&&function(){var b,c,d,e,f=a.wavesurfer.getDuration(),g=function(g){g.touches&&g.touches.length>1||(e=g.targetTouches?g.targetTouches[0].identifier:null,g.stopPropagation(),d=a.wavesurfer.drawer.handleEvent(g,!0)*f,\"handle\"==g.target.tagName.toLowerCase()?c=g.target.classList.contains(\"wavesurfer-handle-start\")?\"start\":\"end\":(b=!0,c=!1))},h=function(d){d.touches&&d.touches.length>1||(b||c)&&(b=!1,c=!1,a.fireEvent(\"update-end\",d),a.wavesurfer.fireEvent(\"region-update-end\",a,d))},i=function(g){if(!(g.touches&&g.touches.length>1)&&(!g.targetTouches||g.targetTouches[0].identifier==e)&&(b||c)){var h=a.wavesurfer.drawer.handleEvent(g)*f,i=h-d;d=h,a.drag&&b&&a.onDrag(i),a.resize&&c&&a.onResize(i,c)}};a.element.addEventListener(\"mousedown\",g),a.element.addEventListener(\"touchstart\",g),a.wrapper.addEventListener(\"mousemove\",i),a.wrapper.addEventListener(\"touchmove\",i),document.body.addEventListener(\"mouseup\",h),document.body.addEventListener(\"touchend\",h),a.on(\"remove\",function(){document.body.removeEventListener(\"mouseup\",h),document.body.removeEventListener(\"touchend\",h),a.wrapper.removeEventListener(\"mousemove\",i),a.wrapper.removeEventListener(\"touchmove\",i)}),a.wavesurfer.on(\"destroy\",function(){document.body.removeEventListener(\"mouseup\",h),document.body.removeEventListener(\"touchend\",h)})}()},onDrag:function(a){var b=this.wavesurfer.getDuration();this.end+a>b||this.start+a<0||this.update({start:this.start+a,end:this.end+a})},onResize:function(a,b){\"start\"==b?this.update({start:Math.min(this.start+a,this.end),end:Math.max(this.start+a,this.end)}):this.update({start:Math.min(this.end+a,this.start),end:Math.max(this.end+a,this.start)})}},a.util.extend(a.Region,a.Observer),a.initRegions=function(){this.regions||(this.regions=Object.create(a.Regions),this.regions.init(this))},a.addRegion=function(a){return this.initRegions(),this.regions.add(a)},a.clearRegions=function(){this.regions&&this.regions.clear()},a.enableDragSelection=function(a){this.initRegions(),this.regions.enableDragSelection(a)},a.disableDragSelection=function(){this.regions.disableDragSelection()}});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi93YXZlc3VyZmVyLmpzL2Rpc3QvcGx1Z2luL3dhdmVzdXJmZXIucmVnaW9ucy5taW4uanM/NWYzMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgd2F2ZXN1cmZlci5qcyAxLjMuNyAoU3VuLCAxOSBNYXIgMjAxNyAxNzo0OTowMiBHTVQpXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9rYXRzcGF1Z2gvd2F2ZXN1cmZlci5qc1xuKiBAbGljZW5zZSBDQy1CWS0zLjAgKi8hZnVuY3Rpb24oYSxiKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcIndhdmVzdXJmZXJcIl0sZnVuY3Rpb24oYSl7cmV0dXJuIGIoYSl9KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1iKHJlcXVpcmUoXCJ3YXZlc3VyZmVyLmpzXCIpKTpiKFdhdmVTdXJmZXIpfSh0aGlzLGZ1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2EuUmVnaW9ucz17aW5pdDpmdW5jdGlvbihhKXt0aGlzLndhdmVzdXJmZXI9YSx0aGlzLndyYXBwZXI9dGhpcy53YXZlc3VyZmVyLmRyYXdlci53cmFwcGVyLHRoaXMubGlzdD17fX0sYWRkOmZ1bmN0aW9uKGIpe3ZhciBjPU9iamVjdC5jcmVhdGUoYS5SZWdpb24pO3JldHVybiBjLmluaXQoYix0aGlzLndhdmVzdXJmZXIpLHRoaXMubGlzdFtjLmlkXT1jLGMub24oXCJyZW1vdmVcIixmdW5jdGlvbigpe2RlbGV0ZSB0aGlzLmxpc3RbYy5pZF19LmJpbmQodGhpcykpLGN9LGNsZWFyOmZ1bmN0aW9uKCl7T2JqZWN0LmtleXModGhpcy5saXN0KS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3RoaXMubGlzdFthXS5yZW1vdmUoKX0sdGhpcyl9LGVuYWJsZURyYWdTZWxlY3Rpb246ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZj10aGlzLGc9YS5zbG9wfHwyLGg9MCxpPWZ1bmN0aW9uKGEpe2EudG91Y2hlcyYmYS50b3VjaGVzLmxlbmd0aD4xfHxhLnRhcmdldC5jaGlsZEVsZW1lbnRDb3VudD4wfHwoZT1hLnRhcmdldFRvdWNoZXM/YS50YXJnZXRUb3VjaGVzWzBdLmlkZW50aWZpZXI6bnVsbCxiPSEwLGM9Zi53YXZlc3VyZmVyLmRyYXdlci5oYW5kbGVFdmVudChhLCEwKSxkPW51bGwpfTt0aGlzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLGkpLHRoaXMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLGkpLHRoaXMub24oXCJkaXNhYmxlLWRyYWctc2VsZWN0aW9uXCIsZnVuY3Rpb24oKXtmLndyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIixpKSxmLndyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLGkpfSk7dmFyIGo9ZnVuY3Rpb24oYSl7YS50b3VjaGVzJiZhLnRvdWNoZXMubGVuZ3RoPjF8fChiPSExLGg9MCxkJiYoZC5maXJlRXZlbnQoXCJ1cGRhdGUtZW5kXCIsYSksZi53YXZlc3VyZmVyLmZpcmVFdmVudChcInJlZ2lvbi11cGRhdGUtZW5kXCIsZCxhKSksZD1udWxsKX07dGhpcy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsaiksdGhpcy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLGopLHRoaXMub24oXCJkaXNhYmxlLWRyYWctc2VsZWN0aW9uXCIsZnVuY3Rpb24oKXtmLndyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsaiksZi53cmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsail9KTt2YXIgaz1mdW5jdGlvbihpKXtpZihiJiYhKCsraDw9Z3x8aS50b3VjaGVzJiZpLnRvdWNoZXMubGVuZ3RoPjF8fGkudGFyZ2V0VG91Y2hlcyYmaS50YXJnZXRUb3VjaGVzWzBdLmlkZW50aWZpZXIhPWUpKXtkfHwoZD1mLmFkZChhfHx7fSkpO3ZhciBqPWYud2F2ZXN1cmZlci5nZXREdXJhdGlvbigpLGs9Zi53YXZlc3VyZmVyLmRyYXdlci5oYW5kbGVFdmVudChpKTtkLnVwZGF0ZSh7c3RhcnQ6TWF0aC5taW4oaypqLGMqaiksZW5kOk1hdGgubWF4KGsqaixjKmopfSl9fTt0aGlzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLGspLHRoaXMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsayksdGhpcy5vbihcImRpc2FibGUtZHJhZy1zZWxlY3Rpb25cIixmdW5jdGlvbigpe2Yud3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsayksZi53cmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixrKX0pfSxkaXNhYmxlRHJhZ1NlbGVjdGlvbjpmdW5jdGlvbigpe3RoaXMuZmlyZUV2ZW50KFwiZGlzYWJsZS1kcmFnLXNlbGVjdGlvblwiKX19LGEudXRpbC5leHRlbmQoYS5SZWdpb25zLGEuT2JzZXJ2ZXIpLGEuUmVnaW9uPXtzdHlsZTphLkRyYXdlci5zdHlsZSxpbml0OmZ1bmN0aW9uKGIsYyl7dGhpcy53YXZlc3VyZmVyPWMsdGhpcy53cmFwcGVyPWMuZHJhd2VyLndyYXBwZXIsdGhpcy5pZD1udWxsPT1iLmlkP2EudXRpbC5nZXRJZCgpOmIuaWQsdGhpcy5zdGFydD1OdW1iZXIoYi5zdGFydCl8fDAsdGhpcy5lbmQ9bnVsbD09Yi5lbmQ/dGhpcy5zdGFydCs0L3RoaXMud3JhcHBlci5zY3JvbGxXaWR0aCp0aGlzLndhdmVzdXJmZXIuZ2V0RHVyYXRpb24oKTpOdW1iZXIoYi5lbmQpLHRoaXMucmVzaXplPXZvaWQgMD09PWIucmVzaXplfHxCb29sZWFuKGIucmVzaXplKSx0aGlzLmRyYWc9dm9pZCAwPT09Yi5kcmFnfHxCb29sZWFuKGIuZHJhZyksdGhpcy5sb29wPUJvb2xlYW4oYi5sb29wKSx0aGlzLmNvbG9yPWIuY29sb3J8fFwicmdiYSgwLCAwLCAwLCAwLjEpXCIsdGhpcy5kYXRhPWIuZGF0YXx8e30sdGhpcy5hdHRyaWJ1dGVzPWIuYXR0cmlidXRlc3x8e30sdGhpcy5tYXhMZW5ndGg9Yi5tYXhMZW5ndGgsdGhpcy5taW5MZW5ndGg9Yi5taW5MZW5ndGgsdGhpcy5iaW5kSW5PdXQoKSx0aGlzLnJlbmRlcigpLHRoaXMub25ab29tPXRoaXMudXBkYXRlUmVuZGVyLmJpbmQodGhpcyksdGhpcy53YXZlc3VyZmVyLm9uKFwiem9vbVwiLHRoaXMub25ab29tKSx0aGlzLndhdmVzdXJmZXIuZmlyZUV2ZW50KFwicmVnaW9uLWNyZWF0ZWRcIix0aGlzKX0sdXBkYXRlOmZ1bmN0aW9uKGEpe251bGwhPWEuc3RhcnQmJih0aGlzLnN0YXJ0PU51bWJlcihhLnN0YXJ0KSksbnVsbCE9YS5lbmQmJih0aGlzLmVuZD1OdW1iZXIoYS5lbmQpKSxudWxsIT1hLmxvb3AmJih0aGlzLmxvb3A9Qm9vbGVhbihhLmxvb3ApKSxudWxsIT1hLmNvbG9yJiYodGhpcy5jb2xvcj1hLmNvbG9yKSxudWxsIT1hLmRhdGEmJih0aGlzLmRhdGE9YS5kYXRhKSxudWxsIT1hLnJlc2l6ZSYmKHRoaXMucmVzaXplPUJvb2xlYW4oYS5yZXNpemUpKSxudWxsIT1hLmRyYWcmJih0aGlzLmRyYWc9Qm9vbGVhbihhLmRyYWcpKSxudWxsIT1hLm1heExlbmd0aCYmKHRoaXMubWF4TGVuZ3RoPU51bWJlcihhLm1heExlbmd0aCkpLG51bGwhPWEubWluTGVuZ3RoJiYodGhpcy5taW5MZW5ndGg9TnVtYmVyKGEubWluTGVuZ3RoKSksbnVsbCE9YS5hdHRyaWJ1dGVzJiYodGhpcy5hdHRyaWJ1dGVzPWEuYXR0cmlidXRlcyksdGhpcy51cGRhdGVSZW5kZXIoKSx0aGlzLmZpcmVFdmVudChcInVwZGF0ZVwiKSx0aGlzLndhdmVzdXJmZXIuZmlyZUV2ZW50KFwicmVnaW9uLXVwZGF0ZWRcIix0aGlzKX0scmVtb3ZlOmZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50JiYodGhpcy53cmFwcGVyLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCksdGhpcy5lbGVtZW50PW51bGwsdGhpcy53YXZlc3VyZmVyLnVuKFwiem9vbVwiLHRoaXMub25ab29tKSx0aGlzLmZpcmVFdmVudChcInJlbW92ZVwiKSx0aGlzLndhdmVzdXJmZXIuZmlyZUV2ZW50KFwicmVnaW9uLXJlbW92ZWRcIix0aGlzKSl9LHBsYXk6ZnVuY3Rpb24oKXt0aGlzLndhdmVzdXJmZXIucGxheSh0aGlzLnN0YXJ0LHRoaXMuZW5kKSx0aGlzLmZpcmVFdmVudChcInBsYXlcIiksdGhpcy53YXZlc3VyZmVyLmZpcmVFdmVudChcInJlZ2lvbi1wbGF5XCIsdGhpcyl9LHBsYXlMb29wOmZ1bmN0aW9uKCl7dGhpcy5wbGF5KCksdGhpcy5vbmNlKFwib3V0XCIsdGhpcy5wbGF5TG9vcC5iaW5kKHRoaXMpKX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInJlZ2lvblwiKTthLmNsYXNzTmFtZT1cIndhdmVzdXJmZXItcmVnaW9uXCIsYS50aXRsZT10aGlzLmZvcm1hdFRpbWUodGhpcy5zdGFydCx0aGlzLmVuZCksYS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIsdGhpcy5pZCk7Zm9yKHZhciBiIGluIHRoaXMuYXR0cmlidXRlcylhLnNldEF0dHJpYnV0ZShcImRhdGEtcmVnaW9uLVwiK2IsdGhpcy5hdHRyaWJ1dGVzW2JdKTt0aGlzLndyYXBwZXIuc2Nyb2xsV2lkdGg7aWYodGhpcy5zdHlsZShhLHtwb3NpdGlvbjpcImFic29sdXRlXCIsekluZGV4OjIsaGVpZ2h0OlwiMTAwJVwiLHRvcDpcIjBweFwifSksdGhpcy5yZXNpemUpe3ZhciBjPWEuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImhhbmRsZVwiKSksZD1hLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoYW5kbGVcIikpO2MuY2xhc3NOYW1lPVwid2F2ZXN1cmZlci1oYW5kbGUgd2F2ZXN1cmZlci1oYW5kbGUtc3RhcnRcIixkLmNsYXNzTmFtZT1cIndhdmVzdXJmZXItaGFuZGxlIHdhdmVzdXJmZXItaGFuZGxlLWVuZFwiO3ZhciBlPXtjdXJzb3I6XCJjb2wtcmVzaXplXCIscG9zaXRpb246XCJhYnNvbHV0ZVwiLGxlZnQ6XCIwcHhcIix0b3A6XCIwcHhcIix3aWR0aDpcIjElXCIsbWF4V2lkdGg6XCI0cHhcIixoZWlnaHQ6XCIxMDAlXCJ9O3RoaXMuc3R5bGUoYyxlKSx0aGlzLnN0eWxlKGQsZSksdGhpcy5zdHlsZShkLHtsZWZ0OlwiMTAwJVwifSl9dGhpcy5lbGVtZW50PXRoaXMud3JhcHBlci5hcHBlbmRDaGlsZChhKSx0aGlzLnVwZGF0ZVJlbmRlcigpLHRoaXMuYmluZEV2ZW50cyhhKX0sZm9ybWF0VGltZTpmdW5jdGlvbihhLGIpe3JldHVybihhPT1iP1thXTpbYSxiXSkubWFwKGZ1bmN0aW9uKGEpe3JldHVybltNYXRoLmZsb29yKGElMzYwMC82MCksKFwiMDBcIitNYXRoLmZsb29yKGElNjApKS5zbGljZSgtMildLmpvaW4oXCI6XCIpfSkuam9pbihcIi1cIil9LGdldFdpZHRoOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMud2F2ZXN1cmZlci5kcmF3ZXIud2lkdGgvdGhpcy53YXZlc3VyZmVyLnBhcmFtcy5waXhlbFJhdGlvfSx1cGRhdGVSZW5kZXI6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndhdmVzdXJmZXIuZ2V0RHVyYXRpb24oKSxiPXRoaXMuZ2V0V2lkdGgoKTtpZih0aGlzLnN0YXJ0PDAmJih0aGlzLnN0YXJ0PTAsdGhpcy5lbmQ9dGhpcy5lbmQtdGhpcy5zdGFydCksdGhpcy5lbmQ+YSYmKHRoaXMuZW5kPWEsdGhpcy5zdGFydD1hLSh0aGlzLmVuZC10aGlzLnN0YXJ0KSksbnVsbCE9dGhpcy5taW5MZW5ndGgmJih0aGlzLmVuZD1NYXRoLm1heCh0aGlzLnN0YXJ0K3RoaXMubWluTGVuZ3RoLHRoaXMuZW5kKSksbnVsbCE9dGhpcy5tYXhMZW5ndGgmJih0aGlzLmVuZD1NYXRoLm1pbih0aGlzLnN0YXJ0K3RoaXMubWF4TGVuZ3RoLHRoaXMuZW5kKSksbnVsbCE9dGhpcy5lbGVtZW50KXt2YXIgYz1NYXRoLnJvdW5kKHRoaXMuc3RhcnQvYSpiKSxkPU1hdGgucm91bmQodGhpcy5lbmQvYSpiKS1jO3RoaXMuc3R5bGUodGhpcy5lbGVtZW50LHtsZWZ0OmMrXCJweFwiLHdpZHRoOmQrXCJweFwiLGJhY2tncm91bmRDb2xvcjp0aGlzLmNvbG9yLGN1cnNvcjp0aGlzLmRyYWc/XCJtb3ZlXCI6XCJkZWZhdWx0XCJ9KTtmb3IodmFyIGUgaW4gdGhpcy5hdHRyaWJ1dGVzKXRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXJlZ2lvbi1cIitlLHRoaXMuYXR0cmlidXRlc1tlXSk7dGhpcy5lbGVtZW50LnRpdGxlPXRoaXMuZm9ybWF0VGltZSh0aGlzLnN0YXJ0LHRoaXMuZW5kKX19LGJpbmRJbk91dDpmdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5maXJlZEluPSExLGEuZmlyZWRPdXQ9ITE7dmFyIGI9ZnVuY3Rpb24oYil7IWEuZmlyZWRPdXQmJmEuZmlyZWRJbiYmKGEuc3RhcnQ+PU1hdGgucm91bmQoMTAwKmIpLzEwMHx8YS5lbmQ8PU1hdGgucm91bmQoMTAwKmIpLzEwMCkmJihhLmZpcmVkT3V0PSEwLGEuZmlyZWRJbj0hMSxhLmZpcmVFdmVudChcIm91dFwiKSxhLndhdmVzdXJmZXIuZmlyZUV2ZW50KFwicmVnaW9uLW91dFwiLGEpKSwhYS5maXJlZEluJiZhLnN0YXJ0PD1iJiZhLmVuZD5iJiYoYS5maXJlZEluPSEwLGEuZmlyZWRPdXQ9ITEsYS5maXJlRXZlbnQoXCJpblwiKSxhLndhdmVzdXJmZXIuZmlyZUV2ZW50KFwicmVnaW9uLWluXCIsYSkpfTt0aGlzLndhdmVzdXJmZXIuYmFja2VuZC5vbihcImF1ZGlvcHJvY2Vzc1wiLGIpLHRoaXMub24oXCJyZW1vdmVcIixmdW5jdGlvbigpe2Eud2F2ZXN1cmZlci5iYWNrZW5kLnVuKFwiYXVkaW9wcm9jZXNzXCIsYil9KSx0aGlzLm9uKFwib3V0XCIsZnVuY3Rpb24oKXthLmxvb3AmJmEud2F2ZXN1cmZlci5wbGF5KGEuc3RhcnQpfSl9LGJpbmRFdmVudHM6ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3RoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLGZ1bmN0aW9uKGIpe2EuZmlyZUV2ZW50KFwibW91c2VlbnRlclwiLGIpLGEud2F2ZXN1cmZlci5maXJlRXZlbnQoXCJyZWdpb24tbW91c2VlbnRlclwiLGEsYil9KSx0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIixmdW5jdGlvbihiKXthLmZpcmVFdmVudChcIm1vdXNlbGVhdmVcIixiKSxhLndhdmVzdXJmZXIuZmlyZUV2ZW50KFwicmVnaW9uLW1vdXNlbGVhdmVcIixhLGIpfSksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKGIpe2IucHJldmVudERlZmF1bHQoKSxhLmZpcmVFdmVudChcImNsaWNrXCIsYiksYS53YXZlc3VyZmVyLmZpcmVFdmVudChcInJlZ2lvbi1jbGlja1wiLGEsYil9KSx0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsZnVuY3Rpb24oYil7Yi5zdG9wUHJvcGFnYXRpb24oKSxiLnByZXZlbnREZWZhdWx0KCksYS5maXJlRXZlbnQoXCJkYmxjbGlja1wiLGIpLGEud2F2ZXN1cmZlci5maXJlRXZlbnQoXCJyZWdpb24tZGJsY2xpY2tcIixhLGIpfSksKHRoaXMuZHJhZ3x8dGhpcy5yZXNpemUpJiZmdW5jdGlvbigpe3ZhciBiLGMsZCxlLGY9YS53YXZlc3VyZmVyLmdldER1cmF0aW9uKCksZz1mdW5jdGlvbihnKXtnLnRvdWNoZXMmJmcudG91Y2hlcy5sZW5ndGg+MXx8KGU9Zy50YXJnZXRUb3VjaGVzP2cudGFyZ2V0VG91Y2hlc1swXS5pZGVudGlmaWVyOm51bGwsZy5zdG9wUHJvcGFnYXRpb24oKSxkPWEud2F2ZXN1cmZlci5kcmF3ZXIuaGFuZGxlRXZlbnQoZywhMCkqZixcImhhbmRsZVwiPT1nLnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCk/Yz1nLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJ3YXZlc3VyZmVyLWhhbmRsZS1zdGFydFwiKT9cInN0YXJ0XCI6XCJlbmRcIjooYj0hMCxjPSExKSl9LGg9ZnVuY3Rpb24oZCl7ZC50b3VjaGVzJiZkLnRvdWNoZXMubGVuZ3RoPjF8fChifHxjKSYmKGI9ITEsYz0hMSxhLmZpcmVFdmVudChcInVwZGF0ZS1lbmRcIixkKSxhLndhdmVzdXJmZXIuZmlyZUV2ZW50KFwicmVnaW9uLXVwZGF0ZS1lbmRcIixhLGQpKX0saT1mdW5jdGlvbihnKXtpZighKGcudG91Y2hlcyYmZy50b3VjaGVzLmxlbmd0aD4xKSYmKCFnLnRhcmdldFRvdWNoZXN8fGcudGFyZ2V0VG91Y2hlc1swXS5pZGVudGlmaWVyPT1lKSYmKGJ8fGMpKXt2YXIgaD1hLndhdmVzdXJmZXIuZHJhd2VyLmhhbmRsZUV2ZW50KGcpKmYsaT1oLWQ7ZD1oLGEuZHJhZyYmYiYmYS5vbkRyYWcoaSksYS5yZXNpemUmJmMmJmEub25SZXNpemUoaSxjKX19O2EuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsZyksYS5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsZyksYS53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixpKSxhLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLGkpLGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixoKSxkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLGgpLGEub24oXCJyZW1vdmVcIixmdW5jdGlvbigpe2RvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixoKSxkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLGgpLGEud3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsaSksYS53cmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIixpKX0pLGEud2F2ZXN1cmZlci5vbihcImRlc3Ryb3lcIixmdW5jdGlvbigpe2RvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixoKSxkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLGgpfSl9KCl9LG9uRHJhZzpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndhdmVzdXJmZXIuZ2V0RHVyYXRpb24oKTt0aGlzLmVuZCthPmJ8fHRoaXMuc3RhcnQrYTwwfHx0aGlzLnVwZGF0ZSh7c3RhcnQ6dGhpcy5zdGFydCthLGVuZDp0aGlzLmVuZCthfSl9LG9uUmVzaXplOmZ1bmN0aW9uKGEsYil7XCJzdGFydFwiPT1iP3RoaXMudXBkYXRlKHtzdGFydDpNYXRoLm1pbih0aGlzLnN0YXJ0K2EsdGhpcy5lbmQpLGVuZDpNYXRoLm1heCh0aGlzLnN0YXJ0K2EsdGhpcy5lbmQpfSk6dGhpcy51cGRhdGUoe3N0YXJ0Ok1hdGgubWluKHRoaXMuZW5kK2EsdGhpcy5zdGFydCksZW5kOk1hdGgubWF4KHRoaXMuZW5kK2EsdGhpcy5zdGFydCl9KX19LGEudXRpbC5leHRlbmQoYS5SZWdpb24sYS5PYnNlcnZlciksYS5pbml0UmVnaW9ucz1mdW5jdGlvbigpe3RoaXMucmVnaW9uc3x8KHRoaXMucmVnaW9ucz1PYmplY3QuY3JlYXRlKGEuUmVnaW9ucyksdGhpcy5yZWdpb25zLmluaXQodGhpcykpfSxhLmFkZFJlZ2lvbj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5pbml0UmVnaW9ucygpLHRoaXMucmVnaW9ucy5hZGQoYSl9LGEuY2xlYXJSZWdpb25zPWZ1bmN0aW9uKCl7dGhpcy5yZWdpb25zJiZ0aGlzLnJlZ2lvbnMuY2xlYXIoKX0sYS5lbmFibGVEcmFnU2VsZWN0aW9uPWZ1bmN0aW9uKGEpe3RoaXMuaW5pdFJlZ2lvbnMoKSx0aGlzLnJlZ2lvbnMuZW5hYmxlRHJhZ1NlbGVjdGlvbihhKX0sYS5kaXNhYmxlRHJhZ1NlbGVjdGlvbj1mdW5jdGlvbigpe3RoaXMucmVnaW9ucy5kaXNhYmxlRHJhZ1NlbGVjdGlvbigpfX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi93YXZlc3VyZmVyLmpzL2Rpc3QvcGx1Z2luL3dhdmVzdXJmZXIucmVnaW9ucy5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDE0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__init_js__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__defs_js__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_waves_basic_controllers__ = __webpack_require__(76);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_waves_basic_controllers___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_waves_basic_controllers__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_xml2js_min_js__ = __webpack_require__(58);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_xml2js_min_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__lib_xml2js_min_js__);\n\n\n\n //wavesBasicControllers is an alias in webpack.config.json\n\n\nconst GRAIN_DEFAULT = __WEBPACK_IMPORTED_MODULE_1__defs_js__[\"a\" /* GrainDefs_Mix_Default */];\nconst EQ_DEFAULT = __WEBPACK_IMPORTED_MODULE_1__defs_js__[\"b\" /* EQ_CELLO */];\n\nvar x2js = new __WEBPACK_IMPORTED_MODULE_3__lib_xml2js_min_js___default.a();\n\n// Create elan instance\nvar elan = Object.create(__WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].ELAN);\n\n// Create Elan Wave Segment instance\nvar elanWaveSegment = Object.create(__WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].ELANWaveSegment);\n\nvar setupGrain = function (GrainDefs) {\n    var container = document.querySelector('#granular-engine-container');\n    container.innerHTML = \"\";\n\n    var self = __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].backend;\n\n    /* Initialize granular engine and draw slider */\n    for (var k in GrainDefs) {\n        //console.log(RangeValues[k]);\n        if (typeof __WEBPACK_IMPORTED_MODULE_1__defs_js__[\"c\" /* RangeValues */][k] !== 'undefined') {\n            //console.log(\"Key: \" + k);\n            var value = GrainDefs[k];\n            self.transportedGranularEngine[k] = value;\n\n            // Curry function. Probably better ways to\n            // setup up the granular sliders, but can't \n            // figure it out at the moment.\n            var sliderFactory = function (k) {\n                return function (val) {\n                    new __WEBPACK_IMPORTED_MODULE_2_waves_basic_controllers___default.a.Slider(k, __WEBPACK_IMPORTED_MODULE_1__defs_js__[\"c\" /* RangeValues */][k].min, __WEBPACK_IMPORTED_MODULE_1__defs_js__[\"c\" /* RangeValues */][k].max, 0.01, value, \"\", '', container, function (val) {\n                        if (k === 'speed') {\n                            self.playControl.speed = val;\n                        } else {\n                            self.transportedGranularEngine[k] = val;\n                        }\n                    });\n                };\n            };\n\n            var makeSlider = sliderFactory(k);\n            makeSlider(value);\n\n            //console.log(\"Key is \" + k + \", value is\" + self.transportedGranularEngine[k]);\n        }\n    }\n};\nvar setupEQ = function (EQ) {\n    // Create filters\n    var filters = EQ.map(function (band) {\n        var filter = __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].backend.ac.createBiquadFilter();\n        filter.type = band.type;\n        filter.gain.value = band.value;\n        filter.Q.value = 1;\n        filter.frequency.value = band.f;\n        return filter;\n    });\n\n    // Bind filters to vertical range sliders\n    var container = document.querySelector('#granular-engine-pitch-container');\n    container.innerHTML = \"\";\n    filters.forEach(function (filter, index) {\n        var input = document.createElement('input');\n        __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].util.extend(input, {\n            type: 'range',\n            min: -40,\n            max: 40,\n            value: filter.gain.value,\n            title: filter.frequency.value\n        });\n        input.style.display = 'inline-block';\n        input.setAttribute('orient', 'vertical');\n        __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].drawer.style(input, {\n            'webkitAppearance': 'slider-vertical',\n            width: '40px',\n            height: '150px'\n        });\n\n        var div = document.createElement('div');\n        div.style.display = 'inline-block';\n        div.innerHTML = '<p style=\"width:18px;max-width:8px;\" id=\"EQ_' + index + '_title\">' + filter.frequency.value + '</p>';\n        var div2 = document.createElement('div');\n        //div2.style.display = 'inline-block';\n        div2.innerHTML = '<p style=\"width:18px;max-width:8px;\" id=\"EQ_' + index + '\">' + filter.gain.value + '</p>';\n\n        div.appendChild(input);\n        div.appendChild(div2);\n        container.appendChild(div);\n\n        var onChange = function (e) {\n            filter.gain.value = ~~e.target.value;\n            var el = document.querySelector('#EQ_' + index);\n            el.innerHTML = filter.gain.value;\n        };\n\n        input.addEventListener('input', onChange);\n        input.addEventListener('change', onChange);\n    });\n\n    /* LIMITER */\n    var hardLimiter = __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].backend.ac.createDynamicsCompressor();\n    hardLimiter.threshold.value = -10.0; // this is the pitfall, leave some headroom\n    hardLimiter.knee.value = 0.0; // brute force\n    hardLimiter.ratio.value = 20.0; // max compression\n    hardLimiter.attack.value = 0.005; // 5ms attack\n    hardLimiter.release.value = 0.50; // 50ms release\n\n    filters.push(hardLimiter);\n    // Connect filters to wavesurfer\n    __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].backend.setFilters(filters);\n\n    // For debugging\n    __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].filters = filters;\n};\n\nvar setupDropdowns = function (e) {\n    $(\"#EQ_string_preset\").click(function (e) {\n        //do something\n        console.log(\"Loading string preset...\");\n        setupEQ(__WEBPACK_IMPORTED_MODULE_1__defs_js__[\"b\" /* EQ_CELLO */]);\n\n        e.preventDefault();\n    });\n\n    $(\"#EQ_percussion_preset\").click(function (e) {\n        //do something\n        console.log(\"Loading percussion preset...\");\n        setupEQ(__WEBPACK_IMPORTED_MODULE_1__defs_js__[\"d\" /* EQ_PERCUSSION */]);\n        e.preventDefault();\n    });\n\n    $(\"#Grain_string_preset\").click(function (e) {\n        //do something\n        console.log(\"Loading string preset...\");\n\n        setupGrain(__WEBPACK_IMPORTED_MODULE_1__defs_js__[\"e\" /* GrainDefs_Cello */]);\n        e.preventDefault();\n    });\n\n    $(\"#Grain_percussion_preset\").click(function (e) {\n        //do something\n        console.log(\"Loading percussion preset...\");\n        setupGrain(__WEBPACK_IMPORTED_MODULE_1__defs_js__[\"f\" /* GrainDefs_Perc */]);\n        e.preventDefault();\n    });\n};\n\nvar setupReverb = function () {\n    var reverbGain;\n    var audioContext = __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].backend.getAudioContext();\n    reverbjs.extend(audioContext);\n    // 2) Load the impulse response; upon load, connect it to the audio output.\n    //var reverbUrl = \"http://reverbjs.org/Library/KinoullAisle.m4a\";\n    var reverbUrl = \"https://rawgit.com/burnson/Reverb.js/master/Library/TyndallBruceMonument.m4a\";\n    var reverbNode = audioContext.createReverbFromUrl(reverbUrl, function () {\n        reverbGain = __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].backend.ac.createGain();\n        reverbGain.gain.value = 0.15;\n\n        reverbGain.connect(audioContext.destination);\n        reverbNode.connect(reverbGain);\n        __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].backend.gainNode.connect(reverbNode);\n    });\n};\n\n//wavesurfer.on('ready', function() {\ndocument.addEventListener('DOMContentLoaded', function () {\n\n    /* ELAN */\n    elan.on('select', function (start, end) {\n        __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].backend.play(start, end);\n    });\n\n    //set up listener for when elan is done\n    elan.on('ready', function (data) {\n        //go load the wave form\n        //wavesurfer.load('./transcripts/001z.mp3');\n\n        //add some styling to elan table\n        var classList = elan.container.querySelector('table').classList;\n        ['table', 'table-striped', 'table-hover'].forEach(function (cl) {\n            classList.add(cl);\n        });\n    });\n\n    function loadXMLDoc(dname) {\n        var xhttp;\n        if (window.XMLHttpRequest) {\n            xhttp = new XMLHttpRequest();\n        } else {\n            xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        xhttp.open(\"GET\", dname, false);\n        xhttp.send();\n        return xhttp.responseXML;\n    }\n\n    //init elan\n    elan.init({\n        //url: './transcripts/001z.xml',\n        container: '#annotations',\n        tiers: {\n            Text: true,\n            Comments: true\n        }\n    });\n\n    var xmlDoc = loadXMLDoc(\"./transcripts/elan_template.xml\");\n    var x2js = new __WEBPACK_IMPORTED_MODULE_3__lib_xml2js_min_js___default.a();\n    var jsonObj = x2js.xml2json(xmlDoc);\n    var str = JSON.stringify(jsonObj, null, 2); // spacing level = 2\n    console.log(str);\n\n    elan.loadJson(jsonObj);\n\n    __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].on('ready', function () {\n        var wavesegment_options = {\n            container: '#waveform',\n            waveColor: 'navy',\n            progressColor: 'blue',\n            loaderColor: 'purple',\n            cursorColor: 'navy',\n            selectionColor: '#d0e9c6',\n            backend: 'WebAudio',\n            normalize: true,\n            loopSelection: false,\n            renderer: 'Canvas',\n            waveSegmentRenderer: 'Canvas',\n            waveSegmentHeight: 50,\n            height: 100,\n            plotTimeEnd: __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].backend.getDuration(),\n            wavesurfer: __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */],\n            ELAN: elan,\n            scrollParent: false\n        };\n\n        elan.addAnnotation(0, __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].getDuration(), \"Example\", \"Test\");\n\n        elanWaveSegment.init(wavesegment_options);\n\n        // Regions\n        if (__WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].enableDragSelection) {\n            __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].enableDragSelection({\n                color: 'rgba(0, 255, 0, 0.25)'\n            });\n        }\n\n        //Setup some basic hooks\n        setupDropdowns();\n        setupGrain(GRAIN_DEFAULT);\n        setupEQ(EQ_DEFAULT);\n        setupReverb();\n    });\n\n    var prevAnnotation, prevRow, region;\n    var onProgress = function (time) {\n        elanWaveSegment.onProgress(time);\n        var annotation = elan.getRenderedAnnotation(time);\n\n        if (prevAnnotation != annotation) {\n            prevAnnotation = annotation;\n\n            region && region.remove();\n            region = null;\n\n            if (annotation) {\n                // Highlight annotation table row\n                var row = elan.getAnnotationNode(annotation);\n                prevRow && prevRow.classList.remove('success');\n                prevRow = row;\n                row.classList.add('success');\n                var before = row.previousSibling;\n                if (before) {\n                    elan.container.scrollTop = before.offsetTop;\n                }\n\n                // Region\n                region = __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].addRegion({\n                    start: annotation.start,\n                    end: annotation.end,\n                    resize: false,\n                    color: 'rgba(223, 240, 216, 0.7)'\n                });\n            }\n        }\n    };\n\n    __WEBPACK_IMPORTED_MODULE_0__init_js__[\"a\" /* default */].on('audioprocess', onProgress);\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_wavesurfer__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_wavesurfer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_wavesurfer__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_xml2js_min_js__ = __webpack_require__(58);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_xml2js_min_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__lib_xml2js_min_js__);\n\n\n\n\n\n\n// Create x2js instance with default config\nvar x2js = new __WEBPACK_IMPORTED_MODULE_1__lib_xml2js_min_js___default.a();\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"ELAN\"] = {\n    Types: {\n        ALIGNABLE_ANNOTATION: 'ALIGNABLE_ANNOTATION',\n        REF_ANNOTATION: 'REF_ANNOTATION'\n    },\n\n    init: function (params) {\n        this.data = null;\n        this.params = params;\n        this.container = 'string' == typeof params.container ? document.querySelector(params.container) : params.container;\n\n        if (!this.container) {\n            throw Error('No container for ELAN');\n        }\n\n        this.bindClick();\n\n        if (params.url) {\n            this.load(params.url);\n        }\n    },\n\n    load: function (url) {\n        var my = this;\n        this.loadXML(url, function (xml) {\n            my.data = my.parseElan(xml);\n            my.render();\n            my.fireEvent('ready', my.data);\n        });\n    },\n\n    loadXML: function (url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'document';\n        xhr.send();\n        xhr.addEventListener('load', function (e) {\n            callback && callback(e.target.responseXML);\n        });\n    },\n    loadJson: function (jsonObj) {\n        var xml = jQuery.parseXML(x2js.json2xml_str(jsonObj));\n        console.log(xml);\n\n        this.data = this.parseElan(xml);\n        this.render();\n        this.fireEvent('ready', this.data);\n    },\n\n    parseElan: function (xml) {\n        var _forEach = Array.prototype.forEach;\n        var _map = Array.prototype.map;\n\n        var data = {\n            media: {},\n            timeOrder: {},\n            tiers: [],\n            annotations: {},\n            alignableAnnotations: []\n        };\n\n        var header = xml.querySelector('HEADER');\n        var inMilliseconds = header.getAttribute('TIME_UNITS') == 'milliseconds';\n        var media = header.querySelector('MEDIA_DESCRIPTOR');\n        data.media.url = media.getAttribute('MEDIA_URL');\n        data.media.type = media.getAttribute('MIME_TYPE');\n\n        var timeSlots = xml.querySelectorAll('TIME_ORDER TIME_SLOT');\n        var timeOrder = {};\n        _forEach.call(timeSlots, function (slot) {\n            var value = parseFloat(slot.getAttribute('TIME_VALUE'));\n            // If in milliseconds, convert to seconds with rounding\n            if (inMilliseconds) {\n                value = Math.round(value * 1e2) / 1e5;\n            }\n            timeOrder[slot.getAttribute('TIME_SLOT_ID')] = value;\n        });\n\n        data.tiers = _map.call(xml.querySelectorAll('TIER'), function (tier) {\n            return {\n                id: tier.getAttribute('TIER_ID'),\n                linguisticTypeRef: tier.getAttribute('LINGUISTIC_TYPE_REF'),\n                defaultLocale: tier.getAttribute('DEFAULT_LOCALE'),\n                annotations: _map.call(tier.querySelectorAll('REF_ANNOTATION, ALIGNABLE_ANNOTATION'), function (node) {\n                    var annot = {\n                        type: node.nodeName,\n                        id: node.getAttribute('ANNOTATION_ID'),\n                        ref: node.getAttribute('ANNOTATION_REF'),\n                        value: node.querySelector('ANNOTATION_VALUE').textContent.trim()\n                    };\n\n                    if (this.Types.ALIGNABLE_ANNOTATION == annot.type) {\n                        // Add start & end to alignable annotation\n                        annot.start = timeOrder[node.getAttribute('TIME_SLOT_REF1')];\n                        annot.end = timeOrder[node.getAttribute('TIME_SLOT_REF2')];\n\n                        // Add to the list of alignable annotations\n                        data.alignableAnnotations.push(annot);\n                    }\n\n                    // Additionally, put into the flat map of all annotations\n                    data.annotations[annot.id] = annot;\n\n                    return annot;\n                }, this)\n            };\n        }, this);\n\n        // Create JavaScript references between annotations\n        data.tiers.forEach(function (tier) {\n            tier.annotations.forEach(function (annot) {\n                if (null != annot.ref) {\n                    annot.reference = data.annotations[annot.ref];\n                }\n            }, this);\n        }, this);\n\n        // Sort alignable annotations by start & end\n        data.alignableAnnotations.sort(function (a, b) {\n            var d = a.start - b.start;\n            if (d == 0) {\n                d = b.end - a.end;\n            }\n            return d;\n        });\n\n        data.length = data.alignableAnnotations.length;\n\n        return data;\n    },\n    addAnnotation: function (start, end, text, comment) {\n        var id = this.data.length + 1;\n        var aid = \"EDU\" + id;\n        var tid = \"TEXT\" + id;\n        var cid = \"COMMENT\" + id;\n\n        var align_anno = {\n            type: \"ALIGNABLE_ANNOTATION\",\n            id: aid,\n            ref: null,\n            value: id,\n            start: start,\n            end: end\n        };\n\n        var text_anno = {\n            type: \"REF_ANNOTATION\",\n            id: tid,\n            ref: aid,\n            reference: align_anno,\n            value: text\n        };\n\n        var comment_anno = {\n            type: \"REF_ANNOTATION\",\n            id: cid,\n            ref: aid,\n            reference: align_anno,\n            value: comment\n        };\n\n        this.data.alignableAnnotations.push(align_anno);\n        this.data.annotations[aid] = align_anno;\n        this.data.annotations[tid] = text_anno;\n        this.data.annotations[cid] = comment_anno;\n        this.data.length += 1;\n\n        this.data.tiers[0].annotations.push(align_anno);\n        this.data.tiers[1].annotations.push(text_anno);\n        this.data.tiers[2].annotations.push(comment_anno);\n        this.render();\n    },\n\n    render: function () {\n        // apply tiers filter\n        var tiers = this.data.tiers;\n        if (this.params.tiers) {\n            tiers = tiers.filter(function (tier) {\n                return tier.id in this.params.tiers;\n            }, this);\n        }\n\n        // denormalize references to alignable annotations\n        var backRefs = {};\n        var indeces = {};\n        tiers.forEach(function (tier, index) {\n            tier.annotations.forEach(function (annot) {\n                if (annot.reference && annot.reference.type == this.Types.ALIGNABLE_ANNOTATION) {\n                    if (!(annot.reference.id in backRefs)) {\n                        backRefs[annot.ref] = {};\n                    }\n                    backRefs[annot.ref][index] = annot;\n                    indeces[index] = true;\n                }\n            }, this);\n        }, this);\n        indeces = Object.keys(indeces).sort();\n\n        this.renderedAlignable = this.data.alignableAnnotations.filter(function (alignable) {\n            return backRefs[alignable.id];\n        });\n\n        // table\n        var table = document.createElement('table');\n        table.className = 'wavesurfer-annotations';\n\n        // head\n        var thead = document.createElement('thead');\n        var headRow = document.createElement('tr');\n        thead.appendChild(headRow);\n        table.appendChild(thead);\n        var th = document.createElement('th');\n        th.textContent = 'Time';\n        th.className = 'wavesurfer-time';\n        headRow.appendChild(th);\n        indeces.forEach(function (index) {\n            var tier = tiers[index];\n            var th = document.createElement('th');\n            th.className = 'wavesurfer-tier-' + tier.id;\n            th.textContent = tier.id;\n            th.style.width = this.params.tiers[tier.id];\n            headRow.appendChild(th);\n        }, this);\n\n        // body\n        var tbody = document.createElement('tbody');\n        table.appendChild(tbody);\n        this.renderedAlignable.forEach(function (alignable) {\n            var row = document.createElement('tr');\n            row.id = 'wavesurfer-alignable-' + alignable.id;\n            tbody.appendChild(row);\n\n            var td = document.createElement('td');\n            td.className = 'wavesurfer-time';\n            td.textContent = alignable.start.toFixed(1) + '–' + alignable.end.toFixed(1);\n            row.appendChild(td);\n\n            var backRef = backRefs[alignable.id];\n            indeces.forEach(function (index) {\n                var tier = tiers[index];\n                var td = document.createElement('td');\n                var annotation = backRef[index];\n                if (annotation) {\n                    td.id = 'wavesurfer-annotation-' + annotation.id;\n                    td.dataset.ref = alignable.id;\n                    td.dataset.start = alignable.start;\n                    td.dataset.end = alignable.end;\n                    td.textContent = annotation.value;\n                }\n                td.className = 'wavesurfer-tier-' + tier.id;\n                row.appendChild(td);\n            }, this);\n        }, this);\n\n        this.container.innerHTML = '';\n        this.container.appendChild(table);\n    },\n\n    bindClick: function () {\n        var my = this;\n        this.container.addEventListener('click', function (e) {\n            var ref = e.target.dataset.ref;\n            if (null != ref) {\n                var annot = my.data.annotations[ref];\n                if (annot) {\n                    my.fireEvent('select', annot.start, annot.end);\n                }\n            }\n        });\n    },\n\n    getRenderedAnnotation: function (time) {\n        var result;\n        this.renderedAlignable.some(function (annotation) {\n            if (annotation.start <= time && annotation.end >= time) {\n                result = annotation;\n                return true;\n            }\n            return false;\n        });\n        return result;\n    },\n\n    getAnnotationNode: function (annotation) {\n        return document.getElementById('wavesurfer-alignable-' + annotation.id);\n    }\n};\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"util\"].extend(__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"ELAN\"], __WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"Observer\"]);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! wavesurfer.js 1.3.7 (Fri, 24 Mar 2017 19:14:52 GMT)\n* https://github.com/katspaugh/wavesurfer.js\n* @license CC-BY-3.0 */!function (a, b) {\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function (a) {\n    return b(a);\n  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" == typeof module && module.exports ? module.exports = b(require(\"wavesurfer.js\")) : b(a.WaveSurfer);\n}(this, function (a) {\n  \"use strict\";\n  a.ELANWaveSegment = { defaultParams: { waveSegmentWidth: 200, waveSegmentPeaksPerSegment: 200, waveSegmentHeight: 30, waveSegmentRenderer: \"Canvas\", waveSegmentNormalizeTo: \"whole\", waveSegmentBarHeight: 1, waveSegmentBorderWidth: 1, pixelRatio: window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI }, ELAN: null, wavesurfer: null, waveSegments: [], maxPeak: 0, init: function (b) {\n      switch (this.params = a.util.extend(this.defaultParams, b), this.ELAN = b.ELAN, this.wavesurfer = b.wavesurfer, this.waveSegments = [], this.maxPeak = 0, this.params.waveSegmentNormalizeTo) {case \"segment\":\n          this.params.normalize = !0;break;case \"whole\":\n          this.calculateMaxPeak(), this.params.noramlize = !1;break;default:\n          this.params.normalize = !1;}this.addSegmentColumn();\n    }, calculateMaxPeak: function () {\n      var b = this.ELAN.renderedAlignable.length * this.params.waveSegmentWidth,\n          c = this.wavesurfer.backend.getPeaks(b, 0, b),\n          d = a.util.max(c),\n          e = a.util.min(c);this.maxPeak = -e > d ? -e : d;\n    }, addSegmentColumn: function () {\n      var a = this.ELAN.container.getElementsByTagName(\"tr\"),\n          b = document.createElement(\"th\");b.textContent = \"Wave\", b.className = \"wavesurfer-wave\", b.setAttribute(\"style\", \"width: \" + this.params.waveSegmentWidth + \"px\"), a[0].insertBefore(b, a[0].firstChild.nextSibling);for (var c = 0; c < this.ELAN.renderedAlignable.length; c++) {\n        var d = this.ELAN.getAnnotationNode(this.ELAN.renderedAlignable[c]),\n            e = document.createElement(\"td\");e.className = \"wavesurfer-wave\", this.appendWaveSegmentToElement(e, c), d.insertBefore(e, d.firstChild.nextSibling);\n      }\n    }, getPeaksForTimeSegment: function (a, b) {\n      var c = this.wavesurfer.backend.getDuration(),\n          d = b - a,\n          e = c * this.params.waveSegmentPeaksPerSegment / d,\n          f = c / e,\n          g = ~~(a / f),\n          h = ~~(b / f),\n          i = this.wavesurfer.backend.getPeaks(e, g, h),\n          j = [];for (var k in i) \"whole\" == this.params.waveSegmentNormalizeTo ? j.push(i[k] / this.maxPeak) : j.push(i[k]);return j;\n    }, appendWaveSegmentToElement: function (b, c) {\n      var d = this.ELAN.renderedAlignable[c],\n          e = document.createElement(\"div\"),\n          f = this.params.waveSegmentWidth;e.style.width = (f + 2 * this.params.waveSegmentBorderWidth).toString() + \"px\", e.style.height = this.params.waveSegmentHeight.toString() + \"px\", e.className = \"elan-wavesegment-container\", b.appendChild(e);var g = this.getPeaksForTimeSegment(d.start, d.end),\n          h = this.params;h.fillParent = !0, h.height = this.params.waveSegmentHeight, h.barHeight = this.params.waveSegmentBarHeight, h.plotTimeStart = d.start, h.plotTimeEnd = d.end, h.fillParent = !0, h.scrollParent = !1, this.waveSegments[c] = Object.create(a.Drawer[this.params.waveSegmentRenderer]), this.waveSegments[c].init(e, h), this.waveSegments[c].drawPeaks(g, this.params.waveSegmentWidth * this.params.pixelRatio, 0, this.params.waveSegmentPeaksPerSegment), this.waveSegments[c].updateProgress(0);\n    }, onProgress: function (a) {\n      for (var b = 0; b < this.waveSegments.length; b++) {\n        var c,\n            d = this.ELAN.renderedAlignable[b].start,\n            e = this.ELAN.renderedAlignable[b].end;if (d > a) c = 0;else if (e < a) c = this.params.waveSegmentWidth;else {\n          var f = (a - d) / (e - d);c = f * this.params.waveSegmentWidth;\n        }this.waveSegments[b].updateProgress(c);\n      }\n    } }, a.util.extend(a.ELANWaveSegment, a.Observer);\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy93YXZlc3VyZmVyLmVsYW4td2F2ZS1zZWdtZW50Lm1pbi5qcz81NDdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISB3YXZlc3VyZmVyLmpzIDEuMy43IChGcmksIDI0IE1hciAyMDE3IDE5OjE0OjUyIEdNVClcbiogaHR0cHM6Ly9naXRodWIuY29tL2thdHNwYXVnaC93YXZlc3VyZmVyLmpzXG4qIEBsaWNlbnNlIENDLUJZLTMuMCAqLyFmdW5jdGlvbihhLGIpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wid2F2ZXN1cmZlclwiXSxmdW5jdGlvbihhKXtyZXR1cm4gYihhKX0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWIocmVxdWlyZShcIndhdmVzdXJmZXIuanNcIikpOmIoYS5XYXZlU3VyZmVyKX0odGhpcyxmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjthLkVMQU5XYXZlU2VnbWVudD17ZGVmYXVsdFBhcmFtczp7d2F2ZVNlZ21lbnRXaWR0aDoyMDAsd2F2ZVNlZ21lbnRQZWFrc1BlclNlZ21lbnQ6MjAwLHdhdmVTZWdtZW50SGVpZ2h0OjMwLHdhdmVTZWdtZW50UmVuZGVyZXI6XCJDYW52YXNcIix3YXZlU2VnbWVudE5vcm1hbGl6ZVRvOlwid2hvbGVcIix3YXZlU2VnbWVudEJhckhlaWdodDoxLHdhdmVTZWdtZW50Qm9yZGVyV2lkdGg6MSxwaXhlbFJhdGlvOndpbmRvdy5kZXZpY2VQaXhlbFJhdGlvfHxzY3JlZW4uZGV2aWNlWERQSS9zY3JlZW4ubG9naWNhbFhEUEl9LEVMQU46bnVsbCx3YXZlc3VyZmVyOm51bGwsd2F2ZVNlZ21lbnRzOltdLG1heFBlYWs6MCxpbml0OmZ1bmN0aW9uKGIpe3N3aXRjaCh0aGlzLnBhcmFtcz1hLnV0aWwuZXh0ZW5kKHRoaXMuZGVmYXVsdFBhcmFtcyxiKSx0aGlzLkVMQU49Yi5FTEFOLHRoaXMud2F2ZXN1cmZlcj1iLndhdmVzdXJmZXIsdGhpcy53YXZlU2VnbWVudHM9W10sdGhpcy5tYXhQZWFrPTAsdGhpcy5wYXJhbXMud2F2ZVNlZ21lbnROb3JtYWxpemVUbyl7Y2FzZVwic2VnbWVudFwiOnRoaXMucGFyYW1zLm5vcm1hbGl6ZT0hMDticmVhaztjYXNlXCJ3aG9sZVwiOnRoaXMuY2FsY3VsYXRlTWF4UGVhaygpLHRoaXMucGFyYW1zLm5vcmFtbGl6ZT0hMTticmVhaztkZWZhdWx0OnRoaXMucGFyYW1zLm5vcm1hbGl6ZT0hMX10aGlzLmFkZFNlZ21lbnRDb2x1bW4oKX0sY2FsY3VsYXRlTWF4UGVhazpmdW5jdGlvbigpe3ZhciBiPXRoaXMuRUxBTi5yZW5kZXJlZEFsaWduYWJsZS5sZW5ndGgqdGhpcy5wYXJhbXMud2F2ZVNlZ21lbnRXaWR0aCxjPXRoaXMud2F2ZXN1cmZlci5iYWNrZW5kLmdldFBlYWtzKGIsMCxiKSxkPWEudXRpbC5tYXgoYyksZT1hLnV0aWwubWluKGMpO3RoaXMubWF4UGVhaz0tZT5kPy1lOmR9LGFkZFNlZ21lbnRDb2x1bW46ZnVuY3Rpb24oKXt2YXIgYT10aGlzLkVMQU4uY29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidHJcIiksYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik7Yi50ZXh0Q29udGVudD1cIldhdmVcIixiLmNsYXNzTmFtZT1cIndhdmVzdXJmZXItd2F2ZVwiLGIuc2V0QXR0cmlidXRlKFwic3R5bGVcIixcIndpZHRoOiBcIit0aGlzLnBhcmFtcy53YXZlU2VnbWVudFdpZHRoK1wicHhcIiksYVswXS5pbnNlcnRCZWZvcmUoYixhWzBdLmZpcnN0Q2hpbGQubmV4dFNpYmxpbmcpO2Zvcih2YXIgYz0wO2M8dGhpcy5FTEFOLnJlbmRlcmVkQWxpZ25hYmxlLmxlbmd0aDtjKyspe3ZhciBkPXRoaXMuRUxBTi5nZXRBbm5vdGF0aW9uTm9kZSh0aGlzLkVMQU4ucmVuZGVyZWRBbGlnbmFibGVbY10pLGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO2UuY2xhc3NOYW1lPVwid2F2ZXN1cmZlci13YXZlXCIsdGhpcy5hcHBlbmRXYXZlU2VnbWVudFRvRWxlbWVudChlLGMpLGQuaW5zZXJ0QmVmb3JlKGUsZC5maXJzdENoaWxkLm5leHRTaWJsaW5nKX19LGdldFBlYWtzRm9yVGltZVNlZ21lbnQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLndhdmVzdXJmZXIuYmFja2VuZC5nZXREdXJhdGlvbigpLGQ9Yi1hLGU9Yyp0aGlzLnBhcmFtcy53YXZlU2VnbWVudFBlYWtzUGVyU2VnbWVudC9kLGY9Yy9lLGc9fn4oYS9mKSxoPX5+KGIvZiksaT10aGlzLndhdmVzdXJmZXIuYmFja2VuZC5nZXRQZWFrcyhlLGcsaCksaj1bXTtmb3IodmFyIGsgaW4gaSlcIndob2xlXCI9PXRoaXMucGFyYW1zLndhdmVTZWdtZW50Tm9ybWFsaXplVG8/ai5wdXNoKGlba10vdGhpcy5tYXhQZWFrKTpqLnB1c2goaVtrXSk7cmV0dXJuIGp9LGFwcGVuZFdhdmVTZWdtZW50VG9FbGVtZW50OmZ1bmN0aW9uKGIsYyl7dmFyIGQ9dGhpcy5FTEFOLnJlbmRlcmVkQWxpZ25hYmxlW2NdLGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxmPXRoaXMucGFyYW1zLndhdmVTZWdtZW50V2lkdGg7ZS5zdHlsZS53aWR0aD0oZisyKnRoaXMucGFyYW1zLndhdmVTZWdtZW50Qm9yZGVyV2lkdGgpLnRvU3RyaW5nKCkrXCJweFwiLGUuc3R5bGUuaGVpZ2h0PXRoaXMucGFyYW1zLndhdmVTZWdtZW50SGVpZ2h0LnRvU3RyaW5nKCkrXCJweFwiLGUuY2xhc3NOYW1lPVwiZWxhbi13YXZlc2VnbWVudC1jb250YWluZXJcIixiLmFwcGVuZENoaWxkKGUpO3ZhciBnPXRoaXMuZ2V0UGVha3NGb3JUaW1lU2VnbWVudChkLnN0YXJ0LGQuZW5kKSxoPXRoaXMucGFyYW1zO2guZmlsbFBhcmVudD0hMCxoLmhlaWdodD10aGlzLnBhcmFtcy53YXZlU2VnbWVudEhlaWdodCxoLmJhckhlaWdodD10aGlzLnBhcmFtcy53YXZlU2VnbWVudEJhckhlaWdodCxoLnBsb3RUaW1lU3RhcnQ9ZC5zdGFydCxoLnBsb3RUaW1lRW5kPWQuZW5kLGguZmlsbFBhcmVudD0hMCxoLnNjcm9sbFBhcmVudD0hMSx0aGlzLndhdmVTZWdtZW50c1tjXT1PYmplY3QuY3JlYXRlKGEuRHJhd2VyW3RoaXMucGFyYW1zLndhdmVTZWdtZW50UmVuZGVyZXJdKSx0aGlzLndhdmVTZWdtZW50c1tjXS5pbml0KGUsaCksdGhpcy53YXZlU2VnbWVudHNbY10uZHJhd1BlYWtzKGcsdGhpcy5wYXJhbXMud2F2ZVNlZ21lbnRXaWR0aCp0aGlzLnBhcmFtcy5waXhlbFJhdGlvLDAsdGhpcy5wYXJhbXMud2F2ZVNlZ21lbnRQZWFrc1BlclNlZ21lbnQpLHRoaXMud2F2ZVNlZ21lbnRzW2NdLnVwZGF0ZVByb2dyZXNzKDApfSxvblByb2dyZXNzOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wO2I8dGhpcy53YXZlU2VnbWVudHMubGVuZ3RoO2IrKyl7dmFyIGMsZD10aGlzLkVMQU4ucmVuZGVyZWRBbGlnbmFibGVbYl0uc3RhcnQsZT10aGlzLkVMQU4ucmVuZGVyZWRBbGlnbmFibGVbYl0uZW5kO2lmKGQ+YSljPTA7ZWxzZSBpZihlPGEpYz10aGlzLnBhcmFtcy53YXZlU2VnbWVudFdpZHRoO2Vsc2V7dmFyIGY9KGEtZCkvKGUtZCk7Yz1mKnRoaXMucGFyYW1zLndhdmVTZWdtZW50V2lkdGh9dGhpcy53YXZlU2VnbWVudHNbYl0udXBkYXRlUHJvZ3Jlc3MoYyl9fX0sYS51dGlsLmV4dGVuZChhLkVMQU5XYXZlU2VnbWVudCxhLk9ic2VydmVyKX0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvd2F2ZXN1cmZlci5lbGFuLXdhdmUtc2VnbWVudC5taW4uanMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_wavesurfer__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_wavesurfer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_wavesurfer__);\n\n\n // _MD_ Don't now if this is correct way to do it?!\n\n\nvar stop = false;\nvar frameCount = 0;\nvar $results = $(\"#results\");\nvar fps, fpsInterval, startTime, now, then, elapsed;\nvar audioData = [];\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"InputStream\"] = {\n    init: function (params) {\n        this.params = params;\n\n        var wavesurfer = this.wavesurfer = params.wavesurfer;\n\n        if (!this.wavesurfer) {\n            throw new Error('No WaveSurfer instance provided');\n        }\n\n        this.active = false;\n        this.paused = false;\n        this.reloadBufferFunction = this.reloadBuffer.bind(this);\n\n        // cross-browser getUserMedia\n        var promisifiedOldGUM = function (constraints, successCallback, errorCallback) {\n            // get ahold of getUserMedia, if present\n            var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n            // Some browsers just don't implement it - return a rejected\n            // promise with an error to keep a consistent interface\n            if (!getUserMedia) {\n                return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n            }\n            // otherwise, wrap the call to the old navigator.getUserMedia with\n            // a Promise\n            return new Promise(function (successCallback, errorCallback) {\n                getUserMedia.call(navigator, constraints, successCallback, errorCallback);\n            });\n        };\n        // Older browsers might not implement mediaDevices at all, so we set an\n        // empty object first\n        if (navigator.mediaDevices === undefined) {\n            navigator.mediaDevices = {};\n        }\n        // Some browsers partially implement mediaDevices. We can't just assign\n        // an object with getUserMedia as it would overwrite existing\n        // properties. Here, we will just add the getUserMedia property if it's\n        // missing.\n        if (navigator.mediaDevices.getUserMedia === undefined) {\n            navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\n        }\n\n        // The constraints parameter is a MediaStreamConstaints object with two\n        // members: video and audio, describing the media types requested. Either\n        // or both must be specified.\n        this.constraints = this.params.constraints || {\n            video: false,\n            audio: true\n        };\n\n        // The buffer size in units of sample-frames.\n        // If specified, the bufferSize must be one of the following values:\n        // 256, 512, 1024, 2048, 4096, 8192, 16384. Defaults to 4096.\n        this.bufferSize = this.params.bufferSize || 4096;\n\n        // Integer specifying the number of channels for this node's input,\n        // defaults to 1. Values of up to 32 are supported.\n        this.numberOfInputChannels = this.params.numberOfInputChannels || 1;\n\n        // Integer specifying the number of channels for this node's output,\n        // defaults to 1. Values of up to 32 are supported.\n        this.numberOfOutputChannels = this.params.numberOfOutputChannels || 1;\n\n        // wavesurfer's AudioContext where we'll route the mic signal to\n        this.micContext = this.wavesurfer.backend.getAudioContext();\n    },\n\n    createScriptNode: function () {\n        if (this.wavesurfer.ac.createScriptProcessor) {\n            this.scriptNode = this.wavesurfer.ac.createScriptProcessor(this.scriptBufferSize);\n        } else {\n            this.scriptNode = this.wavesurfer.ac.createJavaScriptNode(this.scriptBufferSize);\n        }\n\n        this.scriptNode.connect(this.wavesurfer.ac.destination);\n    },\n\n    /**\n     * Allow user to select audio input device, eg. inputStream, and\n     * start the visualization.\n     */\n    start: function () {\n        /*navigator.mediaDevices.getUserMedia(this.constraints).then(\n            this.gotStream.bind(this)\n        ).catch(\n            this.deviceError.bind(this)\n        );*/\n\n        var leftVideo = document.getElementById('single-song');\n        var self = this;\n        leftVideo.onplay = function () {\n            var context = self.wavesurfer.backend.getAudioContext();\n            // Set the source of one <video> element to be a stream from another.\n            //var audioContext = this.wavesurfer.backend.getAudioContext();\n            //var source = audioContext.createMediaElementSource(leftVideo);\n\n            //this.createScriptNode();leftVideo.onplay = function() {}\n            //source.connect(scriptNode);\n            //addOnAudioProcess(source);\n            //scriptNode.onaudioprocess = function(e) {\n            //  console.log(e.inputBuffer.getChannelData(0));\n            //}\n            //source.connect(dryGain);\n            // start the source playing\n            //source.start();\n            //wavesurfer.play();\n            audioData = context.createBuffer(1, 1, context.sampleRate);\n\n            console.log(\"HEKKI\");\n            self.gotStream(leftVideo);\n        };\n        leftVideo.onpause = function () {\n            self.pause();\n            self.stop();\n            var context = self.wavesurfer.backend.getAudioContext();\n            /*\n            //console.log(audioData);\n              var buf = new ArrayBuffer(audioData.length*4096); // 2 bytes for each char\n              var bufView = new Float32Array(buf);\n              var bufView2 = new Uint32Array(buf);\n              for (var i=0, strLen=audioData.length; i < strLen; i++) {\n                //bufView[i] = audioData[i];\n                audioData[i].copyFromChannel(bufView,0,0);\n              }\n              console.log(bufView2);\n                */\n\n            /*\n            \n                            function appendBuffer(buffer1, buffer2) {\n                                var numberOfChannels = Math.min( buffer1.numberOfChannels, buffer2.numberOfChannels );\n                                var tmp = context.createBuffer( numberOfChannels, (buffer1.length + buffer2.length), buffer1.sampleRate );\n                                for (var i=0; i<numberOfChannels; i++) {\n                                  var channel = tmp.getChannelData(i);\n                                  channel.set( buffer1.getChannelData(i), 0);\n                                  channel.set( buffer2.getChannelData(i), buffer1.length);\n                                }\n                                return tmp;\n                              }\n                       \n                        var newBuff =  audioData[0];\n                        for (var i=1, strLen=audioData.length; i < strLen-1; i++) {\n                            //bufView[i] = audioData[i];\n                            newBuff = appendBuffer(newBuff, audioData[i]);\n                            console.log(newBuff.length);\n                        }*/\n\n            //self.wavesurfer.play();\n            console.log(audioData);\n            self.wavesurfer.empty();\n            console.log(audioData.getChannelData(0));\n            self.wavesurfer.loadDecodedBuffer(audioData);\n\n            /*\n            audioCtx.decodeAudioData(\n                buf, \n                 function(buffer) {\n                    self.wavesurfer.loadDecodedBuffer(buffer);\n                },\n                 function(e){ console.log(\"Error with decoding audio data\" + e.err); \n                });*/\n        };\n    },\n\n    /**\n     * Pause/resume visualization.\n     */\n    togglePlay: function () {\n        if (!this.active) {\n            // start it first\n            this.start();\n        } else {\n            // toggle paused\n            this.paused = !this.paused;\n\n            if (this.paused) {\n                this.pause();\n            } else {\n                this.play();\n            }\n        }\n    },\n\n    /**\n     * Play visualization.\n     */\n    play: function () {\n        this.paused = false;\n\n        this.connect();\n    },\n\n    /**\n     * Pause visualization.\n     */\n    pause: function () {\n        this.paused = true;\n\n        // disconnect sources so they can be used elsewhere\n        // (eg. during audio playback)\n        this.disconnect();\n    },\n\n    /**\n     * Stop the device stream and remove any remaining waveform drawing from\n     * the wavesurfer canvas.\n     */\n    stop: function () {\n        if (this.active) {\n            // stop visualization and device\n            this.stopDevice();\n\n            // empty last frame\n            this.wavesurfer.empty();\n        }\n    },\n\n    /**\n     * Stop the device and the visualization.\n     */\n    stopDevice: function () {\n        this.active = false;\n\n        // stop visualization\n        this.disconnect();\n        this.stream.stop = this.stream.pause;\n        // stop stream from device\n        if (this.stream) {\n            var result = this.detectBrowser();\n            // MediaStream.stop is deprecated since:\n            // - Firefox 44 (https://www.fxsitecompat.com/en-US/docs/2015/mediastream-stop-has-been-deprecated/)\n            // - Chrome 45 (https://developers.google.com/web/updates/2015/07/mediastream-deprecations)\n            if (result.browser === 'chrome' && result.version >= 45 || result.browser === 'firefox' && result.version >= 44 || result.browser === 'edge') {\n                if (this.stream.getTracks) {\n                    // note that this should not be a call\n                    this.stream.getTracks().forEach(function (stream) {\n                        stream.stop();\n                    });\n                    return;\n                }\n            }\n\n            this.stream.stop();\n        }\n    },\n\n    /**\n     * Connect the media sources that feed the visualization.\n     */\n    connect: function () {\n        if (this.stream !== undefined) {\n            // Create an AudioNode from the stream.\n            this.mediaStreamSource = this.micContext.createMediaElementSource(this.stream);\n\n            this.levelChecker = this.micContext.createScriptProcessor(this.bufferSize, this.numberOfInputChannels, this.numberOfOutputChannels);\n            this.mediaStreamSource.connect(this.levelChecker);\n\n            this.levelChecker.connect(this.micContext.destination);\n            this.levelChecker.onaudioprocess = this.reloadBufferFunction;\n\n            this.startAnimating(35);\n            requestAnimationFrame(function () {\n                return this.updateWaveform;\n            }.bind(this));\n            this.mediaStreamSource.connect(this.micContext.destination);\n        }\n    },\n\n    /**\n     * Disconnect the media sources that feed the visualization.\n     */\n    disconnect: function () {\n        if (this.mediaStreamSource !== undefined) {\n            this.mediaStreamSource.disconnect();\n        }\n\n        if (this.levelChecker !== undefined) {\n            this.levelChecker.disconnect();\n            this.levelChecker.onaudioprocess = undefined;\n        }\n    },\n\n    animate: function () {\n\n        // request another frame\n\n        requestAnimationFrame(this.animate);\n\n        // calc elapsed time since last loop\n\n    },\n\n    // initialize the timer variables and start the animation\n    // http://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n    startAnimating: function (fps) {\n        fpsInterval = 1000 / fps;\n        then = Date.now();\n        startTime = then;\n    },\n\n    /**\n     * Redraw the waveform.\n     * Returns a curried function filled with the audio event so we have access to the buffer.\n     * The returned function then does the drawing if the fps is at the requested rate (set in startAnimating).\n     */\n\n    updateWaveform: function (e) {\n\n        return function () {\n            now = Date.now();\n            elapsed = now - then;\n\n            // if enough time has elapsed, draw the next frame\n\n            if (elapsed > fpsInterval) {\n\n                // Get ready for next frame by setting then=now, but also adjust for your\n                // specified fpsInterval not being a multiple of RAF's interval (16.7ms)\n                then = now - elapsed % fpsInterval;\n\n                // Put your drawing code here\n                this.wavesurfer.empty();\n                this.wavesurfer.loadDecodedBuffer(e.inputBuffer);\n                //this.wavesurfer.loadDecodedBuffer(audioData);\n            }\n        };\n    },\n\n    recordAudio: function (e) {\n\n        //for (var channel = 0; channel < this.config.numChannels; channel++) {\n        var self = this;\n        function appendBuffer(buffer1, buffer2) {\n            var numberOfChannels = Math.min(buffer1.numberOfChannels, buffer2.numberOfChannels);\n            var tmp = self.wavesurfer.backend.ac.createBuffer(numberOfChannels, buffer1.length + buffer2.length, buffer1.sampleRate);\n            //for (var i=0; i<numberOfChannels; i++) {\n            var channel = tmp.getChannelData(0);\n            channel.set(buffer1.getChannelData(0), 0);\n            channel.set(buffer2.getChannelData(0), buffer1.length);\n\n            //}\n            return tmp;\n        }\n\n        audioData = appendBuffer(audioData, e.inputBuffer);\n        //console.log(audioData.getChannelData(0));\n        //audioData.push(e.inputBuffer.getChannelData(1));\n        //}\n        /*\n        this.worker.postMessage({\n            command: 'record',\n            buffer: buffer\n        });\n        */\n    },\n\n    reloadBuffer: function (event) {\n        if (!this.paused) {\n            this.recordAudio(event);\n            requestAnimationFrame(this.updateWaveform(event).bind(this));\n            //this.wavesurfer.empty();\n            //this.wavesurfer.loadDecodedBuffer(audioData);\n        }\n    },\n\n    /**\n     * Audio input device is ready.\n     *\n     * @param {LocalMediaStream} stream: the inputStream's media stream.\n     */\n    gotStream: function (stream) {\n        this.stream = stream;\n        this.active = true;\n\n        // start visualization\n        this.play();\n\n        // notify listeners\n        this.fireEvent('deviceReady', stream);\n    },\n\n    /**\n     * Destroy the inputStream plugin.\n     */\n    destroy: function (event) {\n        // make sure the buffer is not redrawn during\n        // cleanup and demolition of this plugin.\n        this.paused = true;\n\n        this.stop();\n    },\n\n    /**\n     * Device error callback.\n     */\n    deviceError: function (code) {\n        // notify listeners\n        this.fireEvent('deviceError', code);\n    },\n\n    /**\n     * Extract browser version out of the provided user agent string.\n     * @param {!string} uastring userAgent string.\n     * @param {!string} expr Regular expression used as match criteria.\n     * @param {!number} pos position in the version string to be returned.\n     * @return {!number} browser version.\n     */\n    extractVersion: function (uastring, expr, pos) {\n        var match = uastring.match(expr);\n        return match && match.length >= pos && parseInt(match[pos], 10);\n    },\n\n    /**\n     * Browser detector.\n     * @return {object} result containing browser, version and minVersion\n     *     properties.\n     */\n    detectBrowser: function () {\n        // Returned result object.\n        var result = {};\n        result.browser = null;\n        result.version = null;\n        result.minVersion = null;\n\n        // Non supported browser.\n        if (typeof window === 'undefined' || !window.navigator) {\n            result.browser = 'Not a supported browser.';\n            return result;\n        }\n\n        // Firefox.\n        if (navigator.mozGetUserMedia) {\n            result.browser = 'firefox';\n            result.version = this.extractVersion(navigator.userAgent, /Firefox\\/([0-9]+)\\./, 1);\n            result.minVersion = 31;\n            return result;\n        }\n\n        // Chrome/Chromium/Webview.\n        if (navigator.webkitGetUserMedia && window.webkitRTCPeerConnection) {\n            result.browser = 'chrome';\n            result.version = this.extractVersion(navigator.userAgent, /Chrom(e|ium)\\/([0-9]+)\\./, 2);\n            result.minVersion = 38;\n            return result;\n        }\n\n        // Edge.\n        if (navigator.mediaDevices && navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) {\n            result.browser = 'edge';\n            result.version = this.extractVersion(navigator.userAgent, /Edge\\/(\\d+).(\\d+)$/, 2);\n            result.minVersion = 10547;\n            return result;\n        }\n\n        // Non supported browser default.\n        result.browser = 'Not a supported browser.';\n        return result;\n    }\n\n};\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"util\"].extend(__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"InputStream\"], __WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"Observer\"]);//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_wavesurfer__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_wavesurfer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_wavesurfer__);\n\n\n// the granularEngine is used for pitch tracking\n// FIXME: For now globbaly declared. Find better solution!\n\n // _MD_ Don't now if this is correct way to do it?!\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"] = {\n    scriptBufferSize: 256,\n    PLAYING_STATE: 0,\n    PAUSED_STATE: 1,\n    FINISHED_STATE: 2,\n\n    supportsWebAudio: function () {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    },\n\n    getAudioContext: function () {\n        if (!__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].audioContext) {\n            this.wavesAudio = __webpack_require__(137); // _MD_\n            // _MD_ // WaveSurfer.WebAudio.audioContext = new (\n            // _MD_ //    window.AudioContext || window.webkitAudioContext\n            // _MD_ //);\n            console.log(\"getAudioContext: \" + this.wavesAudio.audioContext); // _MD_\n            __WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].audioContext = this.wavesAudio.audioContext; // _MD_\n        }\n\n        return __WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].audioContext;\n    },\n\n    getOfflineAudioContext: function (sampleRate) {\n        if (!__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].offlineAudioContext) {\n            __WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].offlineAudioContext = new (window.OfflineAudioContext || window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return __WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].offlineAudioContext;\n    },\n\n    init: function (params) {\n        this.params = params;\n        this.ac = params.audioContext || this.getAudioContext();\n\n        this.lastPlay = this.ac.currentTime;\n        this.startPosition = 0;\n        this.scheduledPause = null;\n\n        this.states = [Object.create(__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].state.playing), Object.create(__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].state.paused), Object.create(__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].state.finished)];\n\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(this.PAUSED_STATE);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    },\n\n    disconnectFilters: function () {\n        if (this.filters) {\n            this.filters.forEach(function (filter) {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    },\n\n    setState: function (state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    },\n\n    // Unpacked filters\n    setFilter: function () {\n        this.setFilters([].slice.call(arguments));\n    },\n\n    /**\n     * @param {Array} filters Packed ilters array\n     */\n    setFilters: function (filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters.reduce(function (prev, curr) {\n                prev.connect(curr);\n                return curr;\n            }, this.analyser).connect(this.gainNode);\n        }\n    },\n\n    createScriptNode: function () {\n        if (this.ac.createScriptProcessor) {\n            this.scriptNode = this.ac.createScriptProcessor(this.scriptBufferSize);\n        } else {\n            this.scriptNode = this.ac.createJavaScriptNode(this.scriptBufferSize);\n        }\n\n        this.scriptNode.connect(this.ac.destination);\n    },\n\n    _MD_ORIG_addOnAudioProcess: function () {\n        var my = this;\n\n        this.scriptNode.onaudioprocess = function () {\n            var time = my.getCurrentTime();\n\n            if (time >= my.getDuration()) {\n                my.setState(my.FINISHED_STATE);\n                my.fireEvent('pause');\n            } else if (time >= my.scheduledPause) {\n                my.pause();\n            } else if (my.state === my.states[my.PLAYING_STATE]) {\n                my.fireEvent('audioprocess', time);\n            }\n        };\n    },\n    addOnAudioProcess: function () {\n        var my = this;\n\n        this.scriptNode.onaudioprocess = function (e) {\n            var time = my.getCurrentTime();\n\n            if (time >= my.getDuration() || time < 0) {\n                my.setState(my.FINISHED_STATE);\n                my.fireEvent('pause');\n            } else if (time >= my.scheduledPause && my.playControl && !my.playControl.loop) {\n                my.setState(my.PAUSED_STATE);\n                my.fireEvent('pause');\n            } else if (my.state === my.states[my.PLAYING_STATE]) {\n                my.fireEvent('audioprocess', time);\n            }\n        };\n    },\n\n    removeOnAudioProcess: function () {\n        this.scriptNode.onaudioprocess = null;\n    },\n\n    createAnalyserNode: function () {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    },\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     */\n    createVolumeNode: function () {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    },\n\n    /**\n     * Set the gain to a new value.\n     *\n     * @param {Number} newGain The new gain, a floating point value\n     * between 0 and 1. 0 being no gain and 1 being maximum gain.\n     */\n    setVolume: function (newGain) {\n        this.gainNode.gain.value = newGain;\n    },\n\n    /**\n     * Get the current gain.\n     *\n     * @returns {Number} The current gain, a floating point value\n     * between 0 and 1. 0 being no gain and 1 being maximum gain.\n     */\n    getVolume: function () {\n        return this.gainNode.gain.value;\n    },\n\n    decodeArrayBuffer: function (arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(this.ac ? this.ac.sampleRate : 44100);\n        }\n        this.offlineAc.decodeAudioData(arraybuffer, function (data) {\n            callback(data);\n        }.bind(this), errback);\n    },\n\n    /**\n     * Set pre-decoded peaks.\n     */\n    setPeaks: function (peaks) {\n        this.peaks = peaks;\n    },\n\n    /**\n     * Set the rendered length (different from the length of the audio).\n     */\n    setLength: function (length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        var channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        for (var c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    },\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     * @param {Number} length How many subranges to break the waveform into.\n     * @param {Number} first First sample in the required range.\n     * @param {Number} last Last sample in the required range.\n     * @returns {Array} Array of 2*<length> peaks or array of arrays\n     * of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks: function (length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n\n        this.setLength(length);\n\n        var sampleSize = this.buffer.length / length;\n        var sampleStep = ~~(sampleSize / 10) || 1;\n        var channels = this.buffer.numberOfChannels;\n\n        for (var c = 0; c < channels; c++) {\n            var peaks = this.splitPeaks[c];\n            var chan = this.buffer.getChannelData(c);\n\n            for (var i = first; i <= last; i++) {\n                var start = ~~(i * sampleSize);\n                var end = ~~(start + sampleSize);\n                var min = 0;\n                var max = 0;\n\n                for (var j = start; j < end; j += sampleStep) {\n                    var value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    },\n\n    getPlayedPercents: function () {\n        return this.state.getPlayedPercents.call(this);\n    },\n\n    disconnectSource: function () {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    },\n\n    destroy: function () {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (typeof this.ac.close === 'function' && this.ac.state != 'closed') {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                __WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].audioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            __WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].offlineAudioContext = null;\n        }\n    },\n\n    load: function (buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    },\n\n    createSource: function () {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        //adjust for old browsers.\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.source.playbackRate.value = this.playbackRate;\n        this.source.buffer = this.buffer;\n        // _MD_ // this.source.connect(this.analyser);\n\n        var self = this;\n        // get scheduler and create scheduled granular engine\n        self.scheduler = self.wavesAudio.getScheduler();\n        self.scheduledGranularEngine = new self.wavesAudio.GranularEngine({\n            buffer: self.source.buffer\n        });\n        //scheduledGranularEngine.connect(audioContext.destination);\n\n        // create transport with play control and transported granular engine\n        console.log(self.transportedGranularEngine);\n        self.transportedGranularEngine = new self.wavesAudio.GranularEngine({\n            buffer: self.source.buffer,\n            cyclic: true\n        });\n\n        self.playControl = new self.wavesAudio.PlayControl(self.transportedGranularEngine);\n        self.transportedGranularEngine.connect(self.analyser);\n\n        // Start the granularEngine used for pitch detection \n        self.scheduler.add(self.scheduledGranularEngine);\n\n        //Good values for pitch detection \n        self.scheduledGranularEngine.positionVar = 0.0;\n        self.transportedGranularEngine.positionVar = 0.01;\n        self.scheduledGranularEngine.periodAbs = 0.05;\n        self.transportedGranularEngine.periodAbs = 0.1;\n        self.scheduledGranularEngine.durationAbs = 0.5;\n        self.transportedGranularEngine.durationAbs = 0.2;\n        self.scheduledGranularEngine.resampling = 0.0;\n        self.transportedGranularEngine.resampling = 0.0;\n        self.scheduledGranularEngine.resamplingVar = 0.0;\n        self.transportedGranularEngine.resamplingVar = 0.0;\n    },\n\n    isPaused: function () {\n        return this.state !== this.states[this.PLAYING_STATE];\n    },\n\n    getDuration: function () {\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    },\n\n    ORIGseekTo: function (start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[this.FINISHED_STATE]) {\n            this.setState(this.PAUSED_STATE);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    },\n    seekTo: function (start, end) {\n        var doLoop = true;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n            doLoop = false;\n        }\n        //this.startPosition = start; \n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[this.FINISHED_STATE]) {\n            this.setState(this.PAUSED_STATE);\n        }\n        // When loop is true, an undesired behavior makes seeking \n        // beyond loopEnd change the position so that it fits inside \n        // loop region. This ugly fix turns off looping when seeking\n        // outside loop region. (Also when playing in reverse (speed < 0), \n        // the same happens at loopStart).\n        if (!doLoop) {\n            this.playControl.setLoopBoundaries(0, this.getDuration());\n        } else {\n            this.playControl.setLoopBoundaries(start, end);\n        }\n\n        this.playControl.seek(start);\n        this.playControl.loop = doLoop;\n\n        this.scheduledPause = end;\n        //console.log(\"start: \" + start + \" end: \" + end);    \n        return {\n            start: start,\n            end: end\n        };\n    },\n\n    ORIGgetPlayedTime: function () {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    },\n    getPlayedTime: function () {\n        //console.log(this.playControl.currentPosition);\n        this.scheduledGranularEngine.position = this.playControl.currentPosition;\n        return this.playControl.currentPosition; //.mod(this.getDuration());\n        //return (this.ac.currentTime - this.lastPlay) * this.playbackRate * this.playControl.speed;\n    },\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {Number} start Start offset in seconds,\n     * relative to the beginning of a clip.\n     * @param {Number} end When to stop\n     * relative to the beginning of a clip.\n     */\n    ORIGplay: function (start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        var adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start, end - start);\n\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n\n        this.setState(this.PLAYING_STATE);\n\n        this.fireEvent('play');\n    },\n    play: function (start, end) {\n        // need to re-create source on each playback\n        //this.createSource();\n\n        var adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        //this.source.start(0, start, end - start);\n        //play();\n\n        //scheduler.add(this.transportedGranularEngine);\n\n        this.playControl.start();\n        this.playControl.seek(start);\n\n        //console.log(start);\n\n        this.setState(this.PLAYING_STATE);\n\n        this.fireEvent('play');\n    },\n\n    /**\n     * Pauses the loaded audio.\n     */\n    ORIGpause: function () {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        this.source && this.source.stop(0);\n\n        this.setState(this.PAUSED_STATE);\n\n        this.fireEvent('pause');\n    },\n    pause: function () {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        //this.source && this.source.stop(0);\n\n        this.playControl.pause();\n        //scheduler.remove(this.transportedGranularEngine);\n\n\n        this.setState(this.PAUSED_STATE);\n\n        this.fireEvent('pause');\n    },\n\n    /**\n     *   Returns the current time in seconds relative to the audioclip's duration.\n     */\n    getCurrentTime: function () {\n        return this.state.getCurrentTime.call(this);\n    },\n\n    /**\n     *   Returns the current playback rate.\n     */\n    getPlaybackRate: function () {\n        return this.playbackRate;\n    },\n\n    /**\n     * Set the audio source playback rate.\n     */\n    ORIGsetPlaybackRate: function (value) {\n        value = value || 1;\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            this.pause();\n            this.playbackRate = value;\n            this.play();\n        }\n    },\n    setPlaybackRate: function (value) {\n        value = value || 1;\n\n        if (this.playControl) {\n            this.playControl.speed = value;\n        }\n\n        if (this.isPaused()) {\n            this.playbackRate = value;\n        } else {\n            //this.pause();\n            this.playbackRate = value;\n            //this.play();\n        }\n    }\n};\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].state = {};\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].state.playing = {\n    init: function () {\n        this.addOnAudioProcess();\n    },\n    getPlayedPercents: function () {\n        var duration = this.getDuration();\n        return this.getCurrentTime() / duration || 0;\n    },\n    getCurrentTime: function () {\n        //_MD_ //return this.startPosition + this.getPlayedTime();\n        return this.getPlayedTime();\n    }\n};\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].state.paused = {\n    ORIGinit: function () {\n        this.removeOnAudioProcess();\n    },\n    /* _MD_ */\n    init: function () {\n        this.removeOnAudioProcess();\n        if (this.playControl) {\n            this.playControl.pause();\n        }\n    },\n    /* _MD_ */\n    getPlayedPercents: function () {\n        var duration = this.getDuration();\n        return this.getCurrentTime() / duration || 0;\n    },\n    getCurrentTime: function () {\n        //_MD_//return this.startPosition;\n        return this.getPlayedTime(); //_MD__\n    }\n};\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"].state.finished = {\n    init: function () {\n        this.playControl.stop(); // _MD_ //\n        this.removeOnAudioProcess();\n        this.fireEvent('finish');\n    },\n    getPlayedPercents: function () {\n        return 1;\n    },\n    getCurrentTime: function () {\n        return this.getDuration();\n    }\n};\n\n__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"util\"].extend(__WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"WebAudio\"], __WEBPACK_IMPORTED_MODULE_0_wavesurfer__[\"Observer\"]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n    WaveSurfer: __WEBPACK_IMPORTED_MODULE_0_wavesurfer__\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy93ZWJhdWRpb19pcmNhbS5qcz9lYmM5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gdGhlIGdyYW51bGFyRW5naW5lIGlzIHVzZWQgZm9yIHBpdGNoIHRyYWNraW5nXG4vLyBGSVhNRTogRm9yIG5vdyBnbG9iYmFseSBkZWNsYXJlZC4gRmluZCBiZXR0ZXIgc29sdXRpb24hXG5pbXBvcnQgKiBhcyBXYXZlU3VyZmVyIGZyb20gJ3dhdmVzdXJmZXInOyAvLyBfTURfIERvbid0IG5vdyBpZiB0aGlzIGlzIGNvcnJlY3Qgd2F5IHRvIGRvIGl0PyFcblxuV2F2ZVN1cmZlci5XZWJBdWRpbyA9IHtcbiAgICBzY3JpcHRCdWZmZXJTaXplOiAyNTYsXG4gICAgUExBWUlOR19TVEFURTogMCxcbiAgICBQQVVTRURfU1RBVEU6IDEsXG4gICAgRklOSVNIRURfU1RBVEU6IDIsXG5cbiAgICBzdXBwb3J0c1dlYkF1ZGlvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCk7XG5cbiAgICB9LFxuXG4gICAgZ2V0QXVkaW9Db250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFXYXZlU3VyZmVyLldlYkF1ZGlvLmF1ZGlvQ29udGV4dCkge1xuICAgICAgICAgICAgdGhpcy53YXZlc0F1ZGlvID0gcmVxdWlyZSgnd2F2ZXMtYXVkaW8nKTsgLy8gX01EX1xuICAgICAgICAgICAgLy8gX01EXyAvLyBXYXZlU3VyZmVyLldlYkF1ZGlvLmF1ZGlvQ29udGV4dCA9IG5ldyAoXG4gICAgICAgICAgICAvLyBfTURfIC8vICAgIHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dFxuICAgICAgICAgICAgLy8gX01EXyAvLyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImdldEF1ZGlvQ29udGV4dDogXCIgKyB0aGlzLndhdmVzQXVkaW8uYXVkaW9Db250ZXh0KTsgLy8gX01EX1xuICAgICAgICAgICAgV2F2ZVN1cmZlci5XZWJBdWRpby5hdWRpb0NvbnRleHQgPSB0aGlzLndhdmVzQXVkaW8uYXVkaW9Db250ZXh0OyAvLyBfTURfXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gV2F2ZVN1cmZlci5XZWJBdWRpby5hdWRpb0NvbnRleHQ7XG4gICAgfSxcblxuICAgIGdldE9mZmxpbmVBdWRpb0NvbnRleHQ6IGZ1bmN0aW9uKHNhbXBsZVJhdGUpIHtcbiAgICAgICAgaWYgKCFXYXZlU3VyZmVyLldlYkF1ZGlvLm9mZmxpbmVBdWRpb0NvbnRleHQpIHtcbiAgICAgICAgICAgIFdhdmVTdXJmZXIuV2ViQXVkaW8ub2ZmbGluZUF1ZGlvQ29udGV4dCA9IG5ldyhcbiAgICAgICAgICAgICAgICB3aW5kb3cuT2ZmbGluZUF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0T2ZmbGluZUF1ZGlvQ29udGV4dFxuICAgICAgICAgICAgKSgxLCAyLCBzYW1wbGVSYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gV2F2ZVN1cmZlci5XZWJBdWRpby5vZmZsaW5lQXVkaW9Db250ZXh0O1xuICAgIH0sXG5cbiAgICBpbml0OiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgICAgIHRoaXMuYWMgPSBwYXJhbXMuYXVkaW9Db250ZXh0IHx8IHRoaXMuZ2V0QXVkaW9Db250ZXh0KCk7XG5cbiAgICAgICAgdGhpcy5sYXN0UGxheSA9IHRoaXMuYWMuY3VycmVudFRpbWU7XG4gICAgICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVkUGF1c2UgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuc3RhdGVzID0gW1xuICAgICAgICAgICAgT2JqZWN0LmNyZWF0ZShXYXZlU3VyZmVyLldlYkF1ZGlvLnN0YXRlLnBsYXlpbmcpLFxuICAgICAgICAgICAgT2JqZWN0LmNyZWF0ZShXYXZlU3VyZmVyLldlYkF1ZGlvLnN0YXRlLnBhdXNlZCksXG4gICAgICAgICAgICBPYmplY3QuY3JlYXRlKFdhdmVTdXJmZXIuV2ViQXVkaW8uc3RhdGUuZmluaXNoZWQpXG4gICAgICAgIF07XG5cbiAgICAgICAgdGhpcy5jcmVhdGVWb2x1bWVOb2RlKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlU2NyaXB0Tm9kZSgpO1xuICAgICAgICB0aGlzLmNyZWF0ZUFuYWx5c2VyTm9kZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUodGhpcy5QQVVTRURfU1RBVEUpO1xuICAgICAgICB0aGlzLnNldFBsYXliYWNrUmF0ZSh0aGlzLnBhcmFtcy5hdWRpb1JhdGUpO1xuICAgICAgICB0aGlzLnNldExlbmd0aCgwKTtcbiAgICB9LFxuXG4gICAgZGlzY29ubmVjdEZpbHRlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5maWx0ZXJzKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlcnMuZm9yRWFjaChmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXIgJiYgZmlsdGVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJzID0gbnVsbDtcbiAgICAgICAgICAgIC8vIFJlY29ubmVjdCBkaXJlY3QgcGF0aFxuICAgICAgICAgICAgdGhpcy5hbmFseXNlci5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNldFN0YXRlOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gdGhpcy5zdGF0ZXNbc3RhdGVdKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGF0ZXNbc3RhdGVdO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5pbml0LmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gVW5wYWNrZWQgZmlsdGVyc1xuICAgIHNldEZpbHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuc2V0RmlsdGVycyhbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBmaWx0ZXJzIFBhY2tlZCBpbHRlcnMgYXJyYXlcbiAgICAgKi9cbiAgICBzZXRGaWx0ZXJzOiBmdW5jdGlvbihmaWx0ZXJzKSB7XG4gICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBmaWx0ZXJzXG4gICAgICAgIHRoaXMuZGlzY29ubmVjdEZpbHRlcnMoKTtcblxuICAgICAgICAvLyBJbnNlcnQgZmlsdGVycyBpZiBmaWx0ZXIgYXJyYXkgbm90IGVtcHR5XG4gICAgICAgIGlmIChmaWx0ZXJzICYmIGZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlcnMgPSBmaWx0ZXJzO1xuXG4gICAgICAgICAgICAvLyBEaXNjb25uZWN0IGRpcmVjdCBwYXRoIGJlZm9yZSBpbnNlcnRpbmcgZmlsdGVyc1xuICAgICAgICAgICAgdGhpcy5hbmFseXNlci5kaXNjb25uZWN0KCk7XG5cbiAgICAgICAgICAgIC8vIENvbm5lY3QgZWFjaCBmaWx0ZXIgaW4gdHVyblxuICAgICAgICAgICAgZmlsdGVycy5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3Vycikge1xuICAgICAgICAgICAgICAgIHByZXYuY29ubmVjdChjdXJyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycjtcbiAgICAgICAgICAgIH0sIHRoaXMuYW5hbHlzZXIpLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG4gICAgICAgIH1cblxuICAgIH0sXG5cbiAgICBjcmVhdGVTY3JpcHROb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuYWMuY3JlYXRlU2NyaXB0UHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB0aGlzLnNjcmlwdE5vZGUgPSB0aGlzLmFjLmNyZWF0ZVNjcmlwdFByb2Nlc3Nvcih0aGlzLnNjcmlwdEJ1ZmZlclNpemUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY3JpcHROb2RlID0gdGhpcy5hYy5jcmVhdGVKYXZhU2NyaXB0Tm9kZSh0aGlzLnNjcmlwdEJ1ZmZlclNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zY3JpcHROb2RlLmNvbm5lY3QodGhpcy5hYy5kZXN0aW5hdGlvbik7XG4gICAgfSxcblxuICAgIF9NRF9PUklHX2FkZE9uQXVkaW9Qcm9jZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG15ID0gdGhpcztcblxuICAgICAgICB0aGlzLnNjcmlwdE5vZGUub25hdWRpb3Byb2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aW1lID0gbXkuZ2V0Q3VycmVudFRpbWUoKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgPj0gbXkuZ2V0RHVyYXRpb24oKSkge1xuICAgICAgICAgICAgICAgIG15LnNldFN0YXRlKG15LkZJTklTSEVEX1NUQVRFKTtcbiAgICAgICAgICAgICAgICBteS5maXJlRXZlbnQoJ3BhdXNlJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWUgPj0gbXkuc2NoZWR1bGVkUGF1c2UpIHtcbiAgICAgICAgICAgICAgICBteS5wYXVzZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChteS5zdGF0ZSA9PT0gbXkuc3RhdGVzW215LlBMQVlJTkdfU1RBVEVdKSB7XG4gICAgICAgICAgICAgICAgbXkuZmlyZUV2ZW50KCdhdWRpb3Byb2Nlc3MnLCB0aW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFkZE9uQXVkaW9Qcm9jZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG15ID0gdGhpcztcblxuICAgICAgICB0aGlzLnNjcmlwdE5vZGUub25hdWRpb3Byb2Nlc3MgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgdGltZSA9IG15LmdldEN1cnJlbnRUaW1lKCk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lID49IG15LmdldER1cmF0aW9uKCkgfHwgdGltZSA8IDApIHtcbiAgICAgICAgICAgICAgICBteS5zZXRTdGF0ZShteS5GSU5JU0hFRF9TVEFURSk7XG4gICAgICAgICAgICAgICAgbXkuZmlyZUV2ZW50KCdwYXVzZScpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aW1lID49IG15LnNjaGVkdWxlZFBhdXNlICYmIG15LnBsYXlDb250cm9sICYmICFteS5wbGF5Q29udHJvbC5sb29wKSB7XG4gICAgICAgICAgICAgICAgbXkuc2V0U3RhdGUobXkuUEFVU0VEX1NUQVRFKTtcbiAgICAgICAgICAgICAgICBteS5maXJlRXZlbnQoJ3BhdXNlJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG15LnN0YXRlID09PSBteS5zdGF0ZXNbbXkuUExBWUlOR19TVEFURV0pIHtcbiAgICAgICAgICAgICAgICBteS5maXJlRXZlbnQoJ2F1ZGlvcHJvY2VzcycsIHRpbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHJlbW92ZU9uQXVkaW9Qcm9jZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zY3JpcHROb2RlLm9uYXVkaW9wcm9jZXNzID0gbnVsbDtcbiAgICB9LFxuXG4gICAgY3JlYXRlQW5hbHlzZXJOb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5hbmFseXNlciA9IHRoaXMuYWMuY3JlYXRlQW5hbHlzZXIoKTtcbiAgICAgICAgdGhpcy5hbmFseXNlci5jb25uZWN0KHRoaXMuZ2Fpbk5vZGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGdhaW4gbm9kZSBuZWVkZWQgdG8gY29udHJvbCB0aGUgcGxheWJhY2sgdm9sdW1lLlxuICAgICAqL1xuICAgIGNyZWF0ZVZvbHVtZU5vZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBDcmVhdGUgZ2FpbiBub2RlIHVzaW5nIHRoZSBBdWRpb0NvbnRleHRcbiAgICAgICAgaWYgKHRoaXMuYWMuY3JlYXRlR2Fpbikge1xuICAgICAgICAgICAgdGhpcy5nYWluTm9kZSA9IHRoaXMuYWMuY3JlYXRlR2FpbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nYWluTm9kZSA9IHRoaXMuYWMuY3JlYXRlR2Fpbk5vZGUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgdGhlIGdhaW4gbm9kZSB0byB0aGUgZ3JhcGhcbiAgICAgICAgdGhpcy5nYWluTm9kZS5jb25uZWN0KHRoaXMuYWMuZGVzdGluYXRpb24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGdhaW4gdG8gYSBuZXcgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbmV3R2FpbiBUaGUgbmV3IGdhaW4sIGEgZmxvYXRpbmcgcG9pbnQgdmFsdWVcbiAgICAgKiBiZXR3ZWVuIDAgYW5kIDEuIDAgYmVpbmcgbm8gZ2FpbiBhbmQgMSBiZWluZyBtYXhpbXVtIGdhaW4uXG4gICAgICovXG4gICAgc2V0Vm9sdW1lOiBmdW5jdGlvbihuZXdHYWluKSB7XG4gICAgICAgIHRoaXMuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IG5ld0dhaW47XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBnYWluLlxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlcn0gVGhlIGN1cnJlbnQgZ2FpbiwgYSBmbG9hdGluZyBwb2ludCB2YWx1ZVxuICAgICAqIGJldHdlZW4gMCBhbmQgMS4gMCBiZWluZyBubyBnYWluIGFuZCAxIGJlaW5nIG1heGltdW0gZ2Fpbi5cbiAgICAgKi9cbiAgICBnZXRWb2x1bWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nYWluTm9kZS5nYWluLnZhbHVlO1xuICAgIH0sXG5cbiAgICBkZWNvZGVBcnJheUJ1ZmZlcjogZnVuY3Rpb24oYXJyYXlidWZmZXIsIGNhbGxiYWNrLCBlcnJiYWNrKSB7XG4gICAgICAgIGlmICghdGhpcy5vZmZsaW5lQWMpIHtcbiAgICAgICAgICAgIHRoaXMub2ZmbGluZUFjID0gdGhpcy5nZXRPZmZsaW5lQXVkaW9Db250ZXh0KHRoaXMuYWMgPyB0aGlzLmFjLnNhbXBsZVJhdGUgOiA0NDEwMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vZmZsaW5lQWMuZGVjb2RlQXVkaW9EYXRhKGFycmF5YnVmZmVyLCAoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgIH0pLmJpbmQodGhpcyksIGVycmJhY2spO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgcHJlLWRlY29kZWQgcGVha3MuXG4gICAgICovXG4gICAgc2V0UGVha3M6IGZ1bmN0aW9uKHBlYWtzKSB7XG4gICAgICAgIHRoaXMucGVha3MgPSBwZWFrcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSByZW5kZXJlZCBsZW5ndGggKGRpZmZlcmVudCBmcm9tIHRoZSBsZW5ndGggb2YgdGhlIGF1ZGlvKS5cbiAgICAgKi9cbiAgICBzZXRMZW5ndGg6IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgICAgICAvLyBObyByZXNpemUsIHdlIGNhbiBwcmVzZXJ2ZSB0aGUgY2FjaGVkIHBlYWtzLlxuICAgICAgICBpZiAodGhpcy5tZXJnZWRQZWFrcyAmJiBsZW5ndGggPT0gKCgyICogdGhpcy5tZXJnZWRQZWFrcy5sZW5ndGggLSAxKSArIDIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNwbGl0UGVha3MgPSBbXTtcbiAgICAgICAgdGhpcy5tZXJnZWRQZWFrcyA9IFtdO1xuICAgICAgICAvLyBTZXQgdGhlIGxhc3QgZWxlbWVudCBvZiB0aGUgc3BhcnNlIGFycmF5IHNvIHRoZSBwZWFrIGFycmF5cyBhcmVcbiAgICAgICAgLy8gYXBwcm9wcmlhdGVseSBzaXplZCBmb3Igb3RoZXIgY2FsY3VsYXRpb25zLlxuICAgICAgICB2YXIgY2hhbm5lbHMgPSB0aGlzLmJ1ZmZlciA/IHRoaXMuYnVmZmVyLm51bWJlck9mQ2hhbm5lbHMgOiAxO1xuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNoYW5uZWxzOyBjKyspIHtcbiAgICAgICAgICAgIHRoaXMuc3BsaXRQZWFrc1tjXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5zcGxpdFBlYWtzW2NdWzIgKiAobGVuZ3RoIC0gMSldID0gMDtcbiAgICAgICAgICAgIHRoaXMuc3BsaXRQZWFrc1tjXVsyICogKGxlbmd0aCAtIDEpICsgMV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVyZ2VkUGVha3NbMiAqIChsZW5ndGggLSAxKV0gPSAwO1xuICAgICAgICB0aGlzLm1lcmdlZFBlYWtzWzIgKiAobGVuZ3RoIC0gMSkgKyAxXSA9IDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIG1heCBhbmQgbWluIHZhbHVlIG9mIHRoZSB3YXZlZm9ybSB3aGVuIGJyb2tlbiBpbnRvXG4gICAgICogPGxlbmd0aD4gc3VicmFuZ2VzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggSG93IG1hbnkgc3VicmFuZ2VzIHRvIGJyZWFrIHRoZSB3YXZlZm9ybSBpbnRvLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmaXJzdCBGaXJzdCBzYW1wbGUgaW4gdGhlIHJlcXVpcmVkIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsYXN0IExhc3Qgc2FtcGxlIGluIHRoZSByZXF1aXJlZCByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IEFycmF5IG9mIDIqPGxlbmd0aD4gcGVha3Mgb3IgYXJyYXkgb2YgYXJyYXlzXG4gICAgICogb2YgcGVha3MgY29uc2lzdGluZyBvZiAobWF4LCBtaW4pIHZhbHVlcyBmb3IgZWFjaCBzdWJyYW5nZS5cbiAgICAgKi9cbiAgICBnZXRQZWFrczogZnVuY3Rpb24obGVuZ3RoLCBmaXJzdCwgbGFzdCkge1xuICAgICAgICBpZiAodGhpcy5wZWFrcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGVha3M7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldExlbmd0aChsZW5ndGgpO1xuXG4gICAgICAgIHZhciBzYW1wbGVTaXplID0gdGhpcy5idWZmZXIubGVuZ3RoIC8gbGVuZ3RoO1xuICAgICAgICB2YXIgc2FtcGxlU3RlcCA9IH5+KHNhbXBsZVNpemUgLyAxMCkgfHwgMTtcbiAgICAgICAgdmFyIGNoYW5uZWxzID0gdGhpcy5idWZmZXIubnVtYmVyT2ZDaGFubmVscztcblxuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNoYW5uZWxzOyBjKyspIHtcbiAgICAgICAgICAgIHZhciBwZWFrcyA9IHRoaXMuc3BsaXRQZWFrc1tjXTtcbiAgICAgICAgICAgIHZhciBjaGFuID0gdGhpcy5idWZmZXIuZ2V0Q2hhbm5lbERhdGEoYyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBmaXJzdDsgaSA8PSBsYXN0OyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSB+fihpICogc2FtcGxlU2l6ZSk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IH5+KHN0YXJ0ICsgc2FtcGxlU2l6ZSk7XG4gICAgICAgICAgICAgICAgdmFyIG1pbiA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIG1heCA9IDA7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gc3RhcnQ7IGogPCBlbmQ7IGogKz0gc2FtcGxlU3RlcCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBjaGFuW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCBtaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGVha3NbMiAqIGldID0gbWF4O1xuICAgICAgICAgICAgICAgIHBlYWtzWzIgKiBpICsgMV0gPSBtaW47XG5cbiAgICAgICAgICAgICAgICBpZiAoYyA9PSAwIHx8IG1heCA+IHRoaXMubWVyZ2VkUGVha3NbMiAqIGldKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVyZ2VkUGVha3NbMiAqIGldID0gbWF4O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjID09IDAgfHwgbWluIDwgdGhpcy5tZXJnZWRQZWFrc1syICogaSArIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVyZ2VkUGVha3NbMiAqIGkgKyAxXSA9IG1pbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXMuc3BsaXRDaGFubmVscyA/IHRoaXMuc3BsaXRQZWFrcyA6IHRoaXMubWVyZ2VkUGVha3M7XG4gICAgfSxcblxuICAgIGdldFBsYXllZFBlcmNlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZ2V0UGxheWVkUGVyY2VudHMuY2FsbCh0aGlzKTtcbiAgICB9LFxuXG4gICAgZGlzY29ubmVjdFNvdXJjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNQYXVzZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5BbGwoKTtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RGaWx0ZXJzKCk7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdFNvdXJjZSgpO1xuICAgICAgICB0aGlzLmdhaW5Ob2RlLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5zY3JpcHROb2RlLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5hbmFseXNlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIC8vIGNsb3NlIHRoZSBhdWRpb0NvbnRleHQgaWYgY2xvc2VBdWRpb0NvbnRleHQgb3B0aW9uIGlzIHNldCB0byB0cnVlXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5jbG9zZUF1ZGlvQ29udGV4dCkge1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgYnJvd3NlciBzdXBwb3J0cyBBdWRpb0NvbnRleHQuY2xvc2UoKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmFjLmNsb3NlID09PSAnZnVuY3Rpb24nICYmIHRoaXMuYWMuc3RhdGUgIT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjbGVhciB0aGUgcmVmZXJlbmNlIHRvIHRoZSBhdWRpb2NvbnRleHRcbiAgICAgICAgICAgIHRoaXMuYWMgPSBudWxsO1xuICAgICAgICAgICAgLy8gY2xlYXIgdGhlIGFjdHVhbCBhdWRpb2NvbnRleHQsIGVpdGhlciBwYXNzZWQgYXMgcGFyYW0gb3IgdGhlXG4gICAgICAgICAgICAvLyBnbG9iYWwgc2luZ2xldG9uXG4gICAgICAgICAgICBpZiAoIXRoaXMucGFyYW1zLmF1ZGlvQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIFdhdmVTdXJmZXIuV2ViQXVkaW8uYXVkaW9Db250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMuYXVkaW9Db250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNsZWFyIHRoZSBvZmZsaW5lQXVkaW9Db250ZXh0XG4gICAgICAgICAgICBXYXZlU3VyZmVyLldlYkF1ZGlvLm9mZmxpbmVBdWRpb0NvbnRleHQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGxvYWQ6IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSAwO1xuICAgICAgICB0aGlzLmxhc3RQbGF5ID0gdGhpcy5hYy5jdXJyZW50VGltZTtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICAgIHRoaXMuY3JlYXRlU291cmNlKCk7XG4gICAgfSxcblxuICAgIGNyZWF0ZVNvdXJjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdFNvdXJjZSgpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHRoaXMuYWMuY3JlYXRlQnVmZmVyU291cmNlKCk7XG5cbiAgICAgICAgLy9hZGp1c3QgZm9yIG9sZCBicm93c2Vycy5cbiAgICAgICAgdGhpcy5zb3VyY2Uuc3RhcnQgPSB0aGlzLnNvdXJjZS5zdGFydCB8fCB0aGlzLnNvdXJjZS5ub3RlR3JhaW5PbjtcbiAgICAgICAgdGhpcy5zb3VyY2Uuc3RvcCA9IHRoaXMuc291cmNlLnN0b3AgfHwgdGhpcy5zb3VyY2Uubm90ZU9mZjtcblxuICAgICAgICB0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGUudmFsdWUgPSB0aGlzLnBsYXliYWNrUmF0ZTtcbiAgICAgICAgdGhpcy5zb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgICAgIC8vIF9NRF8gLy8gdGhpcy5zb3VyY2UuY29ubmVjdCh0aGlzLmFuYWx5c2VyKTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIC8vIGdldCBzY2hlZHVsZXIgYW5kIGNyZWF0ZSBzY2hlZHVsZWQgZ3JhbnVsYXIgZW5naW5lXG4gICAgICAgIHNlbGYuc2NoZWR1bGVyID0gc2VsZi53YXZlc0F1ZGlvLmdldFNjaGVkdWxlcigpO1xuICAgICAgICBzZWxmLnNjaGVkdWxlZEdyYW51bGFyRW5naW5lID0gbmV3IHNlbGYud2F2ZXNBdWRpby5HcmFudWxhckVuZ2luZSh7XG4gICAgICAgICAgICBidWZmZXI6IHNlbGYuc291cmNlLmJ1ZmZlclxuICAgICAgICB9KTtcbiAgICAgICAgLy9zY2hlZHVsZWRHcmFudWxhckVuZ2luZS5jb25uZWN0KGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRyYW5zcG9ydCB3aXRoIHBsYXkgY29udHJvbCBhbmQgdHJhbnNwb3J0ZWQgZ3JhbnVsYXIgZW5naW5lXG4gICAgICAgIGNvbnNvbGUubG9nKHNlbGYudHJhbnNwb3J0ZWRHcmFudWxhckVuZ2luZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0ZWRHcmFudWxhckVuZ2luZSA9IG5ldyBzZWxmLndhdmVzQXVkaW8uR3JhbnVsYXJFbmdpbmUoe1xuICAgICAgICAgICAgYnVmZmVyOiBzZWxmLnNvdXJjZS5idWZmZXIsXG4gICAgICAgICAgICBjeWNsaWM6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIFxuXG4gICAgICAgIHNlbGYucGxheUNvbnRyb2wgPSBuZXcgc2VsZi53YXZlc0F1ZGlvLlBsYXlDb250cm9sKHNlbGYudHJhbnNwb3J0ZWRHcmFudWxhckVuZ2luZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0ZWRHcmFudWxhckVuZ2luZS5jb25uZWN0KHNlbGYuYW5hbHlzZXIpO1xuXG4gICAgICAgIC8vIFN0YXJ0IHRoZSBncmFudWxhckVuZ2luZSB1c2VkIGZvciBwaXRjaCBkZXRlY3Rpb24gXG4gICAgICAgIHNlbGYuc2NoZWR1bGVyLmFkZChzZWxmLnNjaGVkdWxlZEdyYW51bGFyRW5naW5lKTtcblxuICAgICAgICAvL0dvb2QgdmFsdWVzIGZvciBwaXRjaCBkZXRlY3Rpb24gXG4gICAgICAgIHNlbGYuc2NoZWR1bGVkR3JhbnVsYXJFbmdpbmUucG9zaXRpb25WYXIgPSAwLjA7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0ZWRHcmFudWxhckVuZ2luZS5wb3NpdGlvblZhciA9IDAuMDE7XG4gICAgICAgIHNlbGYuc2NoZWR1bGVkR3JhbnVsYXJFbmdpbmUucGVyaW9kQWJzID0gMC4wNTtcbiAgICAgICAgc2VsZi50cmFuc3BvcnRlZEdyYW51bGFyRW5naW5lLnBlcmlvZEFicyA9IDAuMTtcbiAgICAgICAgc2VsZi5zY2hlZHVsZWRHcmFudWxhckVuZ2luZS5kdXJhdGlvbkFicyA9IDAuNTtcbiAgICAgICAgc2VsZi50cmFuc3BvcnRlZEdyYW51bGFyRW5naW5lLmR1cmF0aW9uQWJzID0gMC4yO1xuICAgICAgICBzZWxmLnNjaGVkdWxlZEdyYW51bGFyRW5naW5lLnJlc2FtcGxpbmcgPSAwLjA7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0ZWRHcmFudWxhckVuZ2luZS5yZXNhbXBsaW5nID0gMC4wO1xuICAgICAgICBzZWxmLnNjaGVkdWxlZEdyYW51bGFyRW5naW5lLnJlc2FtcGxpbmdWYXIgPSAwLjA7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0ZWRHcmFudWxhckVuZ2luZS5yZXNhbXBsaW5nVmFyID0gMC4wO1xuXG4gICAgfSxcblxuICAgIGlzUGF1c2VkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUgIT09IHRoaXMuc3RhdGVzW3RoaXMuUExBWUlOR19TVEFURV07XG4gICAgfSxcblxuICAgIGdldER1cmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJ1ZmZlcikge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmR1cmF0aW9uO1xuICAgIH0sXG5cbiAgICBPUklHc2Vla1RvOiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmICghdGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2NoZWR1bGVkUGF1c2UgPSBudWxsO1xuXG4gICAgICAgIGlmIChzdGFydCA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydCA9IHRoaXMuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgICAgICAgIGlmIChzdGFydCA+PSB0aGlzLmdldER1cmF0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbmQgPSB0aGlzLmdldER1cmF0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBzdGFydDtcbiAgICAgICAgdGhpcy5sYXN0UGxheSA9IHRoaXMuYWMuY3VycmVudFRpbWU7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IHRoaXMuc3RhdGVzW3RoaXMuRklOSVNIRURfU1RBVEVdKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHRoaXMuUEFVU0VEX1NUQVRFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgc2Vla1RvOiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciBkb0xvb3AgPSB0cnVlO1xuXG4gICAgICAgIGlmIChzdGFydCA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydCA9IHRoaXMuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgICAgICAgIGlmIChzdGFydCA+PSB0aGlzLmdldER1cmF0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbmQgPSB0aGlzLmdldER1cmF0aW9uKCk7XG4gICAgICAgICAgICBkb0xvb3AgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvL3RoaXMuc3RhcnRQb3NpdGlvbiA9IHN0YXJ0OyBcbiAgICAgICAgdGhpcy5zdGFydFBvc2l0aW9uID0gMDtcbiAgICAgICAgdGhpcy5sYXN0UGxheSA9IHRoaXMuYWMuY3VycmVudFRpbWU7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IHRoaXMuc3RhdGVzW3RoaXMuRklOSVNIRURfU1RBVEVdKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHRoaXMuUEFVU0VEX1NUQVRFKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXaGVuIGxvb3AgaXMgdHJ1ZSwgYW4gdW5kZXNpcmVkIGJlaGF2aW9yIG1ha2VzIHNlZWtpbmcgXG4gICAgICAgIC8vIGJleW9uZCBsb29wRW5kIGNoYW5nZSB0aGUgcG9zaXRpb24gc28gdGhhdCBpdCBmaXRzIGluc2lkZSBcbiAgICAgICAgLy8gbG9vcCByZWdpb24uIFRoaXMgdWdseSBmaXggdHVybnMgb2ZmIGxvb3Bpbmcgd2hlbiBzZWVraW5nXG4gICAgICAgIC8vIG91dHNpZGUgbG9vcCByZWdpb24uIChBbHNvIHdoZW4gcGxheWluZyBpbiByZXZlcnNlIChzcGVlZCA8IDApLCBcbiAgICAgICAgLy8gdGhlIHNhbWUgaGFwcGVucyBhdCBsb29wU3RhcnQpLlxuICAgICAgICBpZiAoIWRvTG9vcCkge1xuICAgICAgICAgICAgdGhpcy5wbGF5Q29udHJvbC5zZXRMb29wQm91bmRhcmllcygwLCB0aGlzLmdldER1cmF0aW9uKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wbGF5Q29udHJvbC5zZXRMb29wQm91bmRhcmllcyhzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGxheUNvbnRyb2wuc2VlayhzdGFydCk7XG4gICAgICAgIHRoaXMucGxheUNvbnRyb2wubG9vcCA9IGRvTG9vcDtcblxuICAgICAgICB0aGlzLnNjaGVkdWxlZFBhdXNlID0gZW5kO1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwic3RhcnQ6IFwiICsgc3RhcnQgKyBcIiBlbmQ6IFwiICsgZW5kKTsgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBPUklHZ2V0UGxheWVkVGltZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5hYy5jdXJyZW50VGltZSAtIHRoaXMubGFzdFBsYXkpICogdGhpcy5wbGF5YmFja1JhdGU7XG4gICAgfSxcbiAgICBnZXRQbGF5ZWRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLnBsYXlDb250cm9sLmN1cnJlbnRQb3NpdGlvbik7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVkR3JhbnVsYXJFbmdpbmUucG9zaXRpb24gPSB0aGlzLnBsYXlDb250cm9sLmN1cnJlbnRQb3NpdGlvbjtcbiAgICAgICAgcmV0dXJuICh0aGlzLnBsYXlDb250cm9sLmN1cnJlbnRQb3NpdGlvbik7IC8vLm1vZCh0aGlzLmdldER1cmF0aW9uKCkpO1xuICAgICAgICAvL3JldHVybiAodGhpcy5hYy5jdXJyZW50VGltZSAtIHRoaXMubGFzdFBsYXkpICogdGhpcy5wbGF5YmFja1JhdGUgKiB0aGlzLnBsYXlDb250cm9sLnNwZWVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQbGF5cyB0aGUgbG9hZGVkIGF1ZGlvIHJlZ2lvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCBTdGFydCBvZmZzZXQgaW4gc2Vjb25kcyxcbiAgICAgKiByZWxhdGl2ZSB0byB0aGUgYmVnaW5uaW5nIG9mIGEgY2xpcC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kIFdoZW4gdG8gc3RvcFxuICAgICAqIHJlbGF0aXZlIHRvIHRoZSBiZWdpbm5pbmcgb2YgYSBjbGlwLlxuICAgICAqL1xuICAgIE9SSUdwbGF5OiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmICghdGhpcy5idWZmZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5lZWQgdG8gcmUtY3JlYXRlIHNvdXJjZSBvbiBlYWNoIHBsYXliYWNrXG4gICAgICAgIHRoaXMuY3JlYXRlU291cmNlKCk7XG5cbiAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRoaXMuc2Vla1RvKHN0YXJ0LCBlbmQpO1xuXG4gICAgICAgIHN0YXJ0ID0gYWRqdXN0ZWRUaW1lLnN0YXJ0O1xuICAgICAgICBlbmQgPSBhZGp1c3RlZFRpbWUuZW5kO1xuXG4gICAgICAgIHRoaXMuc2NoZWR1bGVkUGF1c2UgPSBlbmQ7XG5cbiAgICAgICAgdGhpcy5zb3VyY2Uuc3RhcnQoMCwgc3RhcnQsIGVuZCAtIHN0YXJ0KTtcblxuICAgICAgICBpZiAodGhpcy5hYy5zdGF0ZSA9PSAnc3VzcGVuZGVkJykge1xuICAgICAgICAgICAgdGhpcy5hYy5yZXN1bWUgJiYgdGhpcy5hYy5yZXN1bWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUodGhpcy5QTEFZSU5HX1NUQVRFKTtcblxuICAgICAgICB0aGlzLmZpcmVFdmVudCgncGxheScpO1xuICAgIH0sXG4gICAgcGxheTogZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgICAvLyBuZWVkIHRvIHJlLWNyZWF0ZSBzb3VyY2Ugb24gZWFjaCBwbGF5YmFja1xuICAgICAgICAvL3RoaXMuY3JlYXRlU291cmNlKCk7XG5cbiAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRoaXMuc2Vla1RvKHN0YXJ0LCBlbmQpO1xuXG4gICAgICAgIHN0YXJ0ID0gYWRqdXN0ZWRUaW1lLnN0YXJ0O1xuICAgICAgICBlbmQgPSBhZGp1c3RlZFRpbWUuZW5kO1xuXG4gICAgICAgIHRoaXMuc2NoZWR1bGVkUGF1c2UgPSBlbmQ7XG5cbiAgICAgICAgLy90aGlzLnNvdXJjZS5zdGFydCgwLCBzdGFydCwgZW5kIC0gc3RhcnQpO1xuICAgICAgICAvL3BsYXkoKTtcblxuICAgICAgICAvL3NjaGVkdWxlci5hZGQodGhpcy50cmFuc3BvcnRlZEdyYW51bGFyRW5naW5lKTtcblxuICAgICAgICB0aGlzLnBsYXlDb250cm9sLnN0YXJ0KCk7XG4gICAgICAgIHRoaXMucGxheUNvbnRyb2wuc2VlayhzdGFydCk7XG5cbiAgICAgICAgLy9jb25zb2xlLmxvZyhzdGFydCk7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLlBMQVlJTkdfU1RBVEUpO1xuXG4gICAgICAgIHRoaXMuZmlyZUV2ZW50KCdwbGF5Jyk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUGF1c2VzIHRoZSBsb2FkZWQgYXVkaW8uXG4gICAgICovXG4gICAgT1JJR3BhdXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWRQYXVzZSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5zdGFydFBvc2l0aW9uICs9IHRoaXMuZ2V0UGxheWVkVGltZSgpO1xuICAgICAgICB0aGlzLnNvdXJjZSAmJiB0aGlzLnNvdXJjZS5zdG9wKDApO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUodGhpcy5QQVVTRURfU1RBVEUpO1xuXG4gICAgICAgIHRoaXMuZmlyZUV2ZW50KCdwYXVzZScpO1xuICAgIH0sXG4gICAgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlZFBhdXNlID0gbnVsbDtcblxuICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gKz0gdGhpcy5nZXRQbGF5ZWRUaW1lKCk7XG4gICAgICAgIC8vdGhpcy5zb3VyY2UgJiYgdGhpcy5zb3VyY2Uuc3RvcCgwKTtcblxuICAgICAgICB0aGlzLnBsYXlDb250cm9sLnBhdXNlKCk7XG4gICAgICAgIC8vc2NoZWR1bGVyLnJlbW92ZSh0aGlzLnRyYW5zcG9ydGVkR3JhbnVsYXJFbmdpbmUpO1xuXG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLlBBVVNFRF9TVEFURSk7XG5cbiAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3BhdXNlJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICAgUmV0dXJucyB0aGUgY3VycmVudCB0aW1lIGluIHNlY29uZHMgcmVsYXRpdmUgdG8gdGhlIGF1ZGlvY2xpcCdzIGR1cmF0aW9uLlxuICAgICAqL1xuICAgIGdldEN1cnJlbnRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZ2V0Q3VycmVudFRpbWUuY2FsbCh0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogICBSZXR1cm5zIHRoZSBjdXJyZW50IHBsYXliYWNrIHJhdGUuXG4gICAgICovXG4gICAgZ2V0UGxheWJhY2tSYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGxheWJhY2tSYXRlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGF1ZGlvIHNvdXJjZSBwbGF5YmFjayByYXRlLlxuICAgICAqL1xuICAgIE9SSUdzZXRQbGF5YmFja1JhdGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgfHwgMTtcbiAgICAgICAgaWYgKHRoaXMuaXNQYXVzZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5wbGF5YmFja1JhdGUgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICAgIHRoaXMucGxheWJhY2tSYXRlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0UGxheWJhY2tSYXRlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlIHx8IDE7XG5cbiAgICAgICAgaWYgKHRoaXMucGxheUNvbnRyb2wpIHtcbiAgICAgICAgICAgIHRoaXMucGxheUNvbnRyb2wuc3BlZWQgPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzUGF1c2VkKCkpIHtcbiAgICAgICAgICAgIHRoaXMucGxheWJhY2tSYXRlID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3RoaXMucGF1c2UoKTtcbiAgICAgICAgICAgIHRoaXMucGxheWJhY2tSYXRlID0gdmFsdWU7XG4gICAgICAgICAgICAvL3RoaXMucGxheSgpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuV2F2ZVN1cmZlci5XZWJBdWRpby5zdGF0ZSA9IHt9O1xuXG5XYXZlU3VyZmVyLldlYkF1ZGlvLnN0YXRlLnBsYXlpbmcgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYWRkT25BdWRpb1Byb2Nlc3MoKTtcbiAgICB9LFxuICAgIGdldFBsYXllZFBlcmNlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0Q3VycmVudFRpbWUoKSAvIGR1cmF0aW9uKSB8fCAwO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudFRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL19NRF8gLy9yZXR1cm4gdGhpcy5zdGFydFBvc2l0aW9uICsgdGhpcy5nZXRQbGF5ZWRUaW1lKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBsYXllZFRpbWUoKTtcbiAgICB9XG59O1xuXG5XYXZlU3VyZmVyLldlYkF1ZGlvLnN0YXRlLnBhdXNlZCA9IHtcbiAgICBPUklHaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlT25BdWRpb1Byb2Nlc3MoKTtcbiAgICB9LFxuICAgIC8qIF9NRF8gKi9cbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVPbkF1ZGlvUHJvY2VzcygpO1xuICAgICAgICBpZiAodGhpcy5wbGF5Q29udHJvbCkge1xuICAgICAgICAgICAgdGhpcy5wbGF5Q29udHJvbC5wYXVzZSgpO1xuICAgICAgICB9XG5cblxuICAgIH0sXG4gICAgLyogX01EXyAqL1xuICAgIGdldFBsYXllZFBlcmNlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0Q3VycmVudFRpbWUoKSAvIGR1cmF0aW9uKSB8fCAwO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudFRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL19NRF8vL3JldHVybiB0aGlzLnN0YXJ0UG9zaXRpb247XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBsYXllZFRpbWUoKTsgLy9fTURfX1xuICAgIH1cbn07XG5cbldhdmVTdXJmZXIuV2ViQXVkaW8uc3RhdGUuZmluaXNoZWQgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucGxheUNvbnRyb2wuc3RvcCgpOyAvLyBfTURfIC8vXG4gICAgICAgIHRoaXMucmVtb3ZlT25BdWRpb1Byb2Nlc3MoKTtcbiAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2ZpbmlzaCcpO1xuICAgIH0sXG4gICAgZ2V0UGxheWVkUGVyY2VudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9LFxuICAgIGdldEN1cnJlbnRUaW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RHVyYXRpb24oKTtcbiAgICB9XG59O1xuXG5XYXZlU3VyZmVyLnV0aWwuZXh0ZW5kKFdhdmVTdXJmZXIuV2ViQXVkaW8sIFdhdmVTdXJmZXIuT2JzZXJ2ZXIpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgV2F2ZVN1cmZlclxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3dlYmF1ZGlvX2lyY2FtLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTVsQkE7QUFDQTtBQThsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0FBQ0E7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckJBO0FBQ0E7QUF1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFDQTtBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBREEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 146 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcz8zNjk4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 147 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })
/******/ ]);